
sonic_app.elf:     file format elf32-littlenios2
sonic_app.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000201b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x0000da30 memsz 0x0000da30 flags r-x
    LOAD off    0x0000ea50 vaddr 0x0002da50 paddr 0x0002f4b4 align 2**12
         filesz 0x00001a64 memsz 0x00001a64 flags rw-
    LOAD off    0x00010f18 vaddr 0x00030f18 paddr 0x00030f18 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d1bc  000201b4  000201b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006e0  0002d370  0002d370  0000e370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a64  0002da50  0002f4b4  0000ea50  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  00030f18  00030f18  00010f18  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000104b4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cd8  00000000  00000000  000104d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000014cb  00000000  00000000  000111b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023eb5  00000000  00000000  0001267b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007c1c  00000000  00000000  00036530  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00014534  00000000  00000000  0003e14c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001ab0  00000000  00000000  00052680  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000022c7  00000000  00000000  00054130  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c0d0  00000000  00000000  000563f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000624c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  000624d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006602f  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000d  00000000  00000000  00066032  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006603f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00066040  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00066041  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00066045  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00066049  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000013  00000000  00000000  0006604d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000013  00000000  00000000  00066060  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000013  00000000  00000000  00066073  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00066086  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000036  00000000  00000000  00066091  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
000201b4 l    d  .text	00000000 .text
0002d370 l    d  .rodata	00000000 .rodata
0002da50 l    d  .rwdata	00000000 .rwdata
00030f18 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000201ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 main.c
00020294 l     F .text	00000048 handle_pio_interrupts
000202dc l     F .text	0000005c init_pio
00020338 l     F .text	000000fc handle_pci_command
00000000 l    df *ABS*	00000000 routines.c
00000000 l    df *ABS*	00000000 sonic_io.c
00000000 l    df *ABS*	00000000 impure.c
0002da50 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00020f80 l     F .text	00000058 __sprint_r
0002d772 l     O .rodata	00000010 blanks.3452
0002d762 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfprintf_1.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00023000 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00024a28 l     F .text	00000058 std
00024b34 l     F .text	00000008 __fp_lock
00024b3c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0002f480 l     O .rwdata	00000004 charset
0002d7a4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0002d8ec l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00028f5c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0002a088 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0002a9c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002aa24 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002ab28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0002af18 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002aff8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002b158 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0002b388 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002f4a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0002b640 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002e40c l     O .rwdata	00001060 nios_base_jtag_uart
0002b730 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002b970 l     F .text	00000228 altera_avalon_jtag_uart_irq
0002bb98 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002c214 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002c538 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002c67c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0002c7cc l     F .text	000000f8 alt_file_locked
0002ca50 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0002d0ec l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0002d2a0 l     F .text	00000040 alt_sim_halt
00026818 g     F .text	00000094 _mprec_log10
00026904 g     F .text	00000088 __any_on
00028130 g     F .text	00000070 _isatty_r
0002d8c4 g     O .rodata	00000028 __mprec_tinytens
0002b1b8 g     F .text	0000006c alt_main
00030f78 g     O .bss	00000100 alt_irq
000281a0 g     F .text	00000078 _lseek_r
0002f4b4 g       *ABS*	00000000 __flash_rwdata_start
00029a7c g     F .text	00000088 __eqdf2
00031208 g       *ABS*	00000000 __alt_heap_start
00020f08 g     F .text	00000044 printf
00020238 g     F .text	0000005c pmesg
00027b74 g     F .text	00000068 __sseek
00024a90 g     F .text	000000a4 __sinit
0002579c g     F .text	00000084 _setlocale_r
00024b90 g     F .text	0000009c __sfmoreglue
0002b244 g     F .text	00000020 __malloc_unlock
00026294 g     F .text	000000e0 memmove
00024b80 g     F .text	00000010 _cleanup
0002698c g     F .text	000000bc _Balloc
00029b8c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000000c __reset
00030f18 g     O .bss	00000004 edge_capture
00020020 g       *ABS*	00000000 __flash_exceptions_start
000280bc g     F .text	00000074 _fstat_r
00030f34 g     O .bss	00000004 errno
00030f40 g     O .bss	00000004 alt_argv
0003746c g       *ABS*	00000000 _gp
0002e28c g     O .rwdata	00000180 alt_fd_list
0002cc74 g     F .text	00000094 alt_find_dev
000261f4 g     F .text	000000a0 memcpy
00024b74 g     F .text	0000000c _cleanup_r
00029d24 g     F .text	000000f8 __floatsidf
0002c754 g     F .text	00000078 alt_io_redirect
00029c9c g     F .text	00000088 __ltdf2
0002d370 g       *ABS*	00000000 __DTOR_END__
00026768 g     F .text	000000b0 __ratio
00020000 g       *ABS*	00000000 __alt_mem_nios_base_onchip_ram
0002bdb0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00020f4c g     F .text	00000034 _printf_r
0002a1c4 g     F .text	00000008 __udivsi3
0002ae54 g     F .text	000000c4 isatty
0002d7d4 g     O .rodata	000000c8 __mprec_tens
00025778 g     F .text	00000008 __locale_charset
00020908 g     F .text	00000030 set_pma_loopback
00030f28 g     O .bss	00000004 __malloc_top_pad
0002f47c g     O .rwdata	00000004 __mb_cur_max
0002062c g     F .text	0000001c read_pma_controller
00025780 g     F .text	0000000c _localeconv_r
000270f0 g     F .text	0000003c __i2b
0002515c g     F .text	0000049c __sfvwrite_r
00027afc g     F .text	00000070 _sbrk_r
00020844 g     F .text	000000c4 wait_on_reset
00028218 g     F .text	00000078 _read_r
0002de50 g     O .rwdata	0000000c __lc_ctype
0002f49c g     O .rwdata	00000004 alt_max_fd
0002a6c4 g     F .text	00000138 __unpack_d
00027f98 g     F .text	00000110 _fclose_r
000249f4 g     F .text	00000034 fflush
00030f2c g     O .bss	00000004 __malloc_max_sbrked_mem
000293ec g     F .text	00000074 __adddf3
00026648 g     F .text	00000120 __b2d
000288fc g     F .text	00000660 __umoddi3
0002b064 g     F .text	000000f4 lseek
0002f478 g     O .rwdata	00000004 _global_impure_ptr
00027498 g     F .text	000005f4 _realloc_r
00031208 g       *ABS*	00000000 __bss_end
0002ad5c g     F .text	000000f8 alt_iic_isr_register
0002cb48 g     F .text	0000010c alt_tick
00028290 g     F .text	0000066c __udivdi3
0002d89c g     O .rodata	00000028 __mprec_bigtens
00027378 g     F .text	00000120 __s2b
00029ef4 g     F .text	00000194 __floatunsidf
00026568 g     F .text	00000060 __mcmp
00024b5c g     F .text	00000018 __fp_lock_all
0002ad14 g     F .text	00000048 alt_ic_irq_enabled
0002f470 g     O .rwdata	00000004 state
0002cab0 g     F .text	00000098 alt_alarm_stop
00020664 g     F .text	0000001c read_pma_ch_controller
00030f38 g     O .bss	00000004 alt_irq_active
000200ec g     F .exceptions	000000c8 alt_irq_handler
0002e264 g     O .rwdata	00000028 alt_dev_null
00020680 g     F .text	000000e0 read_mdio
00020648 g     F .text	0000001c read_pma_reset_controller
0002c468 g     F .text	0000001c alt_dcache_flush_all
00026434 g     F .text	00000070 __hi0bits
00029e1c g     F .text	000000d8 __fixdfsi
0002f4b4 g       *ABS*	00000000 __ram_rwdata_end
0002f494 g     O .rwdata	00000008 alt_dev_list
0002b51c g     F .text	00000124 write
00020760 g     F .text	000000e4 write_mdio
0002da50 g       *ABS*	00000000 __ram_rodata_end
0002aa50 g     F .text	000000d8 fstat
00027258 g     F .text	00000120 __pow5mult
00030f1c g     O .bss	00000004 __nlocale_changed
0002a1cc g     F .text	00000008 __umodsi3
00031208 g       *ABS*	00000000 end
0002b8b0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0002d36c g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
0002c284 g     F .text	00000090 alt_avalon_timer_sc_init
0002a330 g     F .text	00000080 __clzsi2
0002bfd4 g     F .text	00000240 altera_avalon_jtag_uart_write
00024a80 g     F .text	00000004 __sfp_lock_acquire
00026110 g     F .text	000000e4 memchr
00020fd8 g     F .text	00001ec4 ___vfprintf_internal_r
00024e48 g     F .text	00000314 _free_r
0002d0f0 g     F .text	000001b0 __call_exitprocs
00030f20 g     O .bss	00000004 __mlocale_changed
0002f488 g     O .rwdata	00000004 __malloc_sbrk_base
000201b4 g     F .text	0000003c _start
00030f48 g     O .bss	00000004 _alt_tick_rate
00026d50 g     F .text	0000014c __lshift
00030f4c g     O .bss	00000004 _alt_nticks
0002b264 g     F .text	00000124 read
0002b6d4 g     F .text	0000005c alt_sys_init
0002cfb8 g     F .text	00000134 __register_exitproc
00026e9c g     F .text	00000254 __multiply
0002bc48 g     F .text	00000074 altera_avalon_jtag_uart_close
0002a1d4 g     F .text	00000038 __mulsi3
0002da50 g       *ABS*	00000000 __ram_rwdata_start
0002d370 g       *ABS*	00000000 __ram_rodata_start
00030f50 g     O .bss	00000028 __malloc_current_mallinfo
00026a48 g     F .text	0000017c __d2b
00020938 g     F .text	00000030 unset_pma_loopback
0002b768 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0002ce28 g     F .text	000000d0 alt_get_fd
0002a7fc g     F .text	000000c8 __fpcmp_parts_d
00027f28 g     F .text	00000070 _close_r
0002cf44 g     F .text	00000074 memcmp
0002b818 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00031208 g       *ABS*	00000000 __alt_stack_base
0002b860 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00022ec4 g     F .text	0000013c __swsetup_r
00029824 g     F .text	00000258 __divdf3
00024c2c g     F .text	000000f0 __sfp
000268ac g     F .text	00000058 __copybits
0002de5c g     O .rwdata	00000408 __malloc_av_
00024a8c g     F .text	00000004 __sinit_lock_release
00029460 g     F .text	000003c4 __muldf3
00027c58 g     F .text	00000060 __sread
00020a2c g     F .text	00000380 netlogic_init
0002cd08 g     F .text	00000120 alt_find_file
0002c484 g     F .text	000000b4 alt_dev_llist_insert
0002b224 g     F .text	00000020 __malloc_lock
0002b460 g     F .text	000000bc sbrk
000247f8 g     F .text	000001fc _fflush_r
00027e60 g     F .text	000000c8 _calloc_r
000209b8 g     F .text	00000074 ext_xcvr_reset
00030f18 g       *ABS*	00000000 __bss_start
00026374 g     F .text	00000098 memset
000204e8 g     F .text	00000048 main
00030f44 g     O .bss	00000004 alt_envp
00030f30 g     O .bss	00000004 __malloc_max_total_mem
0002b7c0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00027b6c g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
000280a8 g     F .text	00000014 fclose
00031078 g     O .bss	00000190 _atexit0
00023244 g     F .text	000015b4 _dtoa_r
000259d0 g     F .text	00000740 _malloc_r
0002f4a0 g     O .rwdata	00000004 alt_errno
00020530 g     F .text	00000070 wr32
000256c0 g     F .text	000000b8 _fwalk
0002a104 g     F .text	00000060 __divsi3
00020434 g     F .text	000000b4 execute
0002d8f8 g     O .rodata	00000014 __thenan_df
00024d1c g     F .text	0000012c _malloc_trim_r
0002d370 g       *ABS*	00000000 __CTOR_END__
00027cb8 g     F .text	000000bc strcmp
0002d370 g       *ABS*	00000000 __flash_rodata_start
0002d370 g       *ABS*	00000000 __DTOR_LIST__
00029b04 g     F .text	00000088 __nedf2
0002b6a0 g     F .text	00000034 alt_irq_init
0002b3e8 g     F .text	00000078 alt_release_fd
0002d90c g     O .rodata	00000100 __clz_tab
00030f24 g     O .bss	00000004 _PathLocale
0002cef8 g     F .text	00000014 atexit
00027de8 g     F .text	00000078 _write_r
00025820 g     F .text	0000001c setlocale
0002f474 g     O .rwdata	00000004 _impure_ptr
00030f3c g     O .bss	00000004 alt_argc
0002c5fc g     F .text	00000064 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
000265c8 g     F .text	00000080 __ulp
00027a8c g     F .text	00000040 __isinfd
00024b44 g     F .text	00000018 __fp_unlock_all
0002f48c g     O .rwdata	00000008 alt_fs_list
00020968 g     F .text	00000050 read_ext_xcvr_ctrl
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002578c g     F .text	00000010 localeconv
00020610 g     F .text	0000001c stats
0002ab88 g     F .text	00000050 alt_ic_isr_register
0002f4b4 g       *ABS*	00000000 _edata
00031208 g       *ABS*	00000000 _end
000201b4 g       *ABS*	00000000 __ram_exceptions_end
0002bcbc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0002ac74 g     F .text	000000a0 alt_ic_irq_disable
0002f46c g     O .rwdata	00000004 msglevel
00027bdc g     F .text	0000007c __swrite
0002f484 g     O .rwdata	00000004 __malloc_trim_threshold
0002cc54 g     F .text	00000020 altera_nios2_qsys_irq_init
0002cf0c g     F .text	00000038 exit
000255f8 g     F .text	000000c8 _fwalk_reent
00026bc4 g     F .text	0000018c __mdiff
0002a164 g     F .text	00000060 __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00024a84 g     F .text	00000004 __sfp_lock_release
00020dac g     F .text	00000080 avalon_mm_write
0002d2e0 g     F .text	00000020 _exit
00027acc g     F .text	00000030 __isnand
0002c314 g     F .text	00000154 alt_alarm_start
0002a20c g     F .text	00000124 __muldi3
0002583c g     F .text	00000194 __smakebuf_r
000201f0 g     F .text	00000048 debug_printf
00027d74 g     F .text	00000074 strlen
0002c8c4 g     F .text	0000018c open
00029c14 g     F .text	00000088 __gedf2
0002c660 g     F .text	0000001c alt_icache_flush_all
00020e2c g     F .text	000000dc avalon_mm_read
0002f4a4 g     O .rwdata	00000004 alt_priority_mask
0002abd8 g     F .text	0000009c alt_ic_irq_enable
00022e9c g     F .text	00000024 __vfprintf_internal
000205a0 g     F .text	00000070 rd32
0002936c g     F .text	00000080 __subdf3
000264a4 g     F .text	000000c4 __lo0bits
0002f4ac g     O .rwdata	00000008 alt_alarm_list
0002c598 g     F .text	00000064 _do_ctors
0002a8c4 g     F .text	00000100 close
0002af78 g     F .text	00000080 alt_load
0002a3b0 g     F .text	00000314 __pack_d
00022ec0 g     F .text	00000004 vfprintf
00000000  w      *UND*	00000000 free
00024a88 g     F .text	00000004 __sinit_lock_acquire
0002712c g     F .text	0000012c __multadd
0002640c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08406d14 	ori	at,at,436
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   20044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200ec0 	call	200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000306 	br	20098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   20094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   20098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   2009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200e8:	ef80083a 	eret

000200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200ec:	defff904 	addi	sp,sp,-28
   200f0:	dfc00615 	stw	ra,24(sp)
   200f4:	df000515 	stw	fp,20(sp)
   200f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   200fc:	0005313a 	rdctl	r2,ipending
   20100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   20104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   20108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   2010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20110:	00800044 	movi	r2,1
   20114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   20118:	e0ffff17 	ldw	r3,-4(fp)
   2011c:	e0bffe17 	ldw	r2,-8(fp)
   20120:	1884703a 	and	r2,r3,r2
   20124:	1005003a 	cmpeq	r2,r2,zero
   20128:	1000161e 	bne	r2,zero,20184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2012c:	e0bffd17 	ldw	r2,-12(fp)
   20130:	00c000f4 	movhi	r3,3
   20134:	18c3de04 	addi	r3,r3,3960
   20138:	100490fa 	slli	r2,r2,3
   2013c:	10c5883a 	add	r2,r2,r3
   20140:	11400017 	ldw	r5,0(r2)
   20144:	e0bffd17 	ldw	r2,-12(fp)
   20148:	00c000f4 	movhi	r3,3
   2014c:	18c3de04 	addi	r3,r3,3960
   20150:	100490fa 	slli	r2,r2,3
   20154:	10c5883a 	add	r2,r2,r3
   20158:	10800104 	addi	r2,r2,4
   2015c:	11000017 	ldw	r4,0(r2)
   20160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20164:	0005313a 	rdctl	r2,ipending
   20168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   2016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   20170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   20174:	e0bfff17 	ldw	r2,-4(fp)
   20178:	1004c03a 	cmpne	r2,r2,zero
   2017c:	103fe31e 	bne	r2,zero,2010c <alt_irq_handler+0x20>
   20180:	00000706 	br	201a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   20184:	e0bffe17 	ldw	r2,-8(fp)
   20188:	1085883a 	add	r2,r2,r2
   2018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   20190:	e0bffd17 	ldw	r2,-12(fp)
   20194:	10800044 	addi	r2,r2,1
   20198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   2019c:	003fde06 	br	20118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   201a0:	e037883a 	mov	sp,fp
   201a4:	dfc00117 	ldw	ra,4(sp)
   201a8:	df000017 	ldw	fp,0(sp)
   201ac:	dec00204 	addi	sp,sp,8
   201b0:	f800283a 	ret

Disassembly of section .text:

000201b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   201b4:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   201b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   201bc:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   201c0:	d69d1b14 	ori	gp,gp,29804
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   201c4:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   201c8:	1083c614 	ori	r2,r2,3864

    movhi r3, %hi(__bss_end)
   201cc:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   201d0:	18c48214 	ori	r3,r3,4616

    beq r2, r3, 1f
   201d4:	10c00326 	beq	r2,r3,201e4 <_start+0x30>

0:
    stw zero, (r2)
   201d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201e0:	10fffd36 	bltu	r2,r3,201d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201e4:	002af780 	call	2af78 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201e8:	002b1b80 	call	2b1b8 <alt_main>

000201ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201ec:	003fff06 	br	201ec <alt_after_alt_main>

000201f0 <debug_printf>:
#include "debug.h"
#include <stdio.h>

extern int msglevel; /* the higher, the more messages... */

void debug_printf (char *format, va_list ap) {
   201f0:	defffc04 	addi	sp,sp,-16
   201f4:	dfc00315 	stw	ra,12(sp)
   201f8:	df000215 	stw	fp,8(sp)
   201fc:	df000204 	addi	fp,sp,8
   20200:	e13ffe15 	stw	r4,-8(fp)
   20204:	e17fff15 	stw	r5,-4(fp)

	vfprintf( stderr, format, ap);
   20208:	008000f4 	movhi	r2,3
   2020c:	10bd1d04 	addi	r2,r2,-2956
   20210:	10800017 	ldw	r2,0(r2)
   20214:	11000317 	ldw	r4,12(r2)
   20218:	e17ffe17 	ldw	r5,-8(fp)
   2021c:	e1bfff17 	ldw	r6,-4(fp)
   20220:	0022ec00 	call	22ec0 <vfprintf>
}
   20224:	e037883a 	mov	sp,fp
   20228:	dfc00117 	ldw	ra,4(sp)
   2022c:	df000017 	ldw	fp,0(sp)
   20230:	dec00204 	addi	sp,sp,8
   20234:	f800283a 	ret

00020238 <pmesg>:

#if defined(NDEBUG) && defined(__GNUC__)
/* Nothing. pmesg has been "defined away" in debug.h already. */
#else
void pmesg(int level, char* format, ...) {
   20238:	defff904 	addi	sp,sp,-28
   2023c:	dfc00415 	stw	ra,16(sp)
   20240:	df000315 	stw	fp,12(sp)
   20244:	df000304 	addi	fp,sp,12
   20248:	e13ffe15 	stw	r4,-8(fp)
   2024c:	e1800215 	stw	r6,8(fp)
   20250:	e1c00315 	stw	r7,12(fp)
   20254:	e17fff15 	stw	r5,-4(fp)
	/* Empty body, so a good compiler will optimise calls
	   to pmesg away */
#else
        va_list args;

        if (level>msglevel)
   20258:	008000f4 	movhi	r2,3
   2025c:	10bd1b04 	addi	r2,r2,-2964
   20260:	10c00017 	ldw	r3,0(r2)
   20264:	e0bffe17 	ldw	r2,-8(fp)
   20268:	18800516 	blt	r3,r2,20280 <pmesg+0x48>
                return;

        va_start(args, format);
   2026c:	e0800204 	addi	r2,fp,8
   20270:	e0bffd15 	stw	r2,-12(fp)

        debug_printf(format, args);
   20274:	e17ffd17 	ldw	r5,-12(fp)
   20278:	e13fff17 	ldw	r4,-4(fp)
   2027c:	00201f00 	call	201f0 <debug_printf>

        va_end(args);
#endif /* NDEBUG */
#endif /* NDEBUG && __GNUC__ */
}
   20280:	e037883a 	mov	sp,fp
   20284:	dfc00117 	ldw	ra,4(sp)
   20288:	df000017 	ldw	fp,0(sp)
   2028c:	dec00404 	addi	sp,sp,16
   20290:	f800283a 	ret

00020294 <handle_pio_interrupts>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void handle_pio_interrupts(void* context)
#else
static void handle_pio_interrupts(void* context, alt_u32 id)
#endif
{
   20294:	defffd04 	addi	sp,sp,-12
   20298:	df000215 	stw	fp,8(sp)
   2029c:	df000204 	addi	fp,sp,8
   202a0:	e13fff15 	stw	r4,-4(fp)
    /* Cast context to edge_capture's type. It is important that this be
     * declared volatile to avoid unwanted compiler optimization.
     */
    volatile int* edge_capture_ptr = (volatile int*) context;
   202a4:	e0bfff17 	ldw	r2,-4(fp)
   202a8:	e0bffe15 	stw	r2,-8(fp)
    /* Store the value in the Button's edge capture register in *context. */
    *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(NIOS_BASE_EXT_CTRL_BASE);
   202ac:	00810304 	movi	r2,1036
   202b0:	10c00037 	ldwio	r3,0(r2)
   202b4:	e0bffe17 	ldw	r2,-8(fp)
   202b8:	10c00015 	stw	r3,0(r2)
    /* Reset the Button's edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(NIOS_BASE_EXT_CTRL_BASE, 0);
   202bc:	00810304 	movi	r2,1036
   202c0:	10000035 	stwio	zero,0(r2)
    /*
     * Read the PIO to delay ISR exit. This is done to prevent a spurious
     * interrupt in systems with high processor -> pio latency and fast
     * interrupts.
     */
    IORD_ALTERA_AVALON_PIO_EDGE_CAP(NIOS_BASE_EXT_CTRL_BASE);
   202c4:	00810304 	movi	r2,1036
   202c8:	10800037 	ldwio	r2,0(r2)
}
   202cc:	e037883a 	mov	sp,fp
   202d0:	df000017 	ldw	fp,0(sp)
   202d4:	dec00104 	addi	sp,sp,4
   202d8:	f800283a 	ret

000202dc <init_pio>:

/* Initialize the button_pio. */

static void init_pio()
{
   202dc:	defffc04 	addi	sp,sp,-16
   202e0:	dfc00315 	stw	ra,12(sp)
   202e4:	df000215 	stw	fp,8(sp)
   202e8:	df000204 	addi	fp,sp,8
    /* Recast the edge_capture pointer to match the alt_irq_register() function
     * prototype. */
    void* edge_capture_ptr = (void*) &edge_capture;
   202ec:	d0a6ab04 	addi	r2,gp,-25940
   202f0:	e0bfff15 	stw	r2,-4(fp)
    /* Enable all 4 button interrupts. */
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(NIOS_BASE_EXT_CTRL_BASE, 0xf);
   202f4:	00c10204 	movi	r3,1032
   202f8:	008003c4 	movi	r2,15
   202fc:	18800035 	stwio	r2,0(r3)
    /* Reset the edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(NIOS_BASE_EXT_CTRL_BASE, 0x0);
   20300:	00810304 	movi	r2,1036
   20304:	10000035 	stwio	zero,0(r2)
    /* Register the interrupt handler. */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(NIOS_BASE_EXT_CTRL_IRQ_INTERRUPT_CONTROLLER_ID, NIOS_BASE_EXT_CTRL_IRQ,
   20308:	d8000015 	stw	zero,0(sp)
   2030c:	0009883a 	mov	r4,zero
   20310:	01400144 	movi	r5,5
   20314:	018000b4 	movhi	r6,2
   20318:	3180a504 	addi	r6,r6,660
   2031c:	e1ffff17 	ldw	r7,-4(fp)
   20320:	002ab880 	call	2ab88 <alt_ic_isr_register>
      handle_pio_interrupts, edge_capture_ptr, 0x0);
#else
    alt_irq_register( EXT_CTRL_IRQ, edge_capture_ptr,
      handle_pio_interrupts);
#endif
}
   20324:	e037883a 	mov	sp,fp
   20328:	dfc00117 	ldw	ra,4(sp)
   2032c:	df000017 	ldw	fp,0(sp)
   20330:	dec00204 	addi	sp,sp,8
   20334:	f800283a 	ret

00020338 <handle_pci_command>:

static void handle_pci_command() {
   20338:	defffe04 	addi	sp,sp,-8
   2033c:	dfc00115 	stw	ra,4(sp)
   20340:	df000015 	stw	fp,0(sp)
   20344:	d839883a 	mov	fp,sp
	if((edge_capture & 0x1) != 0){
   20348:	d0a6ab17 	ldw	r2,-25940(gp)
   2034c:	1080004c 	andi	r2,r2,1
   20350:	10803fcc 	andi	r2,r2,255
   20354:	1005003a 	cmpeq	r2,r2,zero
   20358:	10000b1e 	bne	r2,zero,20388 <handle_pci_command+0x50>
		// reset
		pmesg (10, "init netlogic xcvr\n");
   2035c:	01000284 	movi	r4,10
   20360:	014000f4 	movhi	r5,3
   20364:	2974dc04 	addi	r5,r5,-11408
   20368:	00202380 	call	20238 <pmesg>
		state = ST_INIT;
   2036c:	00800044 	movi	r2,1
   20370:	d0a00115 	stw	r2,-32764(gp)
		edge_capture &= ~0x1;
   20374:	d0e6ab17 	ldw	r3,-25940(gp)
   20378:	00bfff84 	movi	r2,-2
   2037c:	1884703a 	and	r2,r3,r2
   20380:	d0a6ab15 	stw	r2,-25940(gp)
   20384:	00002606 	br	20420 <handle_pci_command+0xe8>
	} else if ((edge_capture & 0x2) != 0) {
   20388:	d0a6ab17 	ldw	r2,-25940(gp)
   2038c:	1080008c 	andi	r2,r2,2
   20390:	1005003a 	cmpeq	r2,r2,zero
   20394:	10000b1e 	bne	r2,zero,203c4 <handle_pci_command+0x8c>
		// loopback on
		pmesg (10, "xcvr loopback on\n");
   20398:	01000284 	movi	r4,10
   2039c:	014000f4 	movhi	r5,3
   203a0:	2974e104 	addi	r5,r5,-11388
   203a4:	00202380 	call	20238 <pmesg>
		state = ST_LPBK_ON;
   203a8:	00800084 	movi	r2,2
   203ac:	d0a00115 	stw	r2,-32764(gp)
		edge_capture &= ~0x2;
   203b0:	d0e6ab17 	ldw	r3,-25940(gp)
   203b4:	00bfff44 	movi	r2,-3
   203b8:	1884703a 	and	r2,r3,r2
   203bc:	d0a6ab15 	stw	r2,-25940(gp)
   203c0:	00001706 	br	20420 <handle_pci_command+0xe8>
	} else if ((edge_capture & 0x4) != 0) {
   203c4:	d0a6ab17 	ldw	r2,-25940(gp)
   203c8:	1080010c 	andi	r2,r2,4
   203cc:	1005003a 	cmpeq	r2,r2,zero
   203d0:	10000b1e 	bne	r2,zero,20400 <handle_pci_command+0xc8>
		// loopback off
		pmesg (10, "xcvr loopback off\n");
   203d4:	01000284 	movi	r4,10
   203d8:	014000f4 	movhi	r5,3
   203dc:	2974e604 	addi	r5,r5,-11368
   203e0:	00202380 	call	20238 <pmesg>
		state =ST_LPBK_OFF;
   203e4:	008000c4 	movi	r2,3
   203e8:	d0a00115 	stw	r2,-32764(gp)
		edge_capture &= ~0x4;
   203ec:	d0e6ab17 	ldw	r3,-25940(gp)
   203f0:	00bffec4 	movi	r2,-5
   203f4:	1884703a 	and	r2,r3,r2
   203f8:	d0a6ab15 	stw	r2,-25940(gp)
   203fc:	00000806 	br	20420 <handle_pci_command+0xe8>
	} else if ((edge_capture & 0x8) != 0) {
   20400:	d0a6ab17 	ldw	r2,-25940(gp)
   20404:	1080020c 	andi	r2,r2,8
   20408:	1005003a 	cmpeq	r2,r2,zero
   2040c:	1000041e 	bne	r2,zero,20420 <handle_pci_command+0xe8>
		edge_capture &= ~0x8;
   20410:	d0a6ab17 	ldw	r2,-25940(gp)
   20414:	00fffdc4 	movi	r3,-9
   20418:	10c4703a 	and	r2,r2,r3
   2041c:	d0a6ab15 	stw	r2,-25940(gp)
	}
}
   20420:	e037883a 	mov	sp,fp
   20424:	dfc00117 	ldw	ra,4(sp)
   20428:	df000017 	ldw	fp,0(sp)
   2042c:	dec00204 	addi	sp,sp,8
   20430:	f800283a 	ret

00020434 <execute>:
 * the interface signals includes:
 * - xcvr_init
 * - xcvr_loopback
 *
 */
void execute () {
   20434:	defffd04 	addi	sp,sp,-12
   20438:	dfc00215 	stw	ra,8(sp)
   2043c:	df000115 	stw	fp,4(sp)
   20440:	df000104 	addi	fp,sp,4
	switch (state){
   20444:	d0a00117 	ldw	r2,-32764(gp)
   20448:	e0bfff15 	stw	r2,-4(fp)
   2044c:	e0ffff17 	ldw	r3,-4(fp)
   20450:	18800168 	cmpgeui	r2,r3,5
   20454:	10001f1e 	bne	r2,zero,204d4 <execute+0xa0>
   20458:	e13fff17 	ldw	r4,-4(fp)
   2045c:	e13fff17 	ldw	r4,-4(fp)
   20460:	2105883a 	add	r2,r4,r4
   20464:	1087883a 	add	r3,r2,r2
   20468:	008000b4 	movhi	r2,2
   2046c:	10811f04 	addi	r2,r2,1148
   20470:	1885883a 	add	r2,r3,r2
   20474:	10800017 	ldw	r2,0(r2)
   20478:	1000683a 	jmp	r2
   2047c:	000204ac 	andhi	zero,zero,2066
   20480:	00020490 	cmplti	zero,zero,2066
   20484:	000204c0 	call	204c <__alt_mem_nios_base_onchip_ram-0x1dfb4>
   20488:	000204cc 	andi	zero,zero,2067
   2048c:	000204a0 	cmpeqi	zero,zero,2066
		case ST_INIT:
			ext_xcvr_reset();
   20490:	00209b80 	call	209b8 <ext_xcvr_reset>
			netlogic_init();
   20494:	0020a2c0 	call	20a2c <netlogic_init>
			state = ST_IDLE;
   20498:	d0200115 	stw	zero,-32764(gp)
			break;
   2049c:	00000d06 	br	204d4 <execute+0xa0>
		case ST_RESET:
			//reset all registers
			state = ST_INIT;
   204a0:	00800044 	movi	r2,1
   204a4:	d0a00115 	stw	r2,-32764(gp)
			break;
   204a8:	00000a06 	br	204d4 <execute+0xa0>
		case ST_IDLE:
			//
			if (edge_capture != 0) {
   204ac:	d0a6ab17 	ldw	r2,-25940(gp)
   204b0:	1005003a 	cmpeq	r2,r2,zero
   204b4:	1000071e 	bne	r2,zero,204d4 <execute+0xa0>
				handle_pci_command();
   204b8:	00203380 	call	20338 <handle_pci_command>
			}
			break;
   204bc:	00000506 	br	204d4 <execute+0xa0>
		case ST_LPBK_ON:
			set_pma_loopback();
   204c0:	00209080 	call	20908 <set_pma_loopback>
			state = ST_IDLE;
   204c4:	d0200115 	stw	zero,-32764(gp)
			break;
   204c8:	00000206 	br	204d4 <execute+0xa0>
		case ST_LPBK_OFF:
			unset_pma_loopback();
   204cc:	00209380 	call	20938 <unset_pma_loopback>
			state = ST_IDLE;
   204d0:	d0200115 	stw	zero,-32764(gp)
			break;
		default:
			// upon reset, goes to reset state.
			break;
	}
}
   204d4:	e037883a 	mov	sp,fp
   204d8:	dfc00117 	ldw	ra,4(sp)
   204dc:	df000017 	ldw	fp,0(sp)
   204e0:	dec00204 	addi	sp,sp,8
   204e4:	f800283a 	ret

000204e8 <main>:

int main()
{
   204e8:	defffd04 	addi	sp,sp,-12
   204ec:	dfc00215 	stw	ra,8(sp)
   204f0:	df000115 	stw	fp,4(sp)
   204f4:	df000104 	addi	fp,sp,4
	pmesg(1, "Welcome to SoNIC Nios firmware!\n");
   204f8:	01000044 	movi	r4,1
   204fc:	014000f4 	movhi	r5,3
   20500:	2974eb04 	addi	r5,r5,-11348
   20504:	00202380 	call	20238 <pmesg>
    init_pio();
   20508:	00202dc0 	call	202dc <init_pio>

    unsigned int val;
    val = avalon_mm_read(0xC000);
   2050c:	01300014 	movui	r4,49152
   20510:	0020e2c0 	call	20e2c <avalon_mm_read>
   20514:	e0bfff15 	stw	r2,-4(fp)
    printf("read 0x%x\n", val);
   20518:	010000f4 	movhi	r4,3
   2051c:	2134f404 	addi	r4,r4,-11312
   20520:	e17fff17 	ldw	r5,-4(fp)
   20524:	0020f080 	call	20f08 <printf>

	while(1){
		execute();
   20528:	00204340 	call	20434 <execute>
	}
   2052c:	003ffe06 	br	20528 <main+0x40>

00020530 <wr32>:
#define BITCLEAR(x,y) 		!BITSET((x), (y))
#define BITSSET(x,y) 		(((x) & (y)) == (y))
#define BITSCLEAR(x,y) 		(((x) & (y)) == 0)
#define BITVAL(x,y) 		(((x)>>(y)) & 1)

void wr32 (unsigned int base_address, unsigned int sub_base_address, unsigned int offset, unsigned int value) {
   20530:	defff904 	addi	sp,sp,-28
   20534:	dfc00615 	stw	ra,24(sp)
   20538:	df000515 	stw	fp,20(sp)
   2053c:	df000504 	addi	fp,sp,20
   20540:	e13ffc15 	stw	r4,-16(fp)
   20544:	e17ffd15 	stw	r5,-12(fp)
   20548:	e1bffe15 	stw	r6,-8(fp)
   2054c:	e1ffff15 	stw	r7,-4(fp)
	unsigned int address;
	address = base_address + sub_base_address + offset;
   20550:	e0fffc17 	ldw	r3,-16(fp)
   20554:	e0bffd17 	ldw	r2,-12(fp)
   20558:	1887883a 	add	r3,r3,r2
   2055c:	e0bffe17 	ldw	r2,-8(fp)
   20560:	1885883a 	add	r2,r3,r2
   20564:	e0bffb15 	stw	r2,-20(fp)
	avalon_mm_write (address, value);
   20568:	e13ffb17 	ldw	r4,-20(fp)
   2056c:	e17fff17 	ldw	r5,-4(fp)
   20570:	0020dac0 	call	20dac <avalon_mm_write>
	pmesg(12, "wr32: address 0x%x, val 0x%x\n", address,value);
   20574:	01000304 	movi	r4,12
   20578:	014000f4 	movhi	r5,3
   2057c:	2974f704 	addi	r5,r5,-11300
   20580:	e1bffb17 	ldw	r6,-20(fp)
   20584:	e1ffff17 	ldw	r7,-4(fp)
   20588:	00202380 	call	20238 <pmesg>
}
   2058c:	e037883a 	mov	sp,fp
   20590:	dfc00117 	ldw	ra,4(sp)
   20594:	df000017 	ldw	fp,0(sp)
   20598:	dec00204 	addi	sp,sp,8
   2059c:	f800283a 	ret

000205a0 <rd32>:

unsigned int rd32 (unsigned int base_address, unsigned int sub_base_address, unsigned int offset) {
   205a0:	defff904 	addi	sp,sp,-28
   205a4:	dfc00615 	stw	ra,24(sp)
   205a8:	df000515 	stw	fp,20(sp)
   205ac:	df000504 	addi	fp,sp,20
   205b0:	e13ffd15 	stw	r4,-12(fp)
   205b4:	e17ffe15 	stw	r5,-8(fp)
   205b8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int value;
	unsigned int address;
	address = base_address + sub_base_address + offset;
   205bc:	e0fffd17 	ldw	r3,-12(fp)
   205c0:	e0bffe17 	ldw	r2,-8(fp)
   205c4:	1887883a 	add	r3,r3,r2
   205c8:	e0bfff17 	ldw	r2,-4(fp)
   205cc:	1885883a 	add	r2,r3,r2
   205d0:	e0bffb15 	stw	r2,-20(fp)
	value = avalon_mm_read (address);
   205d4:	e13ffb17 	ldw	r4,-20(fp)
   205d8:	0020e2c0 	call	20e2c <avalon_mm_read>
   205dc:	e0bffc15 	stw	r2,-16(fp)
	pmesg(12, "rd32: address 0x%x, val 0x%x\n", address,value);
   205e0:	01000304 	movi	r4,12
   205e4:	014000f4 	movhi	r5,3
   205e8:	2974ff04 	addi	r5,r5,-11268
   205ec:	e1bffb17 	ldw	r6,-20(fp)
   205f0:	e1fffc17 	ldw	r7,-16(fp)
   205f4:	00202380 	call	20238 <pmesg>
	return value;
   205f8:	e0bffc17 	ldw	r2,-16(fp)
}
   205fc:	e037883a 	mov	sp,fp
   20600:	dfc00117 	ldw	ra,4(sp)
   20604:	df000017 	ldw	fp,0(sp)
   20608:	dec00204 	addi	sp,sp,8
   2060c:	f800283a 	ret

00020610 <stats>:

void stats (){
   20610:	deffff04 	addi	sp,sp,-4
   20614:	df000015 	stw	fp,0(sp)
   20618:	d839883a 	mov	fp,sp

}
   2061c:	e037883a 	mov	sp,fp
   20620:	df000017 	ldw	fp,0(sp)
   20624:	dec00104 	addi	sp,sp,4
   20628:	f800283a 	ret

0002062c <read_pma_controller>:

void read_pma_controller(){
   2062c:	deffff04 	addi	sp,sp,-4
   20630:	df000015 	stw	fp,0(sp)
   20634:	d839883a 	mov	fp,sp

}
   20638:	e037883a 	mov	sp,fp
   2063c:	df000017 	ldw	fp,0(sp)
   20640:	dec00104 	addi	sp,sp,4
   20644:	f800283a 	ret

00020648 <read_pma_reset_controller>:

void read_pma_reset_controller() {
   20648:	deffff04 	addi	sp,sp,-4
   2064c:	df000015 	stw	fp,0(sp)
   20650:	d839883a 	mov	fp,sp

}
   20654:	e037883a 	mov	sp,fp
   20658:	df000017 	ldw	fp,0(sp)
   2065c:	dec00104 	addi	sp,sp,4
   20660:	f800283a 	ret

00020664 <read_pma_ch_controller>:

void read_pma_ch_controller () {
   20664:	deffff04 	addi	sp,sp,-4
   20668:	df000015 	stw	fp,0(sp)
   2066c:	d839883a 	mov	fp,sp


}
   20670:	e037883a 	mov	sp,fp
   20674:	df000017 	ldw	fp,0(sp)
   20678:	dec00104 	addi	sp,sp,4
   2067c:	f800283a 	ret

00020680 <read_mdio>:
  Writing to dev_prt_phy_address register (16 bits) of address 0x80 (0x20 on the slave)
    Bit [4:0] : phydev_address = clause 22 PHYAD / clause 45 DEVAD (device address)
    Bit [12:8] : prt_address = clause 45 PRTAD (for HSMC X2 daughter card, the value is define by the dip switch on the board)
    Bit [31:16] : c1ause 45 register address (refer to IEEE 802.1 clause 45 for description)
 ============================================================================== */
unsigned int read_mdio (unsigned int address) {
   20680:	defffa04 	addi	sp,sp,-24
   20684:	dfc00515 	stw	ra,20(sp)
   20688:	df000415 	stw	fp,16(sp)
   2068c:	df000404 	addi	fp,sp,16
   20690:	e13fff15 	stw	r4,-4(fp)
	unsigned int mdio_reg_value = address << 16 | 0x1;
   20694:	e0bfff17 	ldw	r2,-4(fp)
   20698:	1004943a 	slli	r2,r2,16
   2069c:	10800054 	ori	r2,r2,1
   206a0:	e0bffe15 	stw	r2,-8(fp)
	unsigned int val;
	unsigned int ret_val;

	val = rd32(MDIO_BASE_ADDR, MDIO_CSR_ADDR_CL45, 0);
   206a4:	01020004 	movi	r4,2048
   206a8:	01402104 	movi	r5,132
   206ac:	000d883a 	mov	r6,zero
   206b0:	00205a00 	call	205a0 <rd32>
   206b4:	e0bffd15 	stw	r2,-12(fp)
	pmesg(10, "Read dev_prt_phy_add register 0x%x = 0x%x\n", MDIO_CSR_ADDR_CL45, val);
   206b8:	01000284 	movi	r4,10
   206bc:	014000f4 	movhi	r5,3
   206c0:	29750704 	addi	r5,r5,-11236
   206c4:	01802104 	movi	r6,132
   206c8:	e1fffd17 	ldw	r7,-12(fp)
   206cc:	00202380 	call	20238 <pmesg>

	wr32 (MDIO_BASE_ADDR, MDIO_CSR_ADDR_CL45, 0, mdio_reg_value);
   206d0:	01020004 	movi	r4,2048
   206d4:	01402104 	movi	r5,132
   206d8:	000d883a 	mov	r6,zero
   206dc:	e1fffe17 	ldw	r7,-8(fp)
   206e0:	00205300 	call	20530 <wr32>

	pmesg(10, "Read dev_prt_phy_add register 0x%x = 0x%x\n", MDIO_CSR_ADDR_CL45, rd32(MDIO_BASE_ADDR, MDIO_CSR_ADDR_CL45, 0));
   206e4:	01020004 	movi	r4,2048
   206e8:	01402104 	movi	r5,132
   206ec:	000d883a 	mov	r6,zero
   206f0:	00205a00 	call	205a0 <rd32>
   206f4:	100f883a 	mov	r7,r2
   206f8:	01000284 	movi	r4,10
   206fc:	014000f4 	movhi	r5,3
   20700:	29750704 	addi	r5,r5,-11236
   20704:	01802104 	movi	r6,132
   20708:	00202380 	call	20238 <pmesg>

	ret_val = rd32(MDIO_BASE_ADDR, MDIO_RW_ADDR, 0);
   2070c:	01020004 	movi	r4,2048
   20710:	01402004 	movi	r5,128
   20714:	000d883a 	mov	r6,zero
   20718:	00205a00 	call	205a0 <rd32>
   2071c:	e0bffc15 	stw	r2,-16(fp)
	pmesg(10, "Read PMA/PMD control register 0x%x = 0x%x\n", MDIO_RW_ADDR, ret_val);
   20720:	01000284 	movi	r4,10
   20724:	014000f4 	movhi	r5,3
   20728:	29751204 	addi	r5,r5,-11192
   2072c:	01802004 	movi	r6,128
   20730:	e1fffc17 	ldw	r7,-16(fp)
   20734:	00202380 	call	20238 <pmesg>
	pmesg(10, "-----------------------------------------------\n");
   20738:	01000284 	movi	r4,10
   2073c:	014000f4 	movhi	r5,3
   20740:	29751d04 	addi	r5,r5,-11148
   20744:	00202380 	call	20238 <pmesg>
	return ret_val;
   20748:	e0bffc17 	ldw	r2,-16(fp)
}
   2074c:	e037883a 	mov	sp,fp
   20750:	dfc00117 	ldw	ra,4(sp)
   20754:	df000017 	ldw	fp,0(sp)
   20758:	dec00204 	addi	sp,sp,8
   2075c:	f800283a 	ret

00020760 <write_mdio>:
  Writing to dev_prt_phy_address register (16 bits) of address 0x80 (0x20 on the slave)
    Bit [4:0] : phydev_address = clause 22 PHYAD / clause 45 DEVAD (device address)
    Bit [12:8] : prt_address = clause 45 PRTAD (for HSMC X2 daughter card, the value is define by the dip switch on the board)
    Bit [31:16] : c1ause 45 register address (refer to IEEE 802.1 clause 45 for description)
  ============================================================================== */
void write_mdio (unsigned int address, unsigned int value) {
   20760:	defffa04 	addi	sp,sp,-24
   20764:	dfc00515 	stw	ra,20(sp)
   20768:	df000415 	stw	fp,16(sp)
   2076c:	df000404 	addi	fp,sp,16
   20770:	e13ffe15 	stw	r4,-8(fp)
   20774:	e17fff15 	stw	r5,-4(fp)
	unsigned int mdio_reg_value = address << 16 | 0x1;
   20778:	e0bffe17 	ldw	r2,-8(fp)
   2077c:	1004943a 	slli	r2,r2,16
   20780:	10800054 	ori	r2,r2,1
   20784:	e0bffd15 	stw	r2,-12(fp)
	unsigned int val;

	val = rd32(MDIO_BASE_ADDR, MDIO_CSR_ADDR_CL45, 0);
   20788:	01020004 	movi	r4,2048
   2078c:	01402104 	movi	r5,132
   20790:	000d883a 	mov	r6,zero
   20794:	00205a00 	call	205a0 <rd32>
   20798:	e0bffc15 	stw	r2,-16(fp)
	pmesg(10, "Read dev_prt_phy_add register 0x%x = 0x%x\n", MDIO_CSR_ADDR_CL45, val);
   2079c:	01000284 	movi	r4,10
   207a0:	014000f4 	movhi	r5,3
   207a4:	29750704 	addi	r5,r5,-11236
   207a8:	01802104 	movi	r6,132
   207ac:	e1fffc17 	ldw	r7,-16(fp)
   207b0:	00202380 	call	20238 <pmesg>

	wr32(MDIO_BASE_ADDR, MDIO_CSR_ADDR_CL45, 0, mdio_reg_value);
   207b4:	01020004 	movi	r4,2048
   207b8:	01402104 	movi	r5,132
   207bc:	000d883a 	mov	r6,zero
   207c0:	e1fffd17 	ldw	r7,-12(fp)
   207c4:	00205300 	call	20530 <wr32>

	val = rd32(MDIO_BASE_ADDR, MDIO_CSR_ADDR_CL45, 0);
   207c8:	01020004 	movi	r4,2048
   207cc:	01402104 	movi	r5,132
   207d0:	000d883a 	mov	r6,zero
   207d4:	00205a00 	call	205a0 <rd32>
   207d8:	e0bffc15 	stw	r2,-16(fp)
	pmesg(10, "Read dev_prt_phy_add register 0x%x = 0x%x\n", MDIO_CSR_ADDR_CL45, val);
   207dc:	01000284 	movi	r4,10
   207e0:	014000f4 	movhi	r5,3
   207e4:	29750704 	addi	r5,r5,-11236
   207e8:	01802104 	movi	r6,132
   207ec:	e1fffc17 	ldw	r7,-16(fp)
   207f0:	00202380 	call	20238 <pmesg>

	wr32(MDIO_BASE_ADDR, MDIO_RW_ADDR, 0, value);
   207f4:	01020004 	movi	r4,2048
   207f8:	01402004 	movi	r5,128
   207fc:	000d883a 	mov	r6,zero
   20800:	e1ffff17 	ldw	r7,-4(fp)
   20804:	00205300 	call	20530 <wr32>
	pmesg(10, "Writing 0x%x to 0x%x\n", MDIO_RW_ADDR, value);
   20808:	01000284 	movi	r4,10
   2080c:	014000f4 	movhi	r5,3
   20810:	29752a04 	addi	r5,r5,-11096
   20814:	01802004 	movi	r6,128
   20818:	e1ffff17 	ldw	r7,-4(fp)
   2081c:	00202380 	call	20238 <pmesg>
	pmesg(10, "-----------------------------------------------\n");
   20820:	01000284 	movi	r4,10
   20824:	014000f4 	movhi	r5,3
   20828:	29751d04 	addi	r5,r5,-11148
   2082c:	00202380 	call	20238 <pmesg>
}
   20830:	e037883a 	mov	sp,fp
   20834:	dfc00117 	ldw	ra,4(sp)
   20838:	df000017 	ldw	fp,0(sp)
   2083c:	dec00204 	addi	sp,sp,8
   20840:	f800283a 	ret

00020844 <wait_on_reset>:

void wait_on_reset () {
   20844:	defffb04 	addi	sp,sp,-20
   20848:	dfc00415 	stw	ra,16(sp)
   2084c:	df000315 	stw	fp,12(sp)
   20850:	df000304 	addi	fp,sp,12
	unsigned int mdio_reg_value = 0x1;
   20854:	00800044 	movi	r2,1
   20858:	e0bfff15 	stw	r2,-4(fp)
	unsigned int val;
	unsigned int expired;
	wr32(MDIO_BASE_ADDR, MDIO_CSR_ADDR_CL45, 0, mdio_reg_value);
   2085c:	01020004 	movi	r4,2048
   20860:	01402104 	movi	r5,132
   20864:	000d883a 	mov	r6,zero
   20868:	e1ffff17 	ldw	r7,-4(fp)
   2086c:	00205300 	call	20530 <wr32>
	val = (rd32(MDIO_BASE_ADDR, MDIO_RW_ADDR, 0) | 0x8000) >> 16;
   20870:	01020004 	movi	r4,2048
   20874:	01402004 	movi	r5,128
   20878:	000d883a 	mov	r6,zero
   2087c:	00205a00 	call	205a0 <rd32>
   20880:	10a00014 	ori	r2,r2,32768
   20884:	1004d43a 	srli	r2,r2,16
   20888:	e0bffe15 	stw	r2,-8(fp)

	while (val > 0) {
   2088c:	00001206 	br	208d8 <wait_on_reset+0x94>
		expired++;
   20890:	e0bffd17 	ldw	r2,-12(fp)
   20894:	10800044 	addi	r2,r2,1
   20898:	e0bffd15 	stw	r2,-12(fp)
		if (expired > 100){
   2089c:	e0bffd17 	ldw	r2,-12(fp)
   208a0:	10801970 	cmpltui	r2,r2,101
   208a4:	1000051e 	bne	r2,zero,208bc <wait_on_reset+0x78>
			pmesg(1, "wait on reset expired!\n");
   208a8:	01000044 	movi	r4,1
   208ac:	014000f4 	movhi	r5,3
   208b0:	29753004 	addi	r5,r5,-11072
   208b4:	00202380 	call	20238 <pmesg>
			break;
   208b8:	00000a06 	br	208e4 <wait_on_reset+0xa0>
		}
		val = (rd32(MDIO_BASE_ADDR, MDIO_RW_ADDR, 0) | 0x8000) >> 16;
   208bc:	01020004 	movi	r4,2048
   208c0:	01402004 	movi	r5,128
   208c4:	000d883a 	mov	r6,zero
   208c8:	00205a00 	call	205a0 <rd32>
   208cc:	10a00014 	ori	r2,r2,32768
   208d0:	1004d43a 	srli	r2,r2,16
   208d4:	e0bffe15 	stw	r2,-8(fp)
	unsigned int val;
	unsigned int expired;
	wr32(MDIO_BASE_ADDR, MDIO_CSR_ADDR_CL45, 0, mdio_reg_value);
	val = (rd32(MDIO_BASE_ADDR, MDIO_RW_ADDR, 0) | 0x8000) >> 16;

	while (val > 0) {
   208d8:	e0bffe17 	ldw	r2,-8(fp)
   208dc:	1004c03a 	cmpne	r2,r2,zero
   208e0:	103feb1e 	bne	r2,zero,20890 <wait_on_reset+0x4c>
			pmesg(1, "wait on reset expired!\n");
			break;
		}
		val = (rd32(MDIO_BASE_ADDR, MDIO_RW_ADDR, 0) | 0x8000) >> 16;
	}
	pmesg(3, "-----------------------------------------------\n");
   208e4:	010000c4 	movi	r4,3
   208e8:	014000f4 	movhi	r5,3
   208ec:	29751d04 	addi	r5,r5,-11148
   208f0:	00202380 	call	20238 <pmesg>
}
   208f4:	e037883a 	mov	sp,fp
   208f8:	dfc00117 	ldw	ra,4(sp)
   208fc:	df000017 	ldw	fp,0(sp)
   20900:	dec00204 	addi	sp,sp,8
   20904:	f800283a 	ret

00020908 <set_pma_loopback>:

void set_pma_loopback(){
   20908:	defffe04 	addi	sp,sp,-8
   2090c:	dfc00115 	stw	ra,4(sp)
   20910:	df000015 	stw	fp,0(sp)
   20914:	d839883a 	mov	fp,sp
	write_mdio (1, 0x2041);
   20918:	01000044 	movi	r4,1
   2091c:	01481044 	movi	r5,8257
   20920:	00207600 	call	20760 <write_mdio>
}
   20924:	e037883a 	mov	sp,fp
   20928:	dfc00117 	ldw	ra,4(sp)
   2092c:	df000017 	ldw	fp,0(sp)
   20930:	dec00204 	addi	sp,sp,8
   20934:	f800283a 	ret

00020938 <unset_pma_loopback>:

void unset_pma_loopback(){
   20938:	defffe04 	addi	sp,sp,-8
   2093c:	dfc00115 	stw	ra,4(sp)
   20940:	df000015 	stw	fp,0(sp)
   20944:	d839883a 	mov	fp,sp
	write_mdio (1, 0x2040);
   20948:	01000044 	movi	r4,1
   2094c:	01481004 	movi	r5,8256
   20950:	00207600 	call	20760 <write_mdio>
}
   20954:	e037883a 	mov	sp,fp
   20958:	dfc00117 	ldw	ra,4(sp)
   2095c:	df000017 	ldw	fp,0(sp)
   20960:	dec00204 	addi	sp,sp,8
   20964:	f800283a 	ret

00020968 <read_ext_xcvr_ctrl>:

//ext_xcvr_off
//ext_xcvr_on
unsigned int read_ext_xcvr_ctrl () {
   20968:	defffd04 	addi	sp,sp,-12
   2096c:	dfc00215 	stw	ra,8(sp)
   20970:	df000115 	stw	fp,4(sp)
   20974:	df000104 	addi	fp,sp,4
	unsigned int val;
	val = rd32(EXT_XCVR_BASE_ADDR, 0, 0x4);
   20978:	01040004 	movi	r4,4096
   2097c:	000b883a 	mov	r5,zero
   20980:	01800104 	movi	r6,4
   20984:	00205a00 	call	205a0 <rd32>
   20988:	e0bfff15 	stw	r2,-4(fp)
	pmesg(5, "external xcvr control register = 0x%x\n", val);
   2098c:	01000144 	movi	r4,5
   20990:	014000f4 	movhi	r5,3
   20994:	29753604 	addi	r5,r5,-11048
   20998:	e1bfff17 	ldw	r6,-4(fp)
   2099c:	00202380 	call	20238 <pmesg>
	return val;
   209a0:	e0bfff17 	ldw	r2,-4(fp)
}
   209a4:	e037883a 	mov	sp,fp
   209a8:	dfc00117 	ldw	ra,4(sp)
   209ac:	df000017 	ldw	fp,0(sp)
   209b0:	dec00204 	addi	sp,sp,8
   209b4:	f800283a 	ret

000209b8 <ext_xcvr_reset>:

void ext_xcvr_reset(){
   209b8:	defffd04 	addi	sp,sp,-12
   209bc:	dfc00215 	stw	ra,8(sp)
   209c0:	df000115 	stw	fp,4(sp)
   209c4:	df000104 	addi	fp,sp,4
	unsigned int regval = 0x7E;
   209c8:	00801f84 	movi	r2,126
   209cc:	e0bfff15 	stw	r2,-4(fp)
	wr32(EXT_XCVR_BASE_ADDR, 0, 0x4, regval);
   209d0:	01040004 	movi	r4,4096
   209d4:	000b883a 	mov	r5,zero
   209d8:	01800104 	movi	r6,4
   209dc:	e1ffff17 	ldw	r7,-4(fp)
   209e0:	00205300 	call	20530 <wr32>
	read_ext_xcvr_ctrl();
   209e4:	00209680 	call	20968 <read_ext_xcvr_ctrl>

	regval = 0x7;
   209e8:	008001c4 	movi	r2,7
   209ec:	e0bfff15 	stw	r2,-4(fp)
	wr32(EXT_XCVR_BASE_ADDR, 0, 0x4, regval);
   209f0:	01040004 	movi	r4,4096
   209f4:	000b883a 	mov	r5,zero
   209f8:	01800104 	movi	r6,4
   209fc:	e1ffff17 	ldw	r7,-4(fp)
   20a00:	00205300 	call	20530 <wr32>
	read_ext_xcvr_ctrl();
   20a04:	00209680 	call	20968 <read_ext_xcvr_ctrl>
	pmesg(5, "external xcvr reset done!\n");
   20a08:	01000144 	movi	r4,5
   20a0c:	014000f4 	movhi	r5,3
   20a10:	29754004 	addi	r5,r5,-11008
   20a14:	00202380 	call	20238 <pmesg>
}
   20a18:	e037883a 	mov	sp,fp
   20a1c:	dfc00117 	ldw	ra,4(sp)
   20a20:	df000017 	ldw	fp,0(sp)
   20a24:	dec00204 	addi	sp,sp,8
   20a28:	f800283a 	ret

00020a2c <netlogic_init>:

/*
 * Netlogic initialization routine
 */
void netlogic_init(){
   20a2c:	defffb04 	addi	sp,sp,-20
   20a30:	dfc00415 	stw	ra,16(sp)
   20a34:	df000315 	stw	fp,12(sp)
   20a38:	df000304 	addi	fp,sp,12
	unsigned int val;
	unsigned int i,j;
	pmesg (3, "initializing netlogic...\n");
   20a3c:	010000c4 	movi	r4,3
   20a40:	014000f4 	movhi	r5,3
   20a44:	29754704 	addi	r5,r5,-10980
   20a48:	00202380 	call	20238 <pmesg>

	// Issue hardware reset
	ext_xcvr_reset();
   20a4c:	00209b80 	call	209b8 <ext_xcvr_reset>

	val = read_mdio(0);
   20a50:	0009883a 	mov	r4,zero
   20a54:	00206800 	call	20680 <read_mdio>
   20a58:	e0bfff15 	stw	r2,-4(fp)
	pmesg(8, "PMA/PMD control register 1 is 0x%x\n", val);
   20a5c:	01000204 	movi	r4,8
   20a60:	014000f4 	movhi	r5,3
   20a64:	29754e04 	addi	r5,r5,-10952
   20a68:	e1bfff17 	ldw	r6,-4(fp)
   20a6c:	00202380 	call	20238 <pmesg>

	val = read_mdio(0xC000);
   20a70:	01300014 	movui	r4,49152
   20a74:	00206800 	call	20680 <read_mdio>
   20a78:	e0bfff15 	stw	r2,-4(fp)
	val = CLEARBIT(val, 5);
   20a7c:	e0ffff17 	ldw	r3,-4(fp)
   20a80:	00bff7c4 	movi	r2,-33
   20a84:	1884703a 	and	r2,r3,r2
   20a88:	e0bfff15 	stw	r2,-4(fp)
	write_mdio (0xC000, val);
   20a8c:	01300014 	movui	r4,49152
   20a90:	e17fff17 	ldw	r5,-4(fp)
   20a94:	00207600 	call	20760 <write_mdio>
	pmesg(8, "Mode selection register 0xC000 is 0x%x\n", read_mdio(0xC000));
   20a98:	01300014 	movui	r4,49152
   20a9c:	00206800 	call	20680 <read_mdio>
   20aa0:	100d883a 	mov	r6,r2
   20aa4:	01000204 	movi	r4,8
   20aa8:	014000f4 	movhi	r5,3
   20aac:	29755704 	addi	r5,r5,-10916
   20ab0:	00202380 	call	20238 <pmesg>

	val = read_mdio(0xC000);
   20ab4:	01300014 	movui	r4,49152
   20ab8:	00206800 	call	20680 <read_mdio>
   20abc:	e0bfff15 	stw	r2,-4(fp)
	val = SETBIT(val, 5);
   20ac0:	e0bfff17 	ldw	r2,-4(fp)
   20ac4:	10800814 	ori	r2,r2,32
   20ac8:	e0bfff15 	stw	r2,-4(fp)
	write_mdio (0xC000, val);
   20acc:	01300014 	movui	r4,49152
   20ad0:	e17fff17 	ldw	r5,-4(fp)
   20ad4:	00207600 	call	20760 <write_mdio>
	pmesg(8, "Mode selection register 0xC000 is 0x%x\n", read_mdio(0xC000));
   20ad8:	01300014 	movui	r4,49152
   20adc:	00206800 	call	20680 <read_mdio>
   20ae0:	100d883a 	mov	r6,r2
   20ae4:	01000204 	movi	r4,8
   20ae8:	014000f4 	movhi	r5,3
   20aec:	29755704 	addi	r5,r5,-10916
   20af0:	00202380 	call	20238 <pmesg>

	// Write 1.CC41.6:0 = 0x7
	val = read_mdio(0xCC41);
   20af4:	01331054 	movui	r4,52289
   20af8:	00206800 	call	20680 <read_mdio>
   20afc:	e0bfff15 	stw	r2,-4(fp)
	val = SETBITS(val, 0x7);
   20b00:	e0bfff17 	ldw	r2,-4(fp)
   20b04:	108001d4 	ori	r2,r2,7
   20b08:	e0bfff15 	stw	r2,-4(fp)
	val = CLEARBITS(val, 0x78);
   20b0c:	e0ffff17 	ldw	r3,-4(fp)
   20b10:	00bfe1c4 	movi	r2,-121
   20b14:	1884703a 	and	r2,r3,r2
   20b18:	e0bfff15 	stw	r2,-4(fp)
	write_mdio(0xCC41, val);
   20b1c:	01331054 	movui	r4,52289
   20b20:	e17fff17 	ldw	r5,-4(fp)
   20b24:	00207600 	call	20760 <write_mdio>
	pmesg(8, "XFI receive register 0xCC41 is 0x%x\n", read_mdio(0xCC41));
   20b28:	01331054 	movui	r4,52289
   20b2c:	00206800 	call	20680 <read_mdio>
   20b30:	100d883a 	mov	r6,r2
   20b34:	01000204 	movi	r4,8
   20b38:	014000f4 	movhi	r5,3
   20b3c:	29756104 	addi	r5,r5,-10876
   20b40:	00202380 	call	20238 <pmesg>

	// Write 1.CC46.8:5 = 0x7
	val = read_mdio(0xCC46);
   20b44:	01331194 	movui	r4,52294
   20b48:	00206800 	call	20680 <read_mdio>
   20b4c:	e0bfff15 	stw	r2,-4(fp)
	val = SETBITS(val, 0xE0);
   20b50:	e0bfff17 	ldw	r2,-4(fp)
   20b54:	10803814 	ori	r2,r2,224
   20b58:	e0bfff15 	stw	r2,-4(fp)
	val = CLEARBITS(val, 0x100);
   20b5c:	e0ffff17 	ldw	r3,-4(fp)
   20b60:	00bfbfc4 	movi	r2,-257
   20b64:	1884703a 	and	r2,r3,r2
   20b68:	e0bfff15 	stw	r2,-4(fp)
	write_mdio(0xCC46, val);
   20b6c:	01331194 	movui	r4,52294
   20b70:	e17fff17 	ldw	r5,-4(fp)
   20b74:	00207600 	call	20760 <write_mdio>
	pmesg(8, "XFI receive register 0xCC46 is 0x%x\n", read_mdio(0xCC46));
   20b78:	01331194 	movui	r4,52294
   20b7c:	00206800 	call	20680 <read_mdio>
   20b80:	100d883a 	mov	r6,r2
   20b84:	01000204 	movi	r4,8
   20b88:	014000f4 	movhi	r5,3
   20b8c:	29756b04 	addi	r5,r5,-10836
   20b90:	00202380 	call	20238 <pmesg>

	// Write 1.CB01.11:8 = 0xA
	val = read_mdio(0xCB01);
   20b94:	0132c054 	movui	r4,51969
   20b98:	00206800 	call	20680 <read_mdio>
   20b9c:	e0bfff15 	stw	r2,-4(fp)
	val = SETBITS(val, 0xA00);
   20ba0:	e0bfff17 	ldw	r2,-4(fp)
   20ba4:	10828014 	ori	r2,r2,2560
   20ba8:	e0bfff15 	stw	r2,-4(fp)
	val = CLEARBITS(val, 0x500);
   20bac:	e0ffff17 	ldw	r3,-4(fp)
   20bb0:	00bebfc4 	movi	r2,-1281
   20bb4:	1884703a 	and	r2,r3,r2
   20bb8:	e0bfff15 	stw	r2,-4(fp)
	write_mdio(0xCB01, val);
   20bbc:	0132c054 	movui	r4,51969
   20bc0:	e17fff17 	ldw	r5,-4(fp)
   20bc4:	00207600 	call	20760 <write_mdio>
	pmesg(8, "XFI receive register 0xCB01 is 0x%x\n", read_mdio(0xCB01));
   20bc8:	0132c054 	movui	r4,51969
   20bcc:	00206800 	call	20680 <read_mdio>
   20bd0:	100d883a 	mov	r6,r2
   20bd4:	01000204 	movi	r4,8
   20bd8:	014000f4 	movhi	r5,3
   20bdc:	29757504 	addi	r5,r5,-10796
   20be0:	00202380 	call	20238 <pmesg>

	// write 1.CC44.3:0 = 0xF
	val = read_mdio(0xCC44);
   20be4:	01331114 	movui	r4,52292
   20be8:	00206800 	call	20680 <read_mdio>
   20bec:	e0bfff15 	stw	r2,-4(fp)
	val = SETBITS(val, 0xF);
   20bf0:	e0bfff17 	ldw	r2,-4(fp)
   20bf4:	108003d4 	ori	r2,r2,15
   20bf8:	e0bfff15 	stw	r2,-4(fp)
	write_mdio(0xCC44, val);
   20bfc:	01331114 	movui	r4,52292
   20c00:	e17fff17 	ldw	r5,-4(fp)
   20c04:	00207600 	call	20760 <write_mdio>
	pmesg(8, "XFI receive register 0xCC44 is 0x%x\n", read_mdio(0xCC44));
   20c08:	01331114 	movui	r4,52292
   20c0c:	00206800 	call	20680 <read_mdio>
   20c10:	100d883a 	mov	r6,r2
   20c14:	01000204 	movi	r4,8
   20c18:	014000f4 	movhi	r5,3
   20c1c:	29757f04 	addi	r5,r5,-10756
   20c20:	00202380 	call	20238 <pmesg>

	// turn off receive offset calibration loop.
	val = read_mdio(0xCC00);
   20c24:	01330014 	movui	r4,52224
   20c28:	00206800 	call	20680 <read_mdio>
   20c2c:	e0bfff15 	stw	r2,-4(fp)
	val = CLEARBIT(val, 7);
   20c30:	e0ffff17 	ldw	r3,-4(fp)
   20c34:	00bfdfc4 	movi	r2,-129
   20c38:	1884703a 	and	r2,r3,r2
   20c3c:	e0bfff15 	stw	r2,-4(fp)
	write_mdio (0xCC00, val);
   20c40:	01330014 	movui	r4,52224
   20c44:	e17fff17 	ldw	r5,-4(fp)
   20c48:	00207600 	call	20760 <write_mdio>
	pmesg(8, "Limiting O2E Rx Calibration register is 0x%x\n", read_mdio(0xCC00));
   20c4c:	01330014 	movui	r4,52224
   20c50:	00206800 	call	20680 <read_mdio>
   20c54:	100d883a 	mov	r6,r2
   20c58:	01000204 	movi	r4,8
   20c5c:	014000f4 	movhi	r5,3
   20c60:	29758904 	addi	r5,r5,-10716
   20c64:	00202380 	call	20238 <pmesg>

	// write 1.CC01.6:0 = 0x7
	val = read_mdio(0xCC01);
   20c68:	01330054 	movui	r4,52225
   20c6c:	00206800 	call	20680 <read_mdio>
   20c70:	e0bfff15 	stw	r2,-4(fp)
	val = SETBITS(val, 0x7);
   20c74:	e0bfff17 	ldw	r2,-4(fp)
   20c78:	108001d4 	ori	r2,r2,7
   20c7c:	e0bfff15 	stw	r2,-4(fp)
	val = CLEARBITS(val, 0x78);
   20c80:	e0ffff17 	ldw	r3,-4(fp)
   20c84:	00bfe1c4 	movi	r2,-121
   20c88:	1884703a 	and	r2,r3,r2
   20c8c:	e0bfff15 	stw	r2,-4(fp)
	write_mdio(0xCC01, val);
   20c90:	01330054 	movui	r4,52225
   20c94:	e17fff17 	ldw	r5,-4(fp)
   20c98:	00207600 	call	20760 <write_mdio>
	pmesg(8, "XFI receive register 0xCC01 is 0x%x\n", read_mdio(0xCC01));
   20c9c:	01330054 	movui	r4,52225
   20ca0:	00206800 	call	20680 <read_mdio>
   20ca4:	100d883a 	mov	r6,r2
   20ca8:	01000204 	movi	r4,8
   20cac:	014000f4 	movhi	r5,3
   20cb0:	29759504 	addi	r5,r5,-10668
   20cb4:	00202380 	call	20238 <pmesg>

	// write 1.CC06.8:5 = 0x7
	val = read_mdio(0xCC06);
   20cb8:	01330194 	movui	r4,52230
   20cbc:	00206800 	call	20680 <read_mdio>
   20cc0:	e0bfff15 	stw	r2,-4(fp)
	val = SETBITS(val, 0xE0);
   20cc4:	e0bfff17 	ldw	r2,-4(fp)
   20cc8:	10803814 	ori	r2,r2,224
   20ccc:	e0bfff15 	stw	r2,-4(fp)
	val = CLEARBITS(val, 0x100);
   20cd0:	e0ffff17 	ldw	r3,-4(fp)
   20cd4:	00bfbfc4 	movi	r2,-257
   20cd8:	1884703a 	and	r2,r3,r2
   20cdc:	e0bfff15 	stw	r2,-4(fp)
	write_mdio(0xCC06, val);
   20ce0:	01330194 	movui	r4,52230
   20ce4:	e17fff17 	ldw	r5,-4(fp)
   20ce8:	00207600 	call	20760 <write_mdio>
	pmesg(8, "XFI receive register 0xCC06 is 0x%x\n", read_mdio(0xCC06));
   20cec:	01330194 	movui	r4,52230
   20cf0:	00206800 	call	20680 <read_mdio>
   20cf4:	100d883a 	mov	r6,r2
   20cf8:	01000204 	movi	r4,8
   20cfc:	014000f4 	movhi	r5,3
   20d00:	29759f04 	addi	r5,r5,-10628
   20d04:	00202380 	call	20238 <pmesg>

	// write 1.CB1B.3:0 = 0xA
	val = read_mdio(0xCB1B);
   20d08:	0132c6d4 	movui	r4,51995
   20d0c:	00206800 	call	20680 <read_mdio>
   20d10:	e0bfff15 	stw	r2,-4(fp)
	val = SETBITS(val, 0xA);
   20d14:	e0bfff17 	ldw	r2,-4(fp)
   20d18:	10800294 	ori	r2,r2,10
   20d1c:	e0bfff15 	stw	r2,-4(fp)
	val = CLEARBITS(val, 0x5);
   20d20:	e0ffff17 	ldw	r3,-4(fp)
   20d24:	00bffe84 	movi	r2,-6
   20d28:	1884703a 	and	r2,r3,r2
   20d2c:	e0bfff15 	stw	r2,-4(fp)
	write_mdio(0xCB1B, val);
   20d30:	0132c6d4 	movui	r4,51995
   20d34:	e17fff17 	ldw	r5,-4(fp)
   20d38:	00207600 	call	20760 <write_mdio>
	pmesg(8, "XFI receive register 0xCB1B is 0x%x\n", read_mdio(0xCB1B));
   20d3c:	0132c6d4 	movui	r4,51995
   20d40:	00206800 	call	20680 <read_mdio>
   20d44:	100d883a 	mov	r6,r2
   20d48:	01000204 	movi	r4,8
   20d4c:	014000f4 	movhi	r5,3
   20d50:	2975a904 	addi	r5,r5,-10588
   20d54:	00202380 	call	20238 <pmesg>

	// write 1.CC04.3:0 = 0xF
	val = read_mdio(0xCC04);
   20d58:	01330114 	movui	r4,52228
   20d5c:	00206800 	call	20680 <read_mdio>
   20d60:	e0bfff15 	stw	r2,-4(fp)
	val = SETBITS(val, 0xF);
   20d64:	e0bfff17 	ldw	r2,-4(fp)
   20d68:	108003d4 	ori	r2,r2,15
   20d6c:	e0bfff15 	stw	r2,-4(fp)
	write_mdio(0xCC04, val);
   20d70:	01330114 	movui	r4,52228
   20d74:	e17fff17 	ldw	r5,-4(fp)
   20d78:	00207600 	call	20760 <write_mdio>
	pmesg(8, "XFI receive register 0xCC04 is 0x%x\n", read_mdio(0xCC04));
   20d7c:	01330114 	movui	r4,52228
   20d80:	00206800 	call	20680 <read_mdio>
   20d84:	100d883a 	mov	r6,r2
   20d88:	01000204 	movi	r4,8
   20d8c:	014000f4 	movhi	r5,3
   20d90:	2975b304 	addi	r5,r5,-10548
   20d94:	00202380 	call	20238 <pmesg>
}
   20d98:	e037883a 	mov	sp,fp
   20d9c:	dfc00117 	ldw	ra,4(sp)
   20da0:	df000017 	ldw	fp,0(sp)
   20da4:	dec00204 	addi	sp,sp,8
   20da8:	f800283a 	ret

00020dac <avalon_mm_write>:
 * Note: Bit banging IO driver
 *
 */
#include "sonic_io.h"

void avalon_mm_write (unsigned int address, unsigned int value) {
   20dac:	defffd04 	addi	sp,sp,-12
   20db0:	df000215 	stw	fp,8(sp)
   20db4:	df000204 	addi	fp,sp,8
   20db8:	e13ffe15 	stw	r4,-8(fp)
   20dbc:	e17fff15 	stw	r5,-4(fp)
	while (IORD(NIOS_BASE_AVALON_WRITE_MASTER_BASE, WR_STATUS) & 0x4);
   20dc0:	00808104 	movi	r2,516
   20dc4:	10800037 	ldwio	r2,0(r2)
   20dc8:	1080010c 	andi	r2,r2,4
   20dcc:	1004c03a 	cmpne	r2,r2,zero
   20dd0:	103ffb1e 	bne	r2,zero,20dc0 <avalon_mm_write+0x14>
	IOWR(NIOS_BASE_AVALON_WRITE_MASTER_BASE, WR_USER_BUFFER_DATA, value);
   20dd4:	e0ffff17 	ldw	r3,-4(fp)
   20dd8:	00808404 	movi	r2,528
   20ddc:	10c00035 	stwio	r3,0(r2)
	IOWR(NIOS_BASE_AVALON_WRITE_MASTER_BASE, WR_USER_WRITE_BUFFER, 0x1);
   20de0:	00c08504 	movi	r3,532
   20de4:	00800044 	movi	r2,1
   20de8:	18800035 	stwio	r2,0(r3)
	IOWR(NIOS_BASE_AVALON_WRITE_MASTER_BASE, WR_ADDR_BASE, address);
   20dec:	e0fffe17 	ldw	r3,-8(fp)
   20df0:	00808304 	movi	r2,524
   20df4:	10c00035 	stwio	r3,0(r2)
	IOWR(NIOS_BASE_AVALON_WRITE_MASTER_BASE, 0, 0x1);
   20df8:	00c08004 	movi	r3,512
   20dfc:	00800044 	movi	r2,1
   20e00:	18800035 	stwio	r2,0(r3)
	while (IORD(NIOS_BASE_AVALON_WRITE_MASTER_BASE, WR_STATUS) & 0x1);
   20e04:	00808104 	movi	r2,516
   20e08:	10800037 	ldwio	r2,0(r2)
   20e0c:	1080004c 	andi	r2,r2,1
   20e10:	10803fcc 	andi	r2,r2,255
   20e14:	1004c03a 	cmpne	r2,r2,zero
   20e18:	103ffa1e 	bne	r2,zero,20e04 <avalon_mm_write+0x58>
}
   20e1c:	e037883a 	mov	sp,fp
   20e20:	df000017 	ldw	fp,0(sp)
   20e24:	dec00104 	addi	sp,sp,4
   20e28:	f800283a 	ret

00020e2c <avalon_mm_read>:

unsigned int avalon_mm_read (unsigned int address) {
   20e2c:	defffc04 	addi	sp,sp,-16
   20e30:	dfc00315 	stw	ra,12(sp)
   20e34:	df000215 	stw	fp,8(sp)
   20e38:	df000204 	addi	fp,sp,8
   20e3c:	e13fff15 	stw	r4,-4(fp)
	unsigned int val;
	IOWR(NIOS_BASE_AVALON_READ_MASTER_BASE, RD_ADDR_BASE, address);
   20e40:	e0ffff17 	ldw	r3,-4(fp)
   20e44:	00804204 	movi	r2,264
   20e48:	10c00035 	stwio	r3,0(r2)
	IOWR(NIOS_BASE_AVALON_READ_MASTER_BASE, RD_CONTROL, 0x1);
   20e4c:	00c04004 	movi	r3,256
   20e50:	00800044 	movi	r2,1
   20e54:	18800035 	stwio	r2,0(r3)
	val = IORD(NIOS_BASE_AVALON_READ_MASTER_BASE, RD_STATUS);
   20e58:	00804104 	movi	r2,260
   20e5c:	10800037 	ldwio	r2,0(r2)
   20e60:	e0bffe15 	stw	r2,-8(fp)
	while ((val & 0x1) != 1){
   20e64:	00000806 	br	20e88 <avalon_mm_read+0x5c>
		val = IORD(NIOS_BASE_AVALON_READ_MASTER_BASE, RD_STATUS);
   20e68:	00804104 	movi	r2,260
   20e6c:	10800037 	ldwio	r2,0(r2)
   20e70:	e0bffe15 	stw	r2,-8(fp)
		pmesg (10, "val = %x\n", val);
   20e74:	01000284 	movi	r4,10
   20e78:	014000f4 	movhi	r5,3
   20e7c:	2975bd04 	addi	r5,r5,-10508
   20e80:	e1bffe17 	ldw	r6,-8(fp)
   20e84:	00202380 	call	20238 <pmesg>
unsigned int avalon_mm_read (unsigned int address) {
	unsigned int val;
	IOWR(NIOS_BASE_AVALON_READ_MASTER_BASE, RD_ADDR_BASE, address);
	IOWR(NIOS_BASE_AVALON_READ_MASTER_BASE, RD_CONTROL, 0x1);
	val = IORD(NIOS_BASE_AVALON_READ_MASTER_BASE, RD_STATUS);
	while ((val & 0x1) != 1){
   20e88:	e0bffe17 	ldw	r2,-8(fp)
   20e8c:	1080004c 	andi	r2,r2,1
   20e90:	1005003a 	cmpeq	r2,r2,zero
   20e94:	103ff41e 	bne	r2,zero,20e68 <avalon_mm_read+0x3c>
		val = IORD(NIOS_BASE_AVALON_READ_MASTER_BASE, RD_STATUS);
		pmesg (10, "val = %x\n", val);
	}
	val = IORD(NIOS_BASE_AVALON_READ_MASTER_BASE, RD_STATUS);
   20e98:	00804104 	movi	r2,260
   20e9c:	10800037 	ldwio	r2,0(r2)
   20ea0:	e0bffe15 	stw	r2,-8(fp)
	while ((val&0x2) != 0x2){
   20ea4:	00000806 	br	20ec8 <avalon_mm_read+0x9c>
		val = IORD(NIOS_BASE_AVALON_READ_MASTER_BASE, RD_STATUS);
   20ea8:	00804104 	movi	r2,260
   20eac:	10800037 	ldwio	r2,0(r2)
   20eb0:	e0bffe15 	stw	r2,-8(fp)
		pmesg (10, "val = %x\n", val);
   20eb4:	01000284 	movi	r4,10
   20eb8:	014000f4 	movhi	r5,3
   20ebc:	2975bd04 	addi	r5,r5,-10508
   20ec0:	e1bffe17 	ldw	r6,-8(fp)
   20ec4:	00202380 	call	20238 <pmesg>
	while ((val & 0x1) != 1){
		val = IORD(NIOS_BASE_AVALON_READ_MASTER_BASE, RD_STATUS);
		pmesg (10, "val = %x\n", val);
	}
	val = IORD(NIOS_BASE_AVALON_READ_MASTER_BASE, RD_STATUS);
	while ((val&0x2) != 0x2){
   20ec8:	e0bffe17 	ldw	r2,-8(fp)
   20ecc:	1080008c 	andi	r2,r2,2
   20ed0:	1005003a 	cmpeq	r2,r2,zero
   20ed4:	103ff41e 	bne	r2,zero,20ea8 <avalon_mm_read+0x7c>
		val = IORD(NIOS_BASE_AVALON_READ_MASTER_BASE, RD_STATUS);
		pmesg (10, "val = %x\n", val);
	}
	IOWR(NIOS_BASE_AVALON_READ_MASTER_BASE, RD_USER_READ_BUFFER, 0x1);
   20ed8:	00c04504 	movi	r3,276
   20edc:	00800044 	movi	r2,1
   20ee0:	18800035 	stwio	r2,0(r3)
	val = IORD(NIOS_BASE_AVALON_READ_MASTER_BASE, RD_USER_BUFFER_DATA);
   20ee4:	00804404 	movi	r2,272
   20ee8:	10800037 	ldwio	r2,0(r2)
   20eec:	e0bffe15 	stw	r2,-8(fp)
	return val;
   20ef0:	e0bffe17 	ldw	r2,-8(fp)
}
   20ef4:	e037883a 	mov	sp,fp
   20ef8:	dfc00117 	ldw	ra,4(sp)
   20efc:	df000017 	ldw	fp,0(sp)
   20f00:	dec00204 	addi	sp,sp,8
   20f04:	f800283a 	ret

00020f08 <printf>:
   20f08:	defffb04 	addi	sp,sp,-20
   20f0c:	dfc00115 	stw	ra,4(sp)
   20f10:	d9400215 	stw	r5,8(sp)
   20f14:	d9800315 	stw	r6,12(sp)
   20f18:	d9c00415 	stw	r7,16(sp)
   20f1c:	008000f4 	movhi	r2,3
   20f20:	10bd1d04 	addi	r2,r2,-2956
   20f24:	10c00017 	ldw	r3,0(r2)
   20f28:	200b883a 	mov	r5,r4
   20f2c:	d8800204 	addi	r2,sp,8
   20f30:	19000217 	ldw	r4,8(r3)
   20f34:	100d883a 	mov	r6,r2
   20f38:	d8800015 	stw	r2,0(sp)
   20f3c:	0022e9c0 	call	22e9c <__vfprintf_internal>
   20f40:	dfc00117 	ldw	ra,4(sp)
   20f44:	dec00504 	addi	sp,sp,20
   20f48:	f800283a 	ret

00020f4c <_printf_r>:
   20f4c:	defffc04 	addi	sp,sp,-16
   20f50:	dfc00115 	stw	ra,4(sp)
   20f54:	d9800215 	stw	r6,8(sp)
   20f58:	d9c00315 	stw	r7,12(sp)
   20f5c:	280d883a 	mov	r6,r5
   20f60:	21400217 	ldw	r5,8(r4)
   20f64:	d8c00204 	addi	r3,sp,8
   20f68:	180f883a 	mov	r7,r3
   20f6c:	d8c00015 	stw	r3,0(sp)
   20f70:	0020fd80 	call	20fd8 <___vfprintf_internal_r>
   20f74:	dfc00117 	ldw	ra,4(sp)
   20f78:	dec00404 	addi	sp,sp,16
   20f7c:	f800283a 	ret

00020f80 <__sprint_r>:
   20f80:	30800217 	ldw	r2,8(r6)
   20f84:	defffe04 	addi	sp,sp,-8
   20f88:	dc000015 	stw	r16,0(sp)
   20f8c:	dfc00115 	stw	ra,4(sp)
   20f90:	3021883a 	mov	r16,r6
   20f94:	0007883a 	mov	r3,zero
   20f98:	1000061e 	bne	r2,zero,20fb4 <__sprint_r+0x34>
   20f9c:	1805883a 	mov	r2,r3
   20fa0:	30000115 	stw	zero,4(r6)
   20fa4:	dfc00117 	ldw	ra,4(sp)
   20fa8:	dc000017 	ldw	r16,0(sp)
   20fac:	dec00204 	addi	sp,sp,8
   20fb0:	f800283a 	ret
   20fb4:	002515c0 	call	2515c <__sfvwrite_r>
   20fb8:	1007883a 	mov	r3,r2
   20fbc:	1805883a 	mov	r2,r3
   20fc0:	80000115 	stw	zero,4(r16)
   20fc4:	80000215 	stw	zero,8(r16)
   20fc8:	dfc00117 	ldw	ra,4(sp)
   20fcc:	dc000017 	ldw	r16,0(sp)
   20fd0:	dec00204 	addi	sp,sp,8
   20fd4:	f800283a 	ret

00020fd8 <___vfprintf_internal_r>:
   20fd8:	defea404 	addi	sp,sp,-1392
   20fdc:	dd815815 	stw	r22,1376(sp)
   20fe0:	dc015215 	stw	r16,1352(sp)
   20fe4:	d9c15115 	stw	r7,1348(sp)
   20fe8:	dfc15b15 	stw	ra,1388(sp)
   20fec:	df015a15 	stw	fp,1384(sp)
   20ff0:	ddc15915 	stw	r23,1380(sp)
   20ff4:	dd415715 	stw	r21,1372(sp)
   20ff8:	dd015615 	stw	r20,1368(sp)
   20ffc:	dcc15515 	stw	r19,1364(sp)
   21000:	dc815415 	stw	r18,1360(sp)
   21004:	dc415315 	stw	r17,1356(sp)
   21008:	282d883a 	mov	r22,r5
   2100c:	3021883a 	mov	r16,r6
   21010:	d9014f15 	stw	r4,1340(sp)
   21014:	00257800 	call	25780 <_localeconv_r>
   21018:	10800017 	ldw	r2,0(r2)
   2101c:	d9c15117 	ldw	r7,1348(sp)
   21020:	d8814915 	stw	r2,1316(sp)
   21024:	d8814f17 	ldw	r2,1340(sp)
   21028:	10000226 	beq	r2,zero,21034 <___vfprintf_internal_r+0x5c>
   2102c:	10800e17 	ldw	r2,56(r2)
   21030:	10020d26 	beq	r2,zero,21868 <___vfprintf_internal_r+0x890>
   21034:	b080030b 	ldhu	r2,12(r22)
   21038:	1080020c 	andi	r2,r2,8
   2103c:	10020e26 	beq	r2,zero,21878 <___vfprintf_internal_r+0x8a0>
   21040:	b0800417 	ldw	r2,16(r22)
   21044:	10020c26 	beq	r2,zero,21878 <___vfprintf_internal_r+0x8a0>
   21048:	b200030b 	ldhu	r8,12(r22)
   2104c:	00800284 	movi	r2,10
   21050:	40c0068c 	andi	r3,r8,26
   21054:	18802f1e 	bne	r3,r2,21114 <___vfprintf_internal_r+0x13c>
   21058:	b080038f 	ldh	r2,14(r22)
   2105c:	10002d16 	blt	r2,zero,21114 <___vfprintf_internal_r+0x13c>
   21060:	b240038b 	ldhu	r9,14(r22)
   21064:	b2800717 	ldw	r10,28(r22)
   21068:	b2c00917 	ldw	r11,36(r22)
   2106c:	d9014f17 	ldw	r4,1340(sp)
   21070:	dc402904 	addi	r17,sp,164
   21074:	d8804004 	addi	r2,sp,256
   21078:	00c10004 	movi	r3,1024
   2107c:	423fff4c 	andi	r8,r8,65533
   21080:	800d883a 	mov	r6,r16
   21084:	880b883a 	mov	r5,r17
   21088:	da002c0d 	sth	r8,176(sp)
   2108c:	da402c8d 	sth	r9,178(sp)
   21090:	da803015 	stw	r10,192(sp)
   21094:	dac03215 	stw	r11,200(sp)
   21098:	d8802d15 	stw	r2,180(sp)
   2109c:	d8c02e15 	stw	r3,184(sp)
   210a0:	d8802915 	stw	r2,164(sp)
   210a4:	d8c02b15 	stw	r3,172(sp)
   210a8:	d8002f15 	stw	zero,188(sp)
   210ac:	0020fd80 	call	20fd8 <___vfprintf_internal_r>
   210b0:	d8814b15 	stw	r2,1324(sp)
   210b4:	10000416 	blt	r2,zero,210c8 <___vfprintf_internal_r+0xf0>
   210b8:	d9014f17 	ldw	r4,1340(sp)
   210bc:	880b883a 	mov	r5,r17
   210c0:	00247f80 	call	247f8 <_fflush_r>
   210c4:	1002321e 	bne	r2,zero,21990 <___vfprintf_internal_r+0x9b8>
   210c8:	d8802c0b 	ldhu	r2,176(sp)
   210cc:	1080100c 	andi	r2,r2,64
   210d0:	10000326 	beq	r2,zero,210e0 <___vfprintf_internal_r+0x108>
   210d4:	b080030b 	ldhu	r2,12(r22)
   210d8:	10801014 	ori	r2,r2,64
   210dc:	b080030d 	sth	r2,12(r22)
   210e0:	d8814b17 	ldw	r2,1324(sp)
   210e4:	dfc15b17 	ldw	ra,1388(sp)
   210e8:	df015a17 	ldw	fp,1384(sp)
   210ec:	ddc15917 	ldw	r23,1380(sp)
   210f0:	dd815817 	ldw	r22,1376(sp)
   210f4:	dd415717 	ldw	r21,1372(sp)
   210f8:	dd015617 	ldw	r20,1368(sp)
   210fc:	dcc15517 	ldw	r19,1364(sp)
   21100:	dc815417 	ldw	r18,1360(sp)
   21104:	dc415317 	ldw	r17,1356(sp)
   21108:	dc015217 	ldw	r16,1352(sp)
   2110c:	dec15c04 	addi	sp,sp,1392
   21110:	f800283a 	ret
   21114:	0005883a 	mov	r2,zero
   21118:	0007883a 	mov	r3,zero
   2111c:	dd401904 	addi	r21,sp,100
   21120:	d8814215 	stw	r2,1288(sp)
   21124:	802f883a 	mov	r23,r16
   21128:	d8c14315 	stw	r3,1292(sp)
   2112c:	d8014b15 	stw	zero,1324(sp)
   21130:	d8014815 	stw	zero,1312(sp)
   21134:	d8014415 	stw	zero,1296(sp)
   21138:	d8014715 	stw	zero,1308(sp)
   2113c:	dd400c15 	stw	r21,48(sp)
   21140:	d8000e15 	stw	zero,56(sp)
   21144:	d8000d15 	stw	zero,52(sp)
   21148:	b8800007 	ldb	r2,0(r23)
   2114c:	10001926 	beq	r2,zero,211b4 <___vfprintf_internal_r+0x1dc>
   21150:	00c00944 	movi	r3,37
   21154:	10c01726 	beq	r2,r3,211b4 <___vfprintf_internal_r+0x1dc>
   21158:	b821883a 	mov	r16,r23
   2115c:	00000106 	br	21164 <___vfprintf_internal_r+0x18c>
   21160:	10c00326 	beq	r2,r3,21170 <___vfprintf_internal_r+0x198>
   21164:	84000044 	addi	r16,r16,1
   21168:	80800007 	ldb	r2,0(r16)
   2116c:	103ffc1e 	bne	r2,zero,21160 <___vfprintf_internal_r+0x188>
   21170:	85e7c83a 	sub	r19,r16,r23
   21174:	98000e26 	beq	r19,zero,211b0 <___vfprintf_internal_r+0x1d8>
   21178:	dc800e17 	ldw	r18,56(sp)
   2117c:	dc400d17 	ldw	r17,52(sp)
   21180:	008001c4 	movi	r2,7
   21184:	94e5883a 	add	r18,r18,r19
   21188:	8c400044 	addi	r17,r17,1
   2118c:	adc00015 	stw	r23,0(r21)
   21190:	dc800e15 	stw	r18,56(sp)
   21194:	acc00115 	stw	r19,4(r21)
   21198:	dc400d15 	stw	r17,52(sp)
   2119c:	14428b16 	blt	r2,r17,21bcc <___vfprintf_internal_r+0xbf4>
   211a0:	ad400204 	addi	r21,r21,8
   211a4:	d9014b17 	ldw	r4,1324(sp)
   211a8:	24c9883a 	add	r4,r4,r19
   211ac:	d9014b15 	stw	r4,1324(sp)
   211b0:	802f883a 	mov	r23,r16
   211b4:	b8800007 	ldb	r2,0(r23)
   211b8:	10013c26 	beq	r2,zero,216ac <___vfprintf_internal_r+0x6d4>
   211bc:	bdc00044 	addi	r23,r23,1
   211c0:	d8000405 	stb	zero,16(sp)
   211c4:	b8c00007 	ldb	r3,0(r23)
   211c8:	04ffffc4 	movi	r19,-1
   211cc:	d8014c15 	stw	zero,1328(sp)
   211d0:	d8014a15 	stw	zero,1320(sp)
   211d4:	d8c14d15 	stw	r3,1332(sp)
   211d8:	bdc00044 	addi	r23,r23,1
   211dc:	d9414d17 	ldw	r5,1332(sp)
   211e0:	00801604 	movi	r2,88
   211e4:	28fff804 	addi	r3,r5,-32
   211e8:	10c06036 	bltu	r2,r3,2136c <___vfprintf_internal_r+0x394>
   211ec:	18c5883a 	add	r2,r3,r3
   211f0:	1085883a 	add	r2,r2,r2
   211f4:	00c000b4 	movhi	r3,2
   211f8:	18c48204 	addi	r3,r3,4616
   211fc:	10c5883a 	add	r2,r2,r3
   21200:	11000017 	ldw	r4,0(r2)
   21204:	2000683a 	jmp	r4
   21208:	0002217c 	xorhi	zero,zero,2181
   2120c:	0002136c 	andhi	zero,zero,2125
   21210:	0002136c 	andhi	zero,zero,2125
   21214:	00022168 	cmpgeui	zero,zero,2181
   21218:	0002136c 	andhi	zero,zero,2125
   2121c:	0002136c 	andhi	zero,zero,2125
   21220:	0002136c 	andhi	zero,zero,2125
   21224:	0002136c 	andhi	zero,zero,2125
   21228:	0002136c 	andhi	zero,zero,2125
   2122c:	0002136c 	andhi	zero,zero,2125
   21230:	00021f48 	cmpgei	zero,zero,2173
   21234:	00022158 	cmpnei	zero,zero,2181
   21238:	0002136c 	andhi	zero,zero,2125
   2123c:	00021f60 	cmpeqi	zero,zero,2173
   21240:	00022200 	call	2220 <__alt_mem_nios_base_onchip_ram-0x1dde0>
   21244:	0002136c 	andhi	zero,zero,2125
   21248:	000221ec 	andhi	zero,zero,2183
   2124c:	000221a8 	cmpgeui	zero,zero,2182
   21250:	000221a8 	cmpgeui	zero,zero,2182
   21254:	000221a8 	cmpgeui	zero,zero,2182
   21258:	000221a8 	cmpgeui	zero,zero,2182
   2125c:	000221a8 	cmpgeui	zero,zero,2182
   21260:	000221a8 	cmpgeui	zero,zero,2182
   21264:	000221a8 	cmpgeui	zero,zero,2182
   21268:	000221a8 	cmpgeui	zero,zero,2182
   2126c:	000221a8 	cmpgeui	zero,zero,2182
   21270:	0002136c 	andhi	zero,zero,2125
   21274:	0002136c 	andhi	zero,zero,2125
   21278:	0002136c 	andhi	zero,zero,2125
   2127c:	0002136c 	andhi	zero,zero,2125
   21280:	0002136c 	andhi	zero,zero,2125
   21284:	0002136c 	andhi	zero,zero,2125
   21288:	0002136c 	andhi	zero,zero,2125
   2128c:	0002136c 	andhi	zero,zero,2125
   21290:	0002136c 	andhi	zero,zero,2125
   21294:	0002136c 	andhi	zero,zero,2125
   21298:	000219c4 	movi	zero,2151
   2129c:	00022030 	cmpltui	zero,zero,2176
   212a0:	0002136c 	andhi	zero,zero,2125
   212a4:	00022030 	cmpltui	zero,zero,2176
   212a8:	0002136c 	andhi	zero,zero,2125
   212ac:	0002136c 	andhi	zero,zero,2125
   212b0:	0002136c 	andhi	zero,zero,2125
   212b4:	0002136c 	andhi	zero,zero,2125
   212b8:	00022194 	movui	zero,2182
   212bc:	0002136c 	andhi	zero,zero,2125
   212c0:	0002136c 	andhi	zero,zero,2125
   212c4:	00021a78 	rdprs	zero,zero,2153
   212c8:	0002136c 	andhi	zero,zero,2125
   212cc:	0002136c 	andhi	zero,zero,2125
   212d0:	0002136c 	andhi	zero,zero,2125
   212d4:	0002136c 	andhi	zero,zero,2125
   212d8:	0002136c 	andhi	zero,zero,2125
   212dc:	00021ac4 	movi	zero,2155
   212e0:	0002136c 	andhi	zero,zero,2125
   212e4:	0002136c 	andhi	zero,zero,2125
   212e8:	000220e4 	muli	zero,zero,2179
   212ec:	0002136c 	andhi	zero,zero,2125
   212f0:	0002136c 	andhi	zero,zero,2125
   212f4:	0002136c 	andhi	zero,zero,2125
   212f8:	0002136c 	andhi	zero,zero,2125
   212fc:	0002136c 	andhi	zero,zero,2125
   21300:	0002136c 	andhi	zero,zero,2125
   21304:	0002136c 	andhi	zero,zero,2125
   21308:	0002136c 	andhi	zero,zero,2125
   2130c:	0002136c 	andhi	zero,zero,2125
   21310:	0002136c 	andhi	zero,zero,2125
   21314:	000220b8 	rdprs	zero,zero,2178
   21318:	000219d0 	cmplti	zero,zero,2151
   2131c:	00022030 	cmpltui	zero,zero,2176
   21320:	00022030 	cmpltui	zero,zero,2176
   21324:	00022030 	cmpltui	zero,zero,2176
   21328:	0002201c 	xori	zero,zero,2176
   2132c:	000219d0 	cmplti	zero,zero,2151
   21330:	0002136c 	andhi	zero,zero,2125
   21334:	0002136c 	andhi	zero,zero,2125
   21338:	00021fa4 	muli	zero,zero,2174
   2133c:	0002136c 	andhi	zero,zero,2125
   21340:	00021f74 	movhi	zero,2173
   21344:	00021a84 	movi	zero,2154
   21348:	00021fd4 	movui	zero,2175
   2134c:	00021fc0 	call	21fc <__alt_mem_nios_base_onchip_ram-0x1de04>
   21350:	0002136c 	andhi	zero,zero,2125
   21354:	00022268 	cmpgeui	zero,zero,2185
   21358:	0002136c 	andhi	zero,zero,2125
   2135c:	00021ad0 	cmplti	zero,zero,2155
   21360:	0002136c 	andhi	zero,zero,2125
   21364:	0002136c 	andhi	zero,zero,2125
   21368:	00022148 	cmpgei	zero,zero,2181
   2136c:	d9014d17 	ldw	r4,1332(sp)
   21370:	2000ce26 	beq	r4,zero,216ac <___vfprintf_internal_r+0x6d4>
   21374:	01400044 	movi	r5,1
   21378:	d9800f04 	addi	r6,sp,60
   2137c:	d9c14015 	stw	r7,1280(sp)
   21380:	d9414515 	stw	r5,1300(sp)
   21384:	d9814115 	stw	r6,1284(sp)
   21388:	280f883a 	mov	r7,r5
   2138c:	d9000f05 	stb	r4,60(sp)
   21390:	d8000405 	stb	zero,16(sp)
   21394:	d8014615 	stw	zero,1304(sp)
   21398:	d8c14c17 	ldw	r3,1328(sp)
   2139c:	1880008c 	andi	r2,r3,2
   213a0:	1005003a 	cmpeq	r2,r2,zero
   213a4:	d8815015 	stw	r2,1344(sp)
   213a8:	1000031e 	bne	r2,zero,213b8 <___vfprintf_internal_r+0x3e0>
   213ac:	d9014517 	ldw	r4,1300(sp)
   213b0:	21000084 	addi	r4,r4,2
   213b4:	d9014515 	stw	r4,1300(sp)
   213b8:	d9414c17 	ldw	r5,1328(sp)
   213bc:	2940210c 	andi	r5,r5,132
   213c0:	d9414e15 	stw	r5,1336(sp)
   213c4:	28002d1e 	bne	r5,zero,2147c <___vfprintf_internal_r+0x4a4>
   213c8:	d9814a17 	ldw	r6,1320(sp)
   213cc:	d8814517 	ldw	r2,1300(sp)
   213d0:	30a1c83a 	sub	r16,r6,r2
   213d4:	0400290e 	bge	zero,r16,2147c <___vfprintf_internal_r+0x4a4>
   213d8:	00800404 	movi	r2,16
   213dc:	14045e0e 	bge	r2,r16,22558 <___vfprintf_internal_r+0x1580>
   213e0:	dc800e17 	ldw	r18,56(sp)
   213e4:	dc400d17 	ldw	r17,52(sp)
   213e8:	1027883a 	mov	r19,r2
   213ec:	070000f4 	movhi	fp,3
   213f0:	e735dc84 	addi	fp,fp,-10382
   213f4:	050001c4 	movi	r20,7
   213f8:	00000306 	br	21408 <___vfprintf_internal_r+0x430>
   213fc:	843ffc04 	addi	r16,r16,-16
   21400:	ad400204 	addi	r21,r21,8
   21404:	9c00130e 	bge	r19,r16,21454 <___vfprintf_internal_r+0x47c>
   21408:	94800404 	addi	r18,r18,16
   2140c:	8c400044 	addi	r17,r17,1
   21410:	af000015 	stw	fp,0(r21)
   21414:	acc00115 	stw	r19,4(r21)
   21418:	dc800e15 	stw	r18,56(sp)
   2141c:	dc400d15 	stw	r17,52(sp)
   21420:	a47ff60e 	bge	r20,r17,213fc <___vfprintf_internal_r+0x424>
   21424:	d9014f17 	ldw	r4,1340(sp)
   21428:	b00b883a 	mov	r5,r22
   2142c:	d9800c04 	addi	r6,sp,48
   21430:	d9c15115 	stw	r7,1348(sp)
   21434:	0020f800 	call	20f80 <__sprint_r>
   21438:	d9c15117 	ldw	r7,1348(sp)
   2143c:	10009e1e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   21440:	843ffc04 	addi	r16,r16,-16
   21444:	dc800e17 	ldw	r18,56(sp)
   21448:	dc400d17 	ldw	r17,52(sp)
   2144c:	dd401904 	addi	r21,sp,100
   21450:	9c3fed16 	blt	r19,r16,21408 <___vfprintf_internal_r+0x430>
   21454:	9425883a 	add	r18,r18,r16
   21458:	8c400044 	addi	r17,r17,1
   2145c:	008001c4 	movi	r2,7
   21460:	af000015 	stw	fp,0(r21)
   21464:	ac000115 	stw	r16,4(r21)
   21468:	dc800e15 	stw	r18,56(sp)
   2146c:	dc400d15 	stw	r17,52(sp)
   21470:	1441f516 	blt	r2,r17,21c48 <___vfprintf_internal_r+0xc70>
   21474:	ad400204 	addi	r21,r21,8
   21478:	00000206 	br	21484 <___vfprintf_internal_r+0x4ac>
   2147c:	dc800e17 	ldw	r18,56(sp)
   21480:	dc400d17 	ldw	r17,52(sp)
   21484:	d8800407 	ldb	r2,16(sp)
   21488:	10000b26 	beq	r2,zero,214b8 <___vfprintf_internal_r+0x4e0>
   2148c:	00800044 	movi	r2,1
   21490:	94800044 	addi	r18,r18,1
   21494:	8c400044 	addi	r17,r17,1
   21498:	a8800115 	stw	r2,4(r21)
   2149c:	d8c00404 	addi	r3,sp,16
   214a0:	008001c4 	movi	r2,7
   214a4:	a8c00015 	stw	r3,0(r21)
   214a8:	dc800e15 	stw	r18,56(sp)
   214ac:	dc400d15 	stw	r17,52(sp)
   214b0:	1441da16 	blt	r2,r17,21c1c <___vfprintf_internal_r+0xc44>
   214b4:	ad400204 	addi	r21,r21,8
   214b8:	d9015017 	ldw	r4,1344(sp)
   214bc:	20000b1e 	bne	r4,zero,214ec <___vfprintf_internal_r+0x514>
   214c0:	d8800444 	addi	r2,sp,17
   214c4:	94800084 	addi	r18,r18,2
   214c8:	8c400044 	addi	r17,r17,1
   214cc:	a8800015 	stw	r2,0(r21)
   214d0:	00c00084 	movi	r3,2
   214d4:	008001c4 	movi	r2,7
   214d8:	a8c00115 	stw	r3,4(r21)
   214dc:	dc800e15 	stw	r18,56(sp)
   214e0:	dc400d15 	stw	r17,52(sp)
   214e4:	1441c216 	blt	r2,r17,21bf0 <___vfprintf_internal_r+0xc18>
   214e8:	ad400204 	addi	r21,r21,8
   214ec:	d9414e17 	ldw	r5,1336(sp)
   214f0:	00802004 	movi	r2,128
   214f4:	2880b126 	beq	r5,r2,217bc <___vfprintf_internal_r+0x7e4>
   214f8:	d8c14617 	ldw	r3,1304(sp)
   214fc:	19e1c83a 	sub	r16,r3,r7
   21500:	0400260e 	bge	zero,r16,2159c <___vfprintf_internal_r+0x5c4>
   21504:	00800404 	movi	r2,16
   21508:	1403cf0e 	bge	r2,r16,22448 <___vfprintf_internal_r+0x1470>
   2150c:	1027883a 	mov	r19,r2
   21510:	070000f4 	movhi	fp,3
   21514:	e735d884 	addi	fp,fp,-10398
   21518:	050001c4 	movi	r20,7
   2151c:	00000306 	br	2152c <___vfprintf_internal_r+0x554>
   21520:	843ffc04 	addi	r16,r16,-16
   21524:	ad400204 	addi	r21,r21,8
   21528:	9c00130e 	bge	r19,r16,21578 <___vfprintf_internal_r+0x5a0>
   2152c:	94800404 	addi	r18,r18,16
   21530:	8c400044 	addi	r17,r17,1
   21534:	af000015 	stw	fp,0(r21)
   21538:	acc00115 	stw	r19,4(r21)
   2153c:	dc800e15 	stw	r18,56(sp)
   21540:	dc400d15 	stw	r17,52(sp)
   21544:	a47ff60e 	bge	r20,r17,21520 <___vfprintf_internal_r+0x548>
   21548:	d9014f17 	ldw	r4,1340(sp)
   2154c:	b00b883a 	mov	r5,r22
   21550:	d9800c04 	addi	r6,sp,48
   21554:	d9c15115 	stw	r7,1348(sp)
   21558:	0020f800 	call	20f80 <__sprint_r>
   2155c:	d9c15117 	ldw	r7,1348(sp)
   21560:	1000551e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   21564:	843ffc04 	addi	r16,r16,-16
   21568:	dc800e17 	ldw	r18,56(sp)
   2156c:	dc400d17 	ldw	r17,52(sp)
   21570:	dd401904 	addi	r21,sp,100
   21574:	9c3fed16 	blt	r19,r16,2152c <___vfprintf_internal_r+0x554>
   21578:	9425883a 	add	r18,r18,r16
   2157c:	8c400044 	addi	r17,r17,1
   21580:	008001c4 	movi	r2,7
   21584:	af000015 	stw	fp,0(r21)
   21588:	ac000115 	stw	r16,4(r21)
   2158c:	dc800e15 	stw	r18,56(sp)
   21590:	dc400d15 	stw	r17,52(sp)
   21594:	14418216 	blt	r2,r17,21ba0 <___vfprintf_internal_r+0xbc8>
   21598:	ad400204 	addi	r21,r21,8
   2159c:	d9014c17 	ldw	r4,1328(sp)
   215a0:	2080400c 	andi	r2,r4,256
   215a4:	10004a1e 	bne	r2,zero,216d0 <___vfprintf_internal_r+0x6f8>
   215a8:	d9414117 	ldw	r5,1284(sp)
   215ac:	91e5883a 	add	r18,r18,r7
   215b0:	8c400044 	addi	r17,r17,1
   215b4:	008001c4 	movi	r2,7
   215b8:	a9400015 	stw	r5,0(r21)
   215bc:	a9c00115 	stw	r7,4(r21)
   215c0:	dc800e15 	stw	r18,56(sp)
   215c4:	dc400d15 	stw	r17,52(sp)
   215c8:	14416716 	blt	r2,r17,21b68 <___vfprintf_internal_r+0xb90>
   215cc:	a8c00204 	addi	r3,r21,8
   215d0:	d9814c17 	ldw	r6,1328(sp)
   215d4:	3080010c 	andi	r2,r6,4
   215d8:	10002826 	beq	r2,zero,2167c <___vfprintf_internal_r+0x6a4>
   215dc:	d8814a17 	ldw	r2,1320(sp)
   215e0:	d9014517 	ldw	r4,1300(sp)
   215e4:	1121c83a 	sub	r16,r2,r4
   215e8:	0400240e 	bge	zero,r16,2167c <___vfprintf_internal_r+0x6a4>
   215ec:	00800404 	movi	r2,16
   215f0:	1404550e 	bge	r2,r16,22748 <___vfprintf_internal_r+0x1770>
   215f4:	dc400d17 	ldw	r17,52(sp)
   215f8:	1027883a 	mov	r19,r2
   215fc:	070000f4 	movhi	fp,3
   21600:	e735dc84 	addi	fp,fp,-10382
   21604:	050001c4 	movi	r20,7
   21608:	00000306 	br	21618 <___vfprintf_internal_r+0x640>
   2160c:	843ffc04 	addi	r16,r16,-16
   21610:	18c00204 	addi	r3,r3,8
   21614:	9c00110e 	bge	r19,r16,2165c <___vfprintf_internal_r+0x684>
   21618:	94800404 	addi	r18,r18,16
   2161c:	8c400044 	addi	r17,r17,1
   21620:	1f000015 	stw	fp,0(r3)
   21624:	1cc00115 	stw	r19,4(r3)
   21628:	dc800e15 	stw	r18,56(sp)
   2162c:	dc400d15 	stw	r17,52(sp)
   21630:	a47ff60e 	bge	r20,r17,2160c <___vfprintf_internal_r+0x634>
   21634:	d9014f17 	ldw	r4,1340(sp)
   21638:	b00b883a 	mov	r5,r22
   2163c:	d9800c04 	addi	r6,sp,48
   21640:	0020f800 	call	20f80 <__sprint_r>
   21644:	10001c1e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   21648:	843ffc04 	addi	r16,r16,-16
   2164c:	dc800e17 	ldw	r18,56(sp)
   21650:	dc400d17 	ldw	r17,52(sp)
   21654:	d8c01904 	addi	r3,sp,100
   21658:	9c3fef16 	blt	r19,r16,21618 <___vfprintf_internal_r+0x640>
   2165c:	9425883a 	add	r18,r18,r16
   21660:	8c400044 	addi	r17,r17,1
   21664:	008001c4 	movi	r2,7
   21668:	1f000015 	stw	fp,0(r3)
   2166c:	1c000115 	stw	r16,4(r3)
   21670:	dc800e15 	stw	r18,56(sp)
   21674:	dc400d15 	stw	r17,52(sp)
   21678:	1440cb16 	blt	r2,r17,219a8 <___vfprintf_internal_r+0x9d0>
   2167c:	d8814a17 	ldw	r2,1320(sp)
   21680:	d9414517 	ldw	r5,1300(sp)
   21684:	1140010e 	bge	r2,r5,2168c <___vfprintf_internal_r+0x6b4>
   21688:	2805883a 	mov	r2,r5
   2168c:	d9814b17 	ldw	r6,1324(sp)
   21690:	308d883a 	add	r6,r6,r2
   21694:	d9814b15 	stw	r6,1324(sp)
   21698:	90013b1e 	bne	r18,zero,21b88 <___vfprintf_internal_r+0xbb0>
   2169c:	d9c14017 	ldw	r7,1280(sp)
   216a0:	dd401904 	addi	r21,sp,100
   216a4:	d8000d15 	stw	zero,52(sp)
   216a8:	003ea706 	br	21148 <___vfprintf_internal_r+0x170>
   216ac:	d8800e17 	ldw	r2,56(sp)
   216b0:	1005451e 	bne	r2,zero,22bc8 <___vfprintf_internal_r+0x1bf0>
   216b4:	d8000d15 	stw	zero,52(sp)
   216b8:	b080030b 	ldhu	r2,12(r22)
   216bc:	1080100c 	andi	r2,r2,64
   216c0:	103e8726 	beq	r2,zero,210e0 <___vfprintf_internal_r+0x108>
   216c4:	00bfffc4 	movi	r2,-1
   216c8:	d8814b15 	stw	r2,1324(sp)
   216cc:	003e8406 	br	210e0 <___vfprintf_internal_r+0x108>
   216d0:	d9814d17 	ldw	r6,1332(sp)
   216d4:	00801944 	movi	r2,101
   216d8:	11806e16 	blt	r2,r6,21894 <___vfprintf_internal_r+0x8bc>
   216dc:	d9414717 	ldw	r5,1308(sp)
   216e0:	00c00044 	movi	r3,1
   216e4:	1943490e 	bge	r3,r5,2240c <___vfprintf_internal_r+0x1434>
   216e8:	d8814117 	ldw	r2,1284(sp)
   216ec:	94800044 	addi	r18,r18,1
   216f0:	8c400044 	addi	r17,r17,1
   216f4:	a8800015 	stw	r2,0(r21)
   216f8:	008001c4 	movi	r2,7
   216fc:	a8c00115 	stw	r3,4(r21)
   21700:	dc800e15 	stw	r18,56(sp)
   21704:	dc400d15 	stw	r17,52(sp)
   21708:	1441ca16 	blt	r2,r17,21e34 <___vfprintf_internal_r+0xe5c>
   2170c:	a8c00204 	addi	r3,r21,8
   21710:	d9014917 	ldw	r4,1316(sp)
   21714:	00800044 	movi	r2,1
   21718:	94800044 	addi	r18,r18,1
   2171c:	8c400044 	addi	r17,r17,1
   21720:	18800115 	stw	r2,4(r3)
   21724:	008001c4 	movi	r2,7
   21728:	19000015 	stw	r4,0(r3)
   2172c:	dc800e15 	stw	r18,56(sp)
   21730:	dc400d15 	stw	r17,52(sp)
   21734:	1441b616 	blt	r2,r17,21e10 <___vfprintf_internal_r+0xe38>
   21738:	1cc00204 	addi	r19,r3,8
   2173c:	d9014217 	ldw	r4,1288(sp)
   21740:	d9414317 	ldw	r5,1292(sp)
   21744:	000d883a 	mov	r6,zero
   21748:	000f883a 	mov	r7,zero
   2174c:	0029b040 	call	29b04 <__nedf2>
   21750:	10017426 	beq	r2,zero,21d24 <___vfprintf_internal_r+0xd4c>
   21754:	d9414717 	ldw	r5,1308(sp)
   21758:	d9814117 	ldw	r6,1284(sp)
   2175c:	8c400044 	addi	r17,r17,1
   21760:	2c85883a 	add	r2,r5,r18
   21764:	14bfffc4 	addi	r18,r2,-1
   21768:	28bfffc4 	addi	r2,r5,-1
   2176c:	30c00044 	addi	r3,r6,1
   21770:	98800115 	stw	r2,4(r19)
   21774:	008001c4 	movi	r2,7
   21778:	98c00015 	stw	r3,0(r19)
   2177c:	dc800e15 	stw	r18,56(sp)
   21780:	dc400d15 	stw	r17,52(sp)
   21784:	14418e16 	blt	r2,r17,21dc0 <___vfprintf_internal_r+0xde8>
   21788:	9cc00204 	addi	r19,r19,8
   2178c:	d9414817 	ldw	r5,1312(sp)
   21790:	d8800804 	addi	r2,sp,32
   21794:	8c400044 	addi	r17,r17,1
   21798:	9165883a 	add	r18,r18,r5
   2179c:	98800015 	stw	r2,0(r19)
   217a0:	008001c4 	movi	r2,7
   217a4:	99400115 	stw	r5,4(r19)
   217a8:	dc800e15 	stw	r18,56(sp)
   217ac:	dc400d15 	stw	r17,52(sp)
   217b0:	1440ed16 	blt	r2,r17,21b68 <___vfprintf_internal_r+0xb90>
   217b4:	98c00204 	addi	r3,r19,8
   217b8:	003f8506 	br	215d0 <___vfprintf_internal_r+0x5f8>
   217bc:	d9814a17 	ldw	r6,1320(sp)
   217c0:	d8814517 	ldw	r2,1300(sp)
   217c4:	30a1c83a 	sub	r16,r6,r2
   217c8:	043f4b0e 	bge	zero,r16,214f8 <___vfprintf_internal_r+0x520>
   217cc:	00800404 	movi	r2,16
   217d0:	14043a0e 	bge	r2,r16,228bc <___vfprintf_internal_r+0x18e4>
   217d4:	1027883a 	mov	r19,r2
   217d8:	070000f4 	movhi	fp,3
   217dc:	e735d884 	addi	fp,fp,-10398
   217e0:	050001c4 	movi	r20,7
   217e4:	00000306 	br	217f4 <___vfprintf_internal_r+0x81c>
   217e8:	843ffc04 	addi	r16,r16,-16
   217ec:	ad400204 	addi	r21,r21,8
   217f0:	9c00130e 	bge	r19,r16,21840 <___vfprintf_internal_r+0x868>
   217f4:	94800404 	addi	r18,r18,16
   217f8:	8c400044 	addi	r17,r17,1
   217fc:	af000015 	stw	fp,0(r21)
   21800:	acc00115 	stw	r19,4(r21)
   21804:	dc800e15 	stw	r18,56(sp)
   21808:	dc400d15 	stw	r17,52(sp)
   2180c:	a47ff60e 	bge	r20,r17,217e8 <___vfprintf_internal_r+0x810>
   21810:	d9014f17 	ldw	r4,1340(sp)
   21814:	b00b883a 	mov	r5,r22
   21818:	d9800c04 	addi	r6,sp,48
   2181c:	d9c15115 	stw	r7,1348(sp)
   21820:	0020f800 	call	20f80 <__sprint_r>
   21824:	d9c15117 	ldw	r7,1348(sp)
   21828:	103fa31e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   2182c:	843ffc04 	addi	r16,r16,-16
   21830:	dc800e17 	ldw	r18,56(sp)
   21834:	dc400d17 	ldw	r17,52(sp)
   21838:	dd401904 	addi	r21,sp,100
   2183c:	9c3fed16 	blt	r19,r16,217f4 <___vfprintf_internal_r+0x81c>
   21840:	9425883a 	add	r18,r18,r16
   21844:	8c400044 	addi	r17,r17,1
   21848:	008001c4 	movi	r2,7
   2184c:	af000015 	stw	fp,0(r21)
   21850:	ac000115 	stw	r16,4(r21)
   21854:	dc800e15 	stw	r18,56(sp)
   21858:	dc400d15 	stw	r17,52(sp)
   2185c:	14416116 	blt	r2,r17,21de4 <___vfprintf_internal_r+0xe0c>
   21860:	ad400204 	addi	r21,r21,8
   21864:	003f2406 	br	214f8 <___vfprintf_internal_r+0x520>
   21868:	d9014f17 	ldw	r4,1340(sp)
   2186c:	0024a900 	call	24a90 <__sinit>
   21870:	d9c15117 	ldw	r7,1348(sp)
   21874:	003def06 	br	21034 <___vfprintf_internal_r+0x5c>
   21878:	d9014f17 	ldw	r4,1340(sp)
   2187c:	b00b883a 	mov	r5,r22
   21880:	d9c15115 	stw	r7,1348(sp)
   21884:	0022ec40 	call	22ec4 <__swsetup_r>
   21888:	d9c15117 	ldw	r7,1348(sp)
   2188c:	103dee26 	beq	r2,zero,21048 <___vfprintf_internal_r+0x70>
   21890:	003f8c06 	br	216c4 <___vfprintf_internal_r+0x6ec>
   21894:	d9014217 	ldw	r4,1288(sp)
   21898:	d9414317 	ldw	r5,1292(sp)
   2189c:	000d883a 	mov	r6,zero
   218a0:	000f883a 	mov	r7,zero
   218a4:	0029a7c0 	call	29a7c <__eqdf2>
   218a8:	1000f21e 	bne	r2,zero,21c74 <___vfprintf_internal_r+0xc9c>
   218ac:	008000f4 	movhi	r2,3
   218b0:	10b5d804 	addi	r2,r2,-10400
   218b4:	94800044 	addi	r18,r18,1
   218b8:	8c400044 	addi	r17,r17,1
   218bc:	a8800015 	stw	r2,0(r21)
   218c0:	00c00044 	movi	r3,1
   218c4:	008001c4 	movi	r2,7
   218c8:	a8c00115 	stw	r3,4(r21)
   218cc:	dc800e15 	stw	r18,56(sp)
   218d0:	dc400d15 	stw	r17,52(sp)
   218d4:	14430016 	blt	r2,r17,224d8 <___vfprintf_internal_r+0x1500>
   218d8:	a8c00204 	addi	r3,r21,8
   218dc:	d8800517 	ldw	r2,20(sp)
   218e0:	d9014717 	ldw	r4,1308(sp)
   218e4:	11015c0e 	bge	r2,r4,21e58 <___vfprintf_internal_r+0xe80>
   218e8:	dc400d17 	ldw	r17,52(sp)
   218ec:	d9814917 	ldw	r6,1316(sp)
   218f0:	00800044 	movi	r2,1
   218f4:	94800044 	addi	r18,r18,1
   218f8:	8c400044 	addi	r17,r17,1
   218fc:	18800115 	stw	r2,4(r3)
   21900:	008001c4 	movi	r2,7
   21904:	19800015 	stw	r6,0(r3)
   21908:	dc800e15 	stw	r18,56(sp)
   2190c:	dc400d15 	stw	r17,52(sp)
   21910:	14431616 	blt	r2,r17,2256c <___vfprintf_internal_r+0x1594>
   21914:	18c00204 	addi	r3,r3,8
   21918:	d8814717 	ldw	r2,1308(sp)
   2191c:	143fffc4 	addi	r16,r2,-1
   21920:	043f2b0e 	bge	zero,r16,215d0 <___vfprintf_internal_r+0x5f8>
   21924:	00800404 	movi	r2,16
   21928:	1402a80e 	bge	r2,r16,223cc <___vfprintf_internal_r+0x13f4>
   2192c:	dc400d17 	ldw	r17,52(sp)
   21930:	1027883a 	mov	r19,r2
   21934:	070000f4 	movhi	fp,3
   21938:	e735d884 	addi	fp,fp,-10398
   2193c:	050001c4 	movi	r20,7
   21940:	00000306 	br	21950 <___vfprintf_internal_r+0x978>
   21944:	18c00204 	addi	r3,r3,8
   21948:	843ffc04 	addi	r16,r16,-16
   2194c:	9c02a20e 	bge	r19,r16,223d8 <___vfprintf_internal_r+0x1400>
   21950:	94800404 	addi	r18,r18,16
   21954:	8c400044 	addi	r17,r17,1
   21958:	1f000015 	stw	fp,0(r3)
   2195c:	1cc00115 	stw	r19,4(r3)
   21960:	dc800e15 	stw	r18,56(sp)
   21964:	dc400d15 	stw	r17,52(sp)
   21968:	a47ff60e 	bge	r20,r17,21944 <___vfprintf_internal_r+0x96c>
   2196c:	d9014f17 	ldw	r4,1340(sp)
   21970:	b00b883a 	mov	r5,r22
   21974:	d9800c04 	addi	r6,sp,48
   21978:	0020f800 	call	20f80 <__sprint_r>
   2197c:	103f4e1e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   21980:	dc800e17 	ldw	r18,56(sp)
   21984:	dc400d17 	ldw	r17,52(sp)
   21988:	d8c01904 	addi	r3,sp,100
   2198c:	003fee06 	br	21948 <___vfprintf_internal_r+0x970>
   21990:	d8802c0b 	ldhu	r2,176(sp)
   21994:	00ffffc4 	movi	r3,-1
   21998:	d8c14b15 	stw	r3,1324(sp)
   2199c:	1080100c 	andi	r2,r2,64
   219a0:	103dcc1e 	bne	r2,zero,210d4 <___vfprintf_internal_r+0xfc>
   219a4:	003dce06 	br	210e0 <___vfprintf_internal_r+0x108>
   219a8:	d9014f17 	ldw	r4,1340(sp)
   219ac:	b00b883a 	mov	r5,r22
   219b0:	d9800c04 	addi	r6,sp,48
   219b4:	0020f800 	call	20f80 <__sprint_r>
   219b8:	103f3f1e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   219bc:	dc800e17 	ldw	r18,56(sp)
   219c0:	003f2e06 	br	2167c <___vfprintf_internal_r+0x6a4>
   219c4:	d9414c17 	ldw	r5,1328(sp)
   219c8:	29400414 	ori	r5,r5,16
   219cc:	d9414c15 	stw	r5,1328(sp)
   219d0:	d9814c17 	ldw	r6,1328(sp)
   219d4:	3080080c 	andi	r2,r6,32
   219d8:	10014f1e 	bne	r2,zero,21f18 <___vfprintf_internal_r+0xf40>
   219dc:	d8c14c17 	ldw	r3,1328(sp)
   219e0:	1880040c 	andi	r2,r3,16
   219e4:	1002f01e 	bne	r2,zero,225a8 <___vfprintf_internal_r+0x15d0>
   219e8:	d9014c17 	ldw	r4,1328(sp)
   219ec:	2080100c 	andi	r2,r4,64
   219f0:	1002ed26 	beq	r2,zero,225a8 <___vfprintf_internal_r+0x15d0>
   219f4:	3880000f 	ldh	r2,0(r7)
   219f8:	39c00104 	addi	r7,r7,4
   219fc:	d9c14015 	stw	r7,1280(sp)
   21a00:	1023d7fa 	srai	r17,r2,31
   21a04:	1021883a 	mov	r16,r2
   21a08:	88037816 	blt	r17,zero,227ec <___vfprintf_internal_r+0x1814>
   21a0c:	01000044 	movi	r4,1
   21a10:	98000416 	blt	r19,zero,21a24 <___vfprintf_internal_r+0xa4c>
   21a14:	d8c14c17 	ldw	r3,1328(sp)
   21a18:	00bfdfc4 	movi	r2,-129
   21a1c:	1886703a 	and	r3,r3,r2
   21a20:	d8c14c15 	stw	r3,1328(sp)
   21a24:	8444b03a 	or	r2,r16,r17
   21a28:	10022c1e 	bne	r2,zero,222dc <___vfprintf_internal_r+0x1304>
   21a2c:	98022b1e 	bne	r19,zero,222dc <___vfprintf_internal_r+0x1304>
   21a30:	20803fcc 	andi	r2,r4,255
   21a34:	1002a126 	beq	r2,zero,224bc <___vfprintf_internal_r+0x14e4>
   21a38:	d8c01904 	addi	r3,sp,100
   21a3c:	dd000f04 	addi	r20,sp,60
   21a40:	d8c14115 	stw	r3,1284(sp)
   21a44:	d8c14117 	ldw	r3,1284(sp)
   21a48:	dcc14515 	stw	r19,1300(sp)
   21a4c:	a0c5c83a 	sub	r2,r20,r3
   21a50:	11c00a04 	addi	r7,r2,40
   21a54:	99c0010e 	bge	r19,r7,21a5c <___vfprintf_internal_r+0xa84>
   21a58:	d9c14515 	stw	r7,1300(sp)
   21a5c:	dcc14615 	stw	r19,1304(sp)
   21a60:	d8800407 	ldb	r2,16(sp)
   21a64:	103e4c26 	beq	r2,zero,21398 <___vfprintf_internal_r+0x3c0>
   21a68:	d8814517 	ldw	r2,1300(sp)
   21a6c:	10800044 	addi	r2,r2,1
   21a70:	d8814515 	stw	r2,1300(sp)
   21a74:	003e4806 	br	21398 <___vfprintf_internal_r+0x3c0>
   21a78:	d9814c17 	ldw	r6,1328(sp)
   21a7c:	31800414 	ori	r6,r6,16
   21a80:	d9814c15 	stw	r6,1328(sp)
   21a84:	d8c14c17 	ldw	r3,1328(sp)
   21a88:	1880080c 	andi	r2,r3,32
   21a8c:	1001271e 	bne	r2,zero,21f2c <___vfprintf_internal_r+0xf54>
   21a90:	d9414c17 	ldw	r5,1328(sp)
   21a94:	2880040c 	andi	r2,r5,16
   21a98:	1002bc1e 	bne	r2,zero,2258c <___vfprintf_internal_r+0x15b4>
   21a9c:	d9814c17 	ldw	r6,1328(sp)
   21aa0:	3080100c 	andi	r2,r6,64
   21aa4:	1002b926 	beq	r2,zero,2258c <___vfprintf_internal_r+0x15b4>
   21aa8:	3c00000b 	ldhu	r16,0(r7)
   21aac:	0009883a 	mov	r4,zero
   21ab0:	39c00104 	addi	r7,r7,4
   21ab4:	0023883a 	mov	r17,zero
   21ab8:	d9c14015 	stw	r7,1280(sp)
   21abc:	d8000405 	stb	zero,16(sp)
   21ac0:	003fd306 	br	21a10 <___vfprintf_internal_r+0xa38>
   21ac4:	d9014c17 	ldw	r4,1328(sp)
   21ac8:	21000414 	ori	r4,r4,16
   21acc:	d9014c15 	stw	r4,1328(sp)
   21ad0:	d9414c17 	ldw	r5,1328(sp)
   21ad4:	2880080c 	andi	r2,r5,32
   21ad8:	1001081e 	bne	r2,zero,21efc <___vfprintf_internal_r+0xf24>
   21adc:	d8c14c17 	ldw	r3,1328(sp)
   21ae0:	1880040c 	andi	r2,r3,16
   21ae4:	1002b61e 	bne	r2,zero,225c0 <___vfprintf_internal_r+0x15e8>
   21ae8:	d9014c17 	ldw	r4,1328(sp)
   21aec:	2080100c 	andi	r2,r4,64
   21af0:	1002b326 	beq	r2,zero,225c0 <___vfprintf_internal_r+0x15e8>
   21af4:	3c00000b 	ldhu	r16,0(r7)
   21af8:	01000044 	movi	r4,1
   21afc:	39c00104 	addi	r7,r7,4
   21b00:	0023883a 	mov	r17,zero
   21b04:	d9c14015 	stw	r7,1280(sp)
   21b08:	d8000405 	stb	zero,16(sp)
   21b0c:	003fc006 	br	21a10 <___vfprintf_internal_r+0xa38>
   21b10:	d9014f17 	ldw	r4,1340(sp)
   21b14:	b00b883a 	mov	r5,r22
   21b18:	d9800c04 	addi	r6,sp,48
   21b1c:	0020f800 	call	20f80 <__sprint_r>
   21b20:	103ee51e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   21b24:	dc800e17 	ldw	r18,56(sp)
   21b28:	d8c01904 	addi	r3,sp,100
   21b2c:	d9814c17 	ldw	r6,1328(sp)
   21b30:	3080004c 	andi	r2,r6,1
   21b34:	1005003a 	cmpeq	r2,r2,zero
   21b38:	103ea51e 	bne	r2,zero,215d0 <___vfprintf_internal_r+0x5f8>
   21b3c:	00800044 	movi	r2,1
   21b40:	dc400d17 	ldw	r17,52(sp)
   21b44:	18800115 	stw	r2,4(r3)
   21b48:	d8814917 	ldw	r2,1316(sp)
   21b4c:	94800044 	addi	r18,r18,1
   21b50:	8c400044 	addi	r17,r17,1
   21b54:	18800015 	stw	r2,0(r3)
   21b58:	008001c4 	movi	r2,7
   21b5c:	dc800e15 	stw	r18,56(sp)
   21b60:	dc400d15 	stw	r17,52(sp)
   21b64:	1442240e 	bge	r2,r17,223f8 <___vfprintf_internal_r+0x1420>
   21b68:	d9014f17 	ldw	r4,1340(sp)
   21b6c:	b00b883a 	mov	r5,r22
   21b70:	d9800c04 	addi	r6,sp,48
   21b74:	0020f800 	call	20f80 <__sprint_r>
   21b78:	103ecf1e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   21b7c:	dc800e17 	ldw	r18,56(sp)
   21b80:	d8c01904 	addi	r3,sp,100
   21b84:	003e9206 	br	215d0 <___vfprintf_internal_r+0x5f8>
   21b88:	d9014f17 	ldw	r4,1340(sp)
   21b8c:	b00b883a 	mov	r5,r22
   21b90:	d9800c04 	addi	r6,sp,48
   21b94:	0020f800 	call	20f80 <__sprint_r>
   21b98:	103ec026 	beq	r2,zero,2169c <___vfprintf_internal_r+0x6c4>
   21b9c:	003ec606 	br	216b8 <___vfprintf_internal_r+0x6e0>
   21ba0:	d9014f17 	ldw	r4,1340(sp)
   21ba4:	b00b883a 	mov	r5,r22
   21ba8:	d9800c04 	addi	r6,sp,48
   21bac:	d9c15115 	stw	r7,1348(sp)
   21bb0:	0020f800 	call	20f80 <__sprint_r>
   21bb4:	d9c15117 	ldw	r7,1348(sp)
   21bb8:	103ebf1e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   21bbc:	dc800e17 	ldw	r18,56(sp)
   21bc0:	dc400d17 	ldw	r17,52(sp)
   21bc4:	dd401904 	addi	r21,sp,100
   21bc8:	003e7406 	br	2159c <___vfprintf_internal_r+0x5c4>
   21bcc:	d9014f17 	ldw	r4,1340(sp)
   21bd0:	b00b883a 	mov	r5,r22
   21bd4:	d9800c04 	addi	r6,sp,48
   21bd8:	d9c15115 	stw	r7,1348(sp)
   21bdc:	0020f800 	call	20f80 <__sprint_r>
   21be0:	d9c15117 	ldw	r7,1348(sp)
   21be4:	103eb41e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   21be8:	dd401904 	addi	r21,sp,100
   21bec:	003d6d06 	br	211a4 <___vfprintf_internal_r+0x1cc>
   21bf0:	d9014f17 	ldw	r4,1340(sp)
   21bf4:	b00b883a 	mov	r5,r22
   21bf8:	d9800c04 	addi	r6,sp,48
   21bfc:	d9c15115 	stw	r7,1348(sp)
   21c00:	0020f800 	call	20f80 <__sprint_r>
   21c04:	d9c15117 	ldw	r7,1348(sp)
   21c08:	103eab1e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   21c0c:	dc800e17 	ldw	r18,56(sp)
   21c10:	dc400d17 	ldw	r17,52(sp)
   21c14:	dd401904 	addi	r21,sp,100
   21c18:	003e3406 	br	214ec <___vfprintf_internal_r+0x514>
   21c1c:	d9014f17 	ldw	r4,1340(sp)
   21c20:	b00b883a 	mov	r5,r22
   21c24:	d9800c04 	addi	r6,sp,48
   21c28:	d9c15115 	stw	r7,1348(sp)
   21c2c:	0020f800 	call	20f80 <__sprint_r>
   21c30:	d9c15117 	ldw	r7,1348(sp)
   21c34:	103ea01e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   21c38:	dc800e17 	ldw	r18,56(sp)
   21c3c:	dc400d17 	ldw	r17,52(sp)
   21c40:	dd401904 	addi	r21,sp,100
   21c44:	003e1c06 	br	214b8 <___vfprintf_internal_r+0x4e0>
   21c48:	d9014f17 	ldw	r4,1340(sp)
   21c4c:	b00b883a 	mov	r5,r22
   21c50:	d9800c04 	addi	r6,sp,48
   21c54:	d9c15115 	stw	r7,1348(sp)
   21c58:	0020f800 	call	20f80 <__sprint_r>
   21c5c:	d9c15117 	ldw	r7,1348(sp)
   21c60:	103e951e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   21c64:	dc800e17 	ldw	r18,56(sp)
   21c68:	dc400d17 	ldw	r17,52(sp)
   21c6c:	dd401904 	addi	r21,sp,100
   21c70:	003e0406 	br	21484 <___vfprintf_internal_r+0x4ac>
   21c74:	d9000517 	ldw	r4,20(sp)
   21c78:	0102580e 	bge	zero,r4,225dc <___vfprintf_internal_r+0x1604>
   21c7c:	d9814717 	ldw	r6,1308(sp)
   21c80:	21807a16 	blt	r4,r6,21e6c <___vfprintf_internal_r+0xe94>
   21c84:	d8814117 	ldw	r2,1284(sp)
   21c88:	91a5883a 	add	r18,r18,r6
   21c8c:	8c400044 	addi	r17,r17,1
   21c90:	a8800015 	stw	r2,0(r21)
   21c94:	008001c4 	movi	r2,7
   21c98:	a9800115 	stw	r6,4(r21)
   21c9c:	dc800e15 	stw	r18,56(sp)
   21ca0:	dc400d15 	stw	r17,52(sp)
   21ca4:	1442fc16 	blt	r2,r17,22898 <___vfprintf_internal_r+0x18c0>
   21ca8:	a8c00204 	addi	r3,r21,8
   21cac:	d9414717 	ldw	r5,1308(sp)
   21cb0:	2161c83a 	sub	r16,r4,r5
   21cb4:	043f9d0e 	bge	zero,r16,21b2c <___vfprintf_internal_r+0xb54>
   21cb8:	00800404 	movi	r2,16
   21cbc:	1402190e 	bge	r2,r16,22524 <___vfprintf_internal_r+0x154c>
   21cc0:	dc400d17 	ldw	r17,52(sp)
   21cc4:	1027883a 	mov	r19,r2
   21cc8:	070000f4 	movhi	fp,3
   21ccc:	e735d884 	addi	fp,fp,-10398
   21cd0:	050001c4 	movi	r20,7
   21cd4:	00000306 	br	21ce4 <___vfprintf_internal_r+0xd0c>
   21cd8:	18c00204 	addi	r3,r3,8
   21cdc:	843ffc04 	addi	r16,r16,-16
   21ce0:	9c02130e 	bge	r19,r16,22530 <___vfprintf_internal_r+0x1558>
   21ce4:	94800404 	addi	r18,r18,16
   21ce8:	8c400044 	addi	r17,r17,1
   21cec:	1f000015 	stw	fp,0(r3)
   21cf0:	1cc00115 	stw	r19,4(r3)
   21cf4:	dc800e15 	stw	r18,56(sp)
   21cf8:	dc400d15 	stw	r17,52(sp)
   21cfc:	a47ff60e 	bge	r20,r17,21cd8 <___vfprintf_internal_r+0xd00>
   21d00:	d9014f17 	ldw	r4,1340(sp)
   21d04:	b00b883a 	mov	r5,r22
   21d08:	d9800c04 	addi	r6,sp,48
   21d0c:	0020f800 	call	20f80 <__sprint_r>
   21d10:	103e691e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   21d14:	dc800e17 	ldw	r18,56(sp)
   21d18:	dc400d17 	ldw	r17,52(sp)
   21d1c:	d8c01904 	addi	r3,sp,100
   21d20:	003fee06 	br	21cdc <___vfprintf_internal_r+0xd04>
   21d24:	d8814717 	ldw	r2,1308(sp)
   21d28:	143fffc4 	addi	r16,r2,-1
   21d2c:	043e970e 	bge	zero,r16,2178c <___vfprintf_internal_r+0x7b4>
   21d30:	00800404 	movi	r2,16
   21d34:	1400180e 	bge	r2,r16,21d98 <___vfprintf_internal_r+0xdc0>
   21d38:	1029883a 	mov	r20,r2
   21d3c:	070000f4 	movhi	fp,3
   21d40:	e735d884 	addi	fp,fp,-10398
   21d44:	054001c4 	movi	r21,7
   21d48:	00000306 	br	21d58 <___vfprintf_internal_r+0xd80>
   21d4c:	9cc00204 	addi	r19,r19,8
   21d50:	843ffc04 	addi	r16,r16,-16
   21d54:	a400120e 	bge	r20,r16,21da0 <___vfprintf_internal_r+0xdc8>
   21d58:	94800404 	addi	r18,r18,16
   21d5c:	8c400044 	addi	r17,r17,1
   21d60:	9f000015 	stw	fp,0(r19)
   21d64:	9d000115 	stw	r20,4(r19)
   21d68:	dc800e15 	stw	r18,56(sp)
   21d6c:	dc400d15 	stw	r17,52(sp)
   21d70:	ac7ff60e 	bge	r21,r17,21d4c <___vfprintf_internal_r+0xd74>
   21d74:	d9014f17 	ldw	r4,1340(sp)
   21d78:	b00b883a 	mov	r5,r22
   21d7c:	d9800c04 	addi	r6,sp,48
   21d80:	0020f800 	call	20f80 <__sprint_r>
   21d84:	103e4c1e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   21d88:	dc800e17 	ldw	r18,56(sp)
   21d8c:	dc400d17 	ldw	r17,52(sp)
   21d90:	dcc01904 	addi	r19,sp,100
   21d94:	003fee06 	br	21d50 <___vfprintf_internal_r+0xd78>
   21d98:	070000f4 	movhi	fp,3
   21d9c:	e735d884 	addi	fp,fp,-10398
   21da0:	9425883a 	add	r18,r18,r16
   21da4:	8c400044 	addi	r17,r17,1
   21da8:	008001c4 	movi	r2,7
   21dac:	9f000015 	stw	fp,0(r19)
   21db0:	9c000115 	stw	r16,4(r19)
   21db4:	dc800e15 	stw	r18,56(sp)
   21db8:	dc400d15 	stw	r17,52(sp)
   21dbc:	147e720e 	bge	r2,r17,21788 <___vfprintf_internal_r+0x7b0>
   21dc0:	d9014f17 	ldw	r4,1340(sp)
   21dc4:	b00b883a 	mov	r5,r22
   21dc8:	d9800c04 	addi	r6,sp,48
   21dcc:	0020f800 	call	20f80 <__sprint_r>
   21dd0:	103e391e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   21dd4:	dc800e17 	ldw	r18,56(sp)
   21dd8:	dc400d17 	ldw	r17,52(sp)
   21ddc:	dcc01904 	addi	r19,sp,100
   21de0:	003e6a06 	br	2178c <___vfprintf_internal_r+0x7b4>
   21de4:	d9014f17 	ldw	r4,1340(sp)
   21de8:	b00b883a 	mov	r5,r22
   21dec:	d9800c04 	addi	r6,sp,48
   21df0:	d9c15115 	stw	r7,1348(sp)
   21df4:	0020f800 	call	20f80 <__sprint_r>
   21df8:	d9c15117 	ldw	r7,1348(sp)
   21dfc:	103e2e1e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   21e00:	dc800e17 	ldw	r18,56(sp)
   21e04:	dc400d17 	ldw	r17,52(sp)
   21e08:	dd401904 	addi	r21,sp,100
   21e0c:	003dba06 	br	214f8 <___vfprintf_internal_r+0x520>
   21e10:	d9014f17 	ldw	r4,1340(sp)
   21e14:	b00b883a 	mov	r5,r22
   21e18:	d9800c04 	addi	r6,sp,48
   21e1c:	0020f800 	call	20f80 <__sprint_r>
   21e20:	103e251e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   21e24:	dc800e17 	ldw	r18,56(sp)
   21e28:	dc400d17 	ldw	r17,52(sp)
   21e2c:	dcc01904 	addi	r19,sp,100
   21e30:	003e4206 	br	2173c <___vfprintf_internal_r+0x764>
   21e34:	d9014f17 	ldw	r4,1340(sp)
   21e38:	b00b883a 	mov	r5,r22
   21e3c:	d9800c04 	addi	r6,sp,48
   21e40:	0020f800 	call	20f80 <__sprint_r>
   21e44:	103e1c1e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   21e48:	dc800e17 	ldw	r18,56(sp)
   21e4c:	dc400d17 	ldw	r17,52(sp)
   21e50:	d8c01904 	addi	r3,sp,100
   21e54:	003e2e06 	br	21710 <___vfprintf_internal_r+0x738>
   21e58:	d9414c17 	ldw	r5,1328(sp)
   21e5c:	2880004c 	andi	r2,r5,1
   21e60:	1005003a 	cmpeq	r2,r2,zero
   21e64:	103dda1e 	bne	r2,zero,215d0 <___vfprintf_internal_r+0x5f8>
   21e68:	003e9f06 	br	218e8 <___vfprintf_internal_r+0x910>
   21e6c:	d8c14117 	ldw	r3,1284(sp)
   21e70:	9125883a 	add	r18,r18,r4
   21e74:	8c400044 	addi	r17,r17,1
   21e78:	008001c4 	movi	r2,7
   21e7c:	a8c00015 	stw	r3,0(r21)
   21e80:	a9000115 	stw	r4,4(r21)
   21e84:	dc800e15 	stw	r18,56(sp)
   21e88:	dc400d15 	stw	r17,52(sp)
   21e8c:	14426c16 	blt	r2,r17,22840 <___vfprintf_internal_r+0x1868>
   21e90:	a8c00204 	addi	r3,r21,8
   21e94:	d9414917 	ldw	r5,1316(sp)
   21e98:	00800044 	movi	r2,1
   21e9c:	94800044 	addi	r18,r18,1
   21ea0:	8c400044 	addi	r17,r17,1
   21ea4:	18800115 	stw	r2,4(r3)
   21ea8:	008001c4 	movi	r2,7
   21eac:	19400015 	stw	r5,0(r3)
   21eb0:	dc800e15 	stw	r18,56(sp)
   21eb4:	dc400d15 	stw	r17,52(sp)
   21eb8:	2021883a 	mov	r16,r4
   21ebc:	14425616 	blt	r2,r17,22818 <___vfprintf_internal_r+0x1840>
   21ec0:	19400204 	addi	r5,r3,8
   21ec4:	d9814717 	ldw	r6,1308(sp)
   21ec8:	8c400044 	addi	r17,r17,1
   21ecc:	dc400d15 	stw	r17,52(sp)
   21ed0:	3107c83a 	sub	r3,r6,r4
   21ed4:	d9014117 	ldw	r4,1284(sp)
   21ed8:	90e5883a 	add	r18,r18,r3
   21edc:	28c00115 	stw	r3,4(r5)
   21ee0:	8105883a 	add	r2,r16,r4
   21ee4:	28800015 	stw	r2,0(r5)
   21ee8:	008001c4 	movi	r2,7
   21eec:	dc800e15 	stw	r18,56(sp)
   21ef0:	147f1d16 	blt	r2,r17,21b68 <___vfprintf_internal_r+0xb90>
   21ef4:	28c00204 	addi	r3,r5,8
   21ef8:	003db506 	br	215d0 <___vfprintf_internal_r+0x5f8>
   21efc:	3c000017 	ldw	r16,0(r7)
   21f00:	3c400117 	ldw	r17,4(r7)
   21f04:	39800204 	addi	r6,r7,8
   21f08:	01000044 	movi	r4,1
   21f0c:	d9814015 	stw	r6,1280(sp)
   21f10:	d8000405 	stb	zero,16(sp)
   21f14:	003ebe06 	br	21a10 <___vfprintf_internal_r+0xa38>
   21f18:	3c000017 	ldw	r16,0(r7)
   21f1c:	3c400117 	ldw	r17,4(r7)
   21f20:	38800204 	addi	r2,r7,8
   21f24:	d8814015 	stw	r2,1280(sp)
   21f28:	003eb706 	br	21a08 <___vfprintf_internal_r+0xa30>
   21f2c:	3c000017 	ldw	r16,0(r7)
   21f30:	3c400117 	ldw	r17,4(r7)
   21f34:	39000204 	addi	r4,r7,8
   21f38:	d9014015 	stw	r4,1280(sp)
   21f3c:	0009883a 	mov	r4,zero
   21f40:	d8000405 	stb	zero,16(sp)
   21f44:	003eb206 	br	21a10 <___vfprintf_internal_r+0xa38>
   21f48:	38c00017 	ldw	r3,0(r7)
   21f4c:	39c00104 	addi	r7,r7,4
   21f50:	d8c14a15 	stw	r3,1320(sp)
   21f54:	1800d70e 	bge	r3,zero,222b4 <___vfprintf_internal_r+0x12dc>
   21f58:	00c7c83a 	sub	r3,zero,r3
   21f5c:	d8c14a15 	stw	r3,1320(sp)
   21f60:	d9014c17 	ldw	r4,1328(sp)
   21f64:	b8c00007 	ldb	r3,0(r23)
   21f68:	21000114 	ori	r4,r4,4
   21f6c:	d9014c15 	stw	r4,1328(sp)
   21f70:	003c9806 	br	211d4 <___vfprintf_internal_r+0x1fc>
   21f74:	d9814c17 	ldw	r6,1328(sp)
   21f78:	3080080c 	andi	r2,r6,32
   21f7c:	1001f626 	beq	r2,zero,22758 <___vfprintf_internal_r+0x1780>
   21f80:	d9014b17 	ldw	r4,1324(sp)
   21f84:	38800017 	ldw	r2,0(r7)
   21f88:	39c00104 	addi	r7,r7,4
   21f8c:	d9c14015 	stw	r7,1280(sp)
   21f90:	2007d7fa 	srai	r3,r4,31
   21f94:	d9c14017 	ldw	r7,1280(sp)
   21f98:	11000015 	stw	r4,0(r2)
   21f9c:	10c00115 	stw	r3,4(r2)
   21fa0:	003c6906 	br	21148 <___vfprintf_internal_r+0x170>
   21fa4:	b8c00007 	ldb	r3,0(r23)
   21fa8:	00801b04 	movi	r2,108
   21fac:	18825526 	beq	r3,r2,22904 <___vfprintf_internal_r+0x192c>
   21fb0:	d9414c17 	ldw	r5,1328(sp)
   21fb4:	29400414 	ori	r5,r5,16
   21fb8:	d9414c15 	stw	r5,1328(sp)
   21fbc:	003c8506 	br	211d4 <___vfprintf_internal_r+0x1fc>
   21fc0:	d9814c17 	ldw	r6,1328(sp)
   21fc4:	b8c00007 	ldb	r3,0(r23)
   21fc8:	31800814 	ori	r6,r6,32
   21fcc:	d9814c15 	stw	r6,1328(sp)
   21fd0:	003c8006 	br	211d4 <___vfprintf_internal_r+0x1fc>
   21fd4:	d8814c17 	ldw	r2,1328(sp)
   21fd8:	3c000017 	ldw	r16,0(r7)
   21fdc:	00c01e04 	movi	r3,120
   21fe0:	10800094 	ori	r2,r2,2
   21fe4:	d8814c15 	stw	r2,1328(sp)
   21fe8:	39c00104 	addi	r7,r7,4
   21fec:	014000f4 	movhi	r5,3
   21ff0:	2975c104 	addi	r5,r5,-10492
   21ff4:	00800c04 	movi	r2,48
   21ff8:	0023883a 	mov	r17,zero
   21ffc:	01000084 	movi	r4,2
   22000:	d9c14015 	stw	r7,1280(sp)
   22004:	d8c14d15 	stw	r3,1332(sp)
   22008:	d9414415 	stw	r5,1296(sp)
   2200c:	d8800445 	stb	r2,17(sp)
   22010:	d8c00485 	stb	r3,18(sp)
   22014:	d8000405 	stb	zero,16(sp)
   22018:	003e7d06 	br	21a10 <___vfprintf_internal_r+0xa38>
   2201c:	d8814c17 	ldw	r2,1328(sp)
   22020:	b8c00007 	ldb	r3,0(r23)
   22024:	10801014 	ori	r2,r2,64
   22028:	d8814c15 	stw	r2,1328(sp)
   2202c:	003c6906 	br	211d4 <___vfprintf_internal_r+0x1fc>
   22030:	d9414c17 	ldw	r5,1328(sp)
   22034:	2880020c 	andi	r2,r5,8
   22038:	1001e526 	beq	r2,zero,227d0 <___vfprintf_internal_r+0x17f8>
   2203c:	39800017 	ldw	r6,0(r7)
   22040:	38800204 	addi	r2,r7,8
   22044:	d8814015 	stw	r2,1280(sp)
   22048:	d9814215 	stw	r6,1288(sp)
   2204c:	39c00117 	ldw	r7,4(r7)
   22050:	d9c14315 	stw	r7,1292(sp)
   22054:	d9014217 	ldw	r4,1288(sp)
   22058:	d9414317 	ldw	r5,1292(sp)
   2205c:	0027a8c0 	call	27a8c <__isinfd>
   22060:	10021d26 	beq	r2,zero,228d8 <___vfprintf_internal_r+0x1900>
   22064:	d9014217 	ldw	r4,1288(sp)
   22068:	d9414317 	ldw	r5,1292(sp)
   2206c:	000d883a 	mov	r6,zero
   22070:	000f883a 	mov	r7,zero
   22074:	0029c9c0 	call	29c9c <__ltdf2>
   22078:	1002d016 	blt	r2,zero,22bbc <___vfprintf_internal_r+0x1be4>
   2207c:	d9414d17 	ldw	r5,1332(sp)
   22080:	008011c4 	movi	r2,71
   22084:	11421016 	blt	r2,r5,228c8 <___vfprintf_internal_r+0x18f0>
   22088:	018000f4 	movhi	r6,3
   2208c:	31b5c604 	addi	r6,r6,-10472
   22090:	d9814115 	stw	r6,1284(sp)
   22094:	d9014c17 	ldw	r4,1328(sp)
   22098:	00c000c4 	movi	r3,3
   2209c:	00bfdfc4 	movi	r2,-129
   220a0:	2088703a 	and	r4,r4,r2
   220a4:	180f883a 	mov	r7,r3
   220a8:	d8c14515 	stw	r3,1300(sp)
   220ac:	d9014c15 	stw	r4,1328(sp)
   220b0:	d8014615 	stw	zero,1304(sp)
   220b4:	003e6a06 	br	21a60 <___vfprintf_internal_r+0xa88>
   220b8:	38800017 	ldw	r2,0(r7)
   220bc:	00c00044 	movi	r3,1
   220c0:	39c00104 	addi	r7,r7,4
   220c4:	d9c14015 	stw	r7,1280(sp)
   220c8:	d9000f04 	addi	r4,sp,60
   220cc:	180f883a 	mov	r7,r3
   220d0:	d8c14515 	stw	r3,1300(sp)
   220d4:	d9014115 	stw	r4,1284(sp)
   220d8:	d8800f05 	stb	r2,60(sp)
   220dc:	d8000405 	stb	zero,16(sp)
   220e0:	003cac06 	br	21394 <___vfprintf_internal_r+0x3bc>
   220e4:	014000f4 	movhi	r5,3
   220e8:	2975cc04 	addi	r5,r5,-10448
   220ec:	d9414415 	stw	r5,1296(sp)
   220f0:	d9814c17 	ldw	r6,1328(sp)
   220f4:	3080080c 	andi	r2,r6,32
   220f8:	1000ff26 	beq	r2,zero,224f8 <___vfprintf_internal_r+0x1520>
   220fc:	3c000017 	ldw	r16,0(r7)
   22100:	3c400117 	ldw	r17,4(r7)
   22104:	38800204 	addi	r2,r7,8
   22108:	d8814015 	stw	r2,1280(sp)
   2210c:	d9414c17 	ldw	r5,1328(sp)
   22110:	2880004c 	andi	r2,r5,1
   22114:	1005003a 	cmpeq	r2,r2,zero
   22118:	1000b91e 	bne	r2,zero,22400 <___vfprintf_internal_r+0x1428>
   2211c:	8444b03a 	or	r2,r16,r17
   22120:	1000b726 	beq	r2,zero,22400 <___vfprintf_internal_r+0x1428>
   22124:	d9814d17 	ldw	r6,1332(sp)
   22128:	29400094 	ori	r5,r5,2
   2212c:	00800c04 	movi	r2,48
   22130:	01000084 	movi	r4,2
   22134:	d9414c15 	stw	r5,1328(sp)
   22138:	d8800445 	stb	r2,17(sp)
   2213c:	d9800485 	stb	r6,18(sp)
   22140:	d8000405 	stb	zero,16(sp)
   22144:	003e3206 	br	21a10 <___vfprintf_internal_r+0xa38>
   22148:	018000f4 	movhi	r6,3
   2214c:	31b5c104 	addi	r6,r6,-10492
   22150:	d9814415 	stw	r6,1296(sp)
   22154:	003fe606 	br	220f0 <___vfprintf_internal_r+0x1118>
   22158:	00800ac4 	movi	r2,43
   2215c:	d8800405 	stb	r2,16(sp)
   22160:	b8c00007 	ldb	r3,0(r23)
   22164:	003c1b06 	br	211d4 <___vfprintf_internal_r+0x1fc>
   22168:	d8814c17 	ldw	r2,1328(sp)
   2216c:	b8c00007 	ldb	r3,0(r23)
   22170:	10800054 	ori	r2,r2,1
   22174:	d8814c15 	stw	r2,1328(sp)
   22178:	003c1606 	br	211d4 <___vfprintf_internal_r+0x1fc>
   2217c:	d8800407 	ldb	r2,16(sp)
   22180:	10004c1e 	bne	r2,zero,222b4 <___vfprintf_internal_r+0x12dc>
   22184:	00800804 	movi	r2,32
   22188:	d8800405 	stb	r2,16(sp)
   2218c:	b8c00007 	ldb	r3,0(r23)
   22190:	003c1006 	br	211d4 <___vfprintf_internal_r+0x1fc>
   22194:	d9814c17 	ldw	r6,1328(sp)
   22198:	b8c00007 	ldb	r3,0(r23)
   2219c:	31800214 	ori	r6,r6,8
   221a0:	d9814c15 	stw	r6,1328(sp)
   221a4:	003c0b06 	br	211d4 <___vfprintf_internal_r+0x1fc>
   221a8:	0009883a 	mov	r4,zero
   221ac:	04000244 	movi	r16,9
   221b0:	01400284 	movi	r5,10
   221b4:	d9c15115 	stw	r7,1348(sp)
   221b8:	002a1d40 	call	2a1d4 <__mulsi3>
   221bc:	b9000007 	ldb	r4,0(r23)
   221c0:	d8c14d17 	ldw	r3,1332(sp)
   221c4:	bdc00044 	addi	r23,r23,1
   221c8:	d9014d15 	stw	r4,1332(sp)
   221cc:	d9414d17 	ldw	r5,1332(sp)
   221d0:	1885883a 	add	r2,r3,r2
   221d4:	113ff404 	addi	r4,r2,-48
   221d8:	28bff404 	addi	r2,r5,-48
   221dc:	d9c15117 	ldw	r7,1348(sp)
   221e0:	80bff32e 	bgeu	r16,r2,221b0 <___vfprintf_internal_r+0x11d8>
   221e4:	d9014a15 	stw	r4,1320(sp)
   221e8:	003bfc06 	br	211dc <___vfprintf_internal_r+0x204>
   221ec:	d8814c17 	ldw	r2,1328(sp)
   221f0:	b8c00007 	ldb	r3,0(r23)
   221f4:	10802014 	ori	r2,r2,128
   221f8:	d8814c15 	stw	r2,1328(sp)
   221fc:	003bf506 	br	211d4 <___vfprintf_internal_r+0x1fc>
   22200:	b8c00007 	ldb	r3,0(r23)
   22204:	00800a84 	movi	r2,42
   22208:	bdc00044 	addi	r23,r23,1
   2220c:	18831826 	beq	r3,r2,22e70 <___vfprintf_internal_r+0x1e98>
   22210:	d8c14d15 	stw	r3,1332(sp)
   22214:	18bff404 	addi	r2,r3,-48
   22218:	00c00244 	movi	r3,9
   2221c:	18827b36 	bltu	r3,r2,22c0c <___vfprintf_internal_r+0x1c34>
   22220:	1821883a 	mov	r16,r3
   22224:	0009883a 	mov	r4,zero
   22228:	01400284 	movi	r5,10
   2222c:	d9c15115 	stw	r7,1348(sp)
   22230:	002a1d40 	call	2a1d4 <__mulsi3>
   22234:	d9414d17 	ldw	r5,1332(sp)
   22238:	b9800007 	ldb	r6,0(r23)
   2223c:	d9c15117 	ldw	r7,1348(sp)
   22240:	1145883a 	add	r2,r2,r5
   22244:	113ff404 	addi	r4,r2,-48
   22248:	30bff404 	addi	r2,r6,-48
   2224c:	d9814d15 	stw	r6,1332(sp)
   22250:	bdc00044 	addi	r23,r23,1
   22254:	80bff42e 	bgeu	r16,r2,22228 <___vfprintf_internal_r+0x1250>
   22258:	2027883a 	mov	r19,r4
   2225c:	203bdf0e 	bge	r4,zero,211dc <___vfprintf_internal_r+0x204>
   22260:	04ffffc4 	movi	r19,-1
   22264:	003bdd06 	br	211dc <___vfprintf_internal_r+0x204>
   22268:	d8000405 	stb	zero,16(sp)
   2226c:	39800017 	ldw	r6,0(r7)
   22270:	39c00104 	addi	r7,r7,4
   22274:	d9c14015 	stw	r7,1280(sp)
   22278:	d9814115 	stw	r6,1284(sp)
   2227c:	3001c926 	beq	r6,zero,229a4 <___vfprintf_internal_r+0x19cc>
   22280:	98000e16 	blt	r19,zero,222bc <___vfprintf_internal_r+0x12e4>
   22284:	d9014117 	ldw	r4,1284(sp)
   22288:	000b883a 	mov	r5,zero
   2228c:	980d883a 	mov	r6,r19
   22290:	00261100 	call	26110 <memchr>
   22294:	10025926 	beq	r2,zero,22bfc <___vfprintf_internal_r+0x1c24>
   22298:	d8c14117 	ldw	r3,1284(sp)
   2229c:	10cfc83a 	sub	r7,r2,r3
   222a0:	99c19e16 	blt	r19,r7,2291c <___vfprintf_internal_r+0x1944>
   222a4:	d9c14515 	stw	r7,1300(sp)
   222a8:	38000916 	blt	r7,zero,222d0 <___vfprintf_internal_r+0x12f8>
   222ac:	d8014615 	stw	zero,1304(sp)
   222b0:	003deb06 	br	21a60 <___vfprintf_internal_r+0xa88>
   222b4:	b8c00007 	ldb	r3,0(r23)
   222b8:	003bc606 	br	211d4 <___vfprintf_internal_r+0x1fc>
   222bc:	d9014117 	ldw	r4,1284(sp)
   222c0:	0027d740 	call	27d74 <strlen>
   222c4:	d8814515 	stw	r2,1300(sp)
   222c8:	100f883a 	mov	r7,r2
   222cc:	103ff70e 	bge	r2,zero,222ac <___vfprintf_internal_r+0x12d4>
   222d0:	d8014515 	stw	zero,1300(sp)
   222d4:	d8014615 	stw	zero,1304(sp)
   222d8:	003de106 	br	21a60 <___vfprintf_internal_r+0xa88>
   222dc:	20c03fcc 	andi	r3,r4,255
   222e0:	00800044 	movi	r2,1
   222e4:	18802d26 	beq	r3,r2,2239c <___vfprintf_internal_r+0x13c4>
   222e8:	18800e36 	bltu	r3,r2,22324 <___vfprintf_internal_r+0x134c>
   222ec:	00800084 	movi	r2,2
   222f0:	1880fa26 	beq	r3,r2,226dc <___vfprintf_internal_r+0x1704>
   222f4:	010000f4 	movhi	r4,3
   222f8:	2135d104 	addi	r4,r4,-10428
   222fc:	0027d740 	call	27d74 <strlen>
   22300:	100f883a 	mov	r7,r2
   22304:	dcc14515 	stw	r19,1300(sp)
   22308:	9880010e 	bge	r19,r2,22310 <___vfprintf_internal_r+0x1338>
   2230c:	d8814515 	stw	r2,1300(sp)
   22310:	008000f4 	movhi	r2,3
   22314:	10b5d104 	addi	r2,r2,-10428
   22318:	dcc14615 	stw	r19,1304(sp)
   2231c:	d8814115 	stw	r2,1284(sp)
   22320:	003dcf06 	br	21a60 <___vfprintf_internal_r+0xa88>
   22324:	d9401904 	addi	r5,sp,100
   22328:	dd000f04 	addi	r20,sp,60
   2232c:	d9414115 	stw	r5,1284(sp)
   22330:	880a977a 	slli	r5,r17,29
   22334:	d9814117 	ldw	r6,1284(sp)
   22338:	8004d0fa 	srli	r2,r16,3
   2233c:	8806d0fa 	srli	r3,r17,3
   22340:	810001cc 	andi	r4,r16,7
   22344:	2884b03a 	or	r2,r5,r2
   22348:	31bfffc4 	addi	r6,r6,-1
   2234c:	21000c04 	addi	r4,r4,48
   22350:	d9814115 	stw	r6,1284(sp)
   22354:	10cab03a 	or	r5,r2,r3
   22358:	31000005 	stb	r4,0(r6)
   2235c:	1021883a 	mov	r16,r2
   22360:	1823883a 	mov	r17,r3
   22364:	283ff21e 	bne	r5,zero,22330 <___vfprintf_internal_r+0x1358>
   22368:	d8c14c17 	ldw	r3,1328(sp)
   2236c:	1880004c 	andi	r2,r3,1
   22370:	1005003a 	cmpeq	r2,r2,zero
   22374:	103db31e 	bne	r2,zero,21a44 <___vfprintf_internal_r+0xa6c>
   22378:	20803fcc 	andi	r2,r4,255
   2237c:	1080201c 	xori	r2,r2,128
   22380:	10bfe004 	addi	r2,r2,-128
   22384:	00c00c04 	movi	r3,48
   22388:	10fdae26 	beq	r2,r3,21a44 <___vfprintf_internal_r+0xa6c>
   2238c:	31bfffc4 	addi	r6,r6,-1
   22390:	d9814115 	stw	r6,1284(sp)
   22394:	30c00005 	stb	r3,0(r6)
   22398:	003daa06 	br	21a44 <___vfprintf_internal_r+0xa6c>
   2239c:	88800068 	cmpgeui	r2,r17,1
   223a0:	10002c1e 	bne	r2,zero,22454 <___vfprintf_internal_r+0x147c>
   223a4:	8800021e 	bne	r17,zero,223b0 <___vfprintf_internal_r+0x13d8>
   223a8:	00800244 	movi	r2,9
   223ac:	14002936 	bltu	r2,r16,22454 <___vfprintf_internal_r+0x147c>
   223b0:	d90018c4 	addi	r4,sp,99
   223b4:	dd000f04 	addi	r20,sp,60
   223b8:	d9014115 	stw	r4,1284(sp)
   223bc:	d9014117 	ldw	r4,1284(sp)
   223c0:	80800c04 	addi	r2,r16,48
   223c4:	20800005 	stb	r2,0(r4)
   223c8:	003d9e06 	br	21a44 <___vfprintf_internal_r+0xa6c>
   223cc:	dc400d17 	ldw	r17,52(sp)
   223d0:	070000f4 	movhi	fp,3
   223d4:	e735d884 	addi	fp,fp,-10398
   223d8:	9425883a 	add	r18,r18,r16
   223dc:	8c400044 	addi	r17,r17,1
   223e0:	008001c4 	movi	r2,7
   223e4:	1f000015 	stw	fp,0(r3)
   223e8:	1c000115 	stw	r16,4(r3)
   223ec:	dc800e15 	stw	r18,56(sp)
   223f0:	dc400d15 	stw	r17,52(sp)
   223f4:	147ddc16 	blt	r2,r17,21b68 <___vfprintf_internal_r+0xb90>
   223f8:	18c00204 	addi	r3,r3,8
   223fc:	003c7406 	br	215d0 <___vfprintf_internal_r+0x5f8>
   22400:	01000084 	movi	r4,2
   22404:	d8000405 	stb	zero,16(sp)
   22408:	003d8106 	br	21a10 <___vfprintf_internal_r+0xa38>
   2240c:	d9814c17 	ldw	r6,1328(sp)
   22410:	30c4703a 	and	r2,r6,r3
   22414:	1005003a 	cmpeq	r2,r2,zero
   22418:	103cb326 	beq	r2,zero,216e8 <___vfprintf_internal_r+0x710>
   2241c:	d9014117 	ldw	r4,1284(sp)
   22420:	94800044 	addi	r18,r18,1
   22424:	8c400044 	addi	r17,r17,1
   22428:	008001c4 	movi	r2,7
   2242c:	a9000015 	stw	r4,0(r21)
   22430:	a8c00115 	stw	r3,4(r21)
   22434:	dc800e15 	stw	r18,56(sp)
   22438:	dc400d15 	stw	r17,52(sp)
   2243c:	147e6016 	blt	r2,r17,21dc0 <___vfprintf_internal_r+0xde8>
   22440:	acc00204 	addi	r19,r21,8
   22444:	003cd106 	br	2178c <___vfprintf_internal_r+0x7b4>
   22448:	070000f4 	movhi	fp,3
   2244c:	e735d884 	addi	fp,fp,-10398
   22450:	003c4906 	br	21578 <___vfprintf_internal_r+0x5a0>
   22454:	dd000f04 	addi	r20,sp,60
   22458:	dc801904 	addi	r18,sp,100
   2245c:	8009883a 	mov	r4,r16
   22460:	880b883a 	mov	r5,r17
   22464:	01800284 	movi	r6,10
   22468:	000f883a 	mov	r7,zero
   2246c:	00288fc0 	call	288fc <__umoddi3>
   22470:	12000c04 	addi	r8,r2,48
   22474:	94bfffc4 	addi	r18,r18,-1
   22478:	8009883a 	mov	r4,r16
   2247c:	880b883a 	mov	r5,r17
   22480:	01800284 	movi	r6,10
   22484:	000f883a 	mov	r7,zero
   22488:	92000005 	stb	r8,0(r18)
   2248c:	00282900 	call	28290 <__udivdi3>
   22490:	1009883a 	mov	r4,r2
   22494:	1021883a 	mov	r16,r2
   22498:	18800068 	cmpgeui	r2,r3,1
   2249c:	1823883a 	mov	r17,r3
   224a0:	103fee1e 	bne	r2,zero,2245c <___vfprintf_internal_r+0x1484>
   224a4:	1800021e 	bne	r3,zero,224b0 <___vfprintf_internal_r+0x14d8>
   224a8:	00800244 	movi	r2,9
   224ac:	113feb36 	bltu	r2,r4,2245c <___vfprintf_internal_r+0x1484>
   224b0:	94bfffc4 	addi	r18,r18,-1
   224b4:	dc814115 	stw	r18,1284(sp)
   224b8:	003fc006 	br	223bc <___vfprintf_internal_r+0x13e4>
   224bc:	d9014c17 	ldw	r4,1328(sp)
   224c0:	2080004c 	andi	r2,r4,1
   224c4:	10009a1e 	bne	r2,zero,22730 <___vfprintf_internal_r+0x1758>
   224c8:	d9401904 	addi	r5,sp,100
   224cc:	dd000f04 	addi	r20,sp,60
   224d0:	d9414115 	stw	r5,1284(sp)
   224d4:	003d5b06 	br	21a44 <___vfprintf_internal_r+0xa6c>
   224d8:	d9014f17 	ldw	r4,1340(sp)
   224dc:	b00b883a 	mov	r5,r22
   224e0:	d9800c04 	addi	r6,sp,48
   224e4:	0020f800 	call	20f80 <__sprint_r>
   224e8:	103c731e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   224ec:	dc800e17 	ldw	r18,56(sp)
   224f0:	d8c01904 	addi	r3,sp,100
   224f4:	003cf906 	br	218dc <___vfprintf_internal_r+0x904>
   224f8:	d8c14c17 	ldw	r3,1328(sp)
   224fc:	1880040c 	andi	r2,r3,16
   22500:	1000711e 	bne	r2,zero,226c8 <___vfprintf_internal_r+0x16f0>
   22504:	d9014c17 	ldw	r4,1328(sp)
   22508:	2080100c 	andi	r2,r4,64
   2250c:	10006e26 	beq	r2,zero,226c8 <___vfprintf_internal_r+0x16f0>
   22510:	3c00000b 	ldhu	r16,0(r7)
   22514:	0023883a 	mov	r17,zero
   22518:	39c00104 	addi	r7,r7,4
   2251c:	d9c14015 	stw	r7,1280(sp)
   22520:	003efa06 	br	2210c <___vfprintf_internal_r+0x1134>
   22524:	dc400d17 	ldw	r17,52(sp)
   22528:	070000f4 	movhi	fp,3
   2252c:	e735d884 	addi	fp,fp,-10398
   22530:	9425883a 	add	r18,r18,r16
   22534:	8c400044 	addi	r17,r17,1
   22538:	008001c4 	movi	r2,7
   2253c:	1f000015 	stw	fp,0(r3)
   22540:	1c000115 	stw	r16,4(r3)
   22544:	dc800e15 	stw	r18,56(sp)
   22548:	dc400d15 	stw	r17,52(sp)
   2254c:	147d7016 	blt	r2,r17,21b10 <___vfprintf_internal_r+0xb38>
   22550:	18c00204 	addi	r3,r3,8
   22554:	003d7506 	br	21b2c <___vfprintf_internal_r+0xb54>
   22558:	dc800e17 	ldw	r18,56(sp)
   2255c:	dc400d17 	ldw	r17,52(sp)
   22560:	070000f4 	movhi	fp,3
   22564:	e735dc84 	addi	fp,fp,-10382
   22568:	003bba06 	br	21454 <___vfprintf_internal_r+0x47c>
   2256c:	d9014f17 	ldw	r4,1340(sp)
   22570:	b00b883a 	mov	r5,r22
   22574:	d9800c04 	addi	r6,sp,48
   22578:	0020f800 	call	20f80 <__sprint_r>
   2257c:	103c4e1e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   22580:	dc800e17 	ldw	r18,56(sp)
   22584:	d8c01904 	addi	r3,sp,100
   22588:	003ce306 	br	21918 <___vfprintf_internal_r+0x940>
   2258c:	3c000017 	ldw	r16,0(r7)
   22590:	0009883a 	mov	r4,zero
   22594:	39c00104 	addi	r7,r7,4
   22598:	0023883a 	mov	r17,zero
   2259c:	d9c14015 	stw	r7,1280(sp)
   225a0:	d8000405 	stb	zero,16(sp)
   225a4:	003d1a06 	br	21a10 <___vfprintf_internal_r+0xa38>
   225a8:	38800017 	ldw	r2,0(r7)
   225ac:	39c00104 	addi	r7,r7,4
   225b0:	d9c14015 	stw	r7,1280(sp)
   225b4:	1023d7fa 	srai	r17,r2,31
   225b8:	1021883a 	mov	r16,r2
   225bc:	003d1206 	br	21a08 <___vfprintf_internal_r+0xa30>
   225c0:	3c000017 	ldw	r16,0(r7)
   225c4:	01000044 	movi	r4,1
   225c8:	39c00104 	addi	r7,r7,4
   225cc:	0023883a 	mov	r17,zero
   225d0:	d9c14015 	stw	r7,1280(sp)
   225d4:	d8000405 	stb	zero,16(sp)
   225d8:	003d0d06 	br	21a10 <___vfprintf_internal_r+0xa38>
   225dc:	008000f4 	movhi	r2,3
   225e0:	10b5d804 	addi	r2,r2,-10400
   225e4:	94800044 	addi	r18,r18,1
   225e8:	8c400044 	addi	r17,r17,1
   225ec:	a8800015 	stw	r2,0(r21)
   225f0:	00c00044 	movi	r3,1
   225f4:	008001c4 	movi	r2,7
   225f8:	a8c00115 	stw	r3,4(r21)
   225fc:	dc800e15 	stw	r18,56(sp)
   22600:	dc400d15 	stw	r17,52(sp)
   22604:	1440ca16 	blt	r2,r17,22930 <___vfprintf_internal_r+0x1958>
   22608:	a8c00204 	addi	r3,r21,8
   2260c:	2000061e 	bne	r4,zero,22628 <___vfprintf_internal_r+0x1650>
   22610:	d9414717 	ldw	r5,1308(sp)
   22614:	2800041e 	bne	r5,zero,22628 <___vfprintf_internal_r+0x1650>
   22618:	d9814c17 	ldw	r6,1328(sp)
   2261c:	3080004c 	andi	r2,r6,1
   22620:	1005003a 	cmpeq	r2,r2,zero
   22624:	103bea1e 	bne	r2,zero,215d0 <___vfprintf_internal_r+0x5f8>
   22628:	00800044 	movi	r2,1
   2262c:	dc400d17 	ldw	r17,52(sp)
   22630:	18800115 	stw	r2,4(r3)
   22634:	d8814917 	ldw	r2,1316(sp)
   22638:	94800044 	addi	r18,r18,1
   2263c:	8c400044 	addi	r17,r17,1
   22640:	18800015 	stw	r2,0(r3)
   22644:	008001c4 	movi	r2,7
   22648:	dc800e15 	stw	r18,56(sp)
   2264c:	dc400d15 	stw	r17,52(sp)
   22650:	1440ca16 	blt	r2,r17,2297c <___vfprintf_internal_r+0x19a4>
   22654:	18c00204 	addi	r3,r3,8
   22658:	0121c83a 	sub	r16,zero,r4
   2265c:	0400500e 	bge	zero,r16,227a0 <___vfprintf_internal_r+0x17c8>
   22660:	00800404 	movi	r2,16
   22664:	1400800e 	bge	r2,r16,22868 <___vfprintf_internal_r+0x1890>
   22668:	1027883a 	mov	r19,r2
   2266c:	070000f4 	movhi	fp,3
   22670:	e735d884 	addi	fp,fp,-10398
   22674:	050001c4 	movi	r20,7
   22678:	00000306 	br	22688 <___vfprintf_internal_r+0x16b0>
   2267c:	18c00204 	addi	r3,r3,8
   22680:	843ffc04 	addi	r16,r16,-16
   22684:	9c007a0e 	bge	r19,r16,22870 <___vfprintf_internal_r+0x1898>
   22688:	94800404 	addi	r18,r18,16
   2268c:	8c400044 	addi	r17,r17,1
   22690:	1f000015 	stw	fp,0(r3)
   22694:	1cc00115 	stw	r19,4(r3)
   22698:	dc800e15 	stw	r18,56(sp)
   2269c:	dc400d15 	stw	r17,52(sp)
   226a0:	a47ff60e 	bge	r20,r17,2267c <___vfprintf_internal_r+0x16a4>
   226a4:	d9014f17 	ldw	r4,1340(sp)
   226a8:	b00b883a 	mov	r5,r22
   226ac:	d9800c04 	addi	r6,sp,48
   226b0:	0020f800 	call	20f80 <__sprint_r>
   226b4:	103c001e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   226b8:	dc800e17 	ldw	r18,56(sp)
   226bc:	dc400d17 	ldw	r17,52(sp)
   226c0:	d8c01904 	addi	r3,sp,100
   226c4:	003fee06 	br	22680 <___vfprintf_internal_r+0x16a8>
   226c8:	3c000017 	ldw	r16,0(r7)
   226cc:	0023883a 	mov	r17,zero
   226d0:	39c00104 	addi	r7,r7,4
   226d4:	d9c14015 	stw	r7,1280(sp)
   226d8:	003e8c06 	br	2210c <___vfprintf_internal_r+0x1134>
   226dc:	d9401904 	addi	r5,sp,100
   226e0:	dd000f04 	addi	r20,sp,60
   226e4:	d9414115 	stw	r5,1284(sp)
   226e8:	d9814417 	ldw	r6,1296(sp)
   226ec:	880a973a 	slli	r5,r17,28
   226f0:	8004d13a 	srli	r2,r16,4
   226f4:	810003cc 	andi	r4,r16,15
   226f8:	3109883a 	add	r4,r6,r4
   226fc:	2884b03a 	or	r2,r5,r2
   22700:	21400003 	ldbu	r5,0(r4)
   22704:	d9014117 	ldw	r4,1284(sp)
   22708:	8806d13a 	srli	r3,r17,4
   2270c:	1021883a 	mov	r16,r2
   22710:	213fffc4 	addi	r4,r4,-1
   22714:	d9014115 	stw	r4,1284(sp)
   22718:	d9814117 	ldw	r6,1284(sp)
   2271c:	10c8b03a 	or	r4,r2,r3
   22720:	1823883a 	mov	r17,r3
   22724:	31400005 	stb	r5,0(r6)
   22728:	203fef1e 	bne	r4,zero,226e8 <___vfprintf_internal_r+0x1710>
   2272c:	003cc506 	br	21a44 <___vfprintf_internal_r+0xa6c>
   22730:	00800c04 	movi	r2,48
   22734:	d98018c4 	addi	r6,sp,99
   22738:	dd000f04 	addi	r20,sp,60
   2273c:	d88018c5 	stb	r2,99(sp)
   22740:	d9814115 	stw	r6,1284(sp)
   22744:	003cbf06 	br	21a44 <___vfprintf_internal_r+0xa6c>
   22748:	dc400d17 	ldw	r17,52(sp)
   2274c:	070000f4 	movhi	fp,3
   22750:	e735dc84 	addi	fp,fp,-10382
   22754:	003bc106 	br	2165c <___vfprintf_internal_r+0x684>
   22758:	d9414c17 	ldw	r5,1328(sp)
   2275c:	2880040c 	andi	r2,r5,16
   22760:	10007c26 	beq	r2,zero,22954 <___vfprintf_internal_r+0x197c>
   22764:	38800017 	ldw	r2,0(r7)
   22768:	39c00104 	addi	r7,r7,4
   2276c:	d9c14015 	stw	r7,1280(sp)
   22770:	d9814b17 	ldw	r6,1324(sp)
   22774:	d9c14017 	ldw	r7,1280(sp)
   22778:	11800015 	stw	r6,0(r2)
   2277c:	003a7206 	br	21148 <___vfprintf_internal_r+0x170>
   22780:	d9014f17 	ldw	r4,1340(sp)
   22784:	b00b883a 	mov	r5,r22
   22788:	d9800c04 	addi	r6,sp,48
   2278c:	0020f800 	call	20f80 <__sprint_r>
   22790:	103bc91e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   22794:	dc800e17 	ldw	r18,56(sp)
   22798:	dc400d17 	ldw	r17,52(sp)
   2279c:	d8c01904 	addi	r3,sp,100
   227a0:	d9014717 	ldw	r4,1308(sp)
   227a4:	d9414117 	ldw	r5,1284(sp)
   227a8:	8c400044 	addi	r17,r17,1
   227ac:	9125883a 	add	r18,r18,r4
   227b0:	008001c4 	movi	r2,7
   227b4:	19400015 	stw	r5,0(r3)
   227b8:	19000115 	stw	r4,4(r3)
   227bc:	dc800e15 	stw	r18,56(sp)
   227c0:	dc400d15 	stw	r17,52(sp)
   227c4:	147ce816 	blt	r2,r17,21b68 <___vfprintf_internal_r+0xb90>
   227c8:	18c00204 	addi	r3,r3,8
   227cc:	003b8006 	br	215d0 <___vfprintf_internal_r+0x5f8>
   227d0:	38c00017 	ldw	r3,0(r7)
   227d4:	39000204 	addi	r4,r7,8
   227d8:	d9014015 	stw	r4,1280(sp)
   227dc:	d8c14215 	stw	r3,1288(sp)
   227e0:	39c00117 	ldw	r7,4(r7)
   227e4:	d9c14315 	stw	r7,1292(sp)
   227e8:	003e1a06 	br	22054 <___vfprintf_internal_r+0x107c>
   227ec:	0005883a 	mov	r2,zero
   227f0:	1409c83a 	sub	r4,r2,r16
   227f4:	1105803a 	cmpltu	r2,r2,r4
   227f8:	044bc83a 	sub	r5,zero,r17
   227fc:	2885c83a 	sub	r2,r5,r2
   22800:	2021883a 	mov	r16,r4
   22804:	1023883a 	mov	r17,r2
   22808:	01000044 	movi	r4,1
   2280c:	00800b44 	movi	r2,45
   22810:	d8800405 	stb	r2,16(sp)
   22814:	003c7e06 	br	21a10 <___vfprintf_internal_r+0xa38>
   22818:	d9014f17 	ldw	r4,1340(sp)
   2281c:	b00b883a 	mov	r5,r22
   22820:	d9800c04 	addi	r6,sp,48
   22824:	0020f800 	call	20f80 <__sprint_r>
   22828:	103ba31e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   2282c:	dc800e17 	ldw	r18,56(sp)
   22830:	dc400d17 	ldw	r17,52(sp)
   22834:	d9000517 	ldw	r4,20(sp)
   22838:	d9401904 	addi	r5,sp,100
   2283c:	003da106 	br	21ec4 <___vfprintf_internal_r+0xeec>
   22840:	d9014f17 	ldw	r4,1340(sp)
   22844:	b00b883a 	mov	r5,r22
   22848:	d9800c04 	addi	r6,sp,48
   2284c:	0020f800 	call	20f80 <__sprint_r>
   22850:	103b991e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   22854:	dc800e17 	ldw	r18,56(sp)
   22858:	dc400d17 	ldw	r17,52(sp)
   2285c:	d9000517 	ldw	r4,20(sp)
   22860:	d8c01904 	addi	r3,sp,100
   22864:	003d8b06 	br	21e94 <___vfprintf_internal_r+0xebc>
   22868:	070000f4 	movhi	fp,3
   2286c:	e735d884 	addi	fp,fp,-10398
   22870:	9425883a 	add	r18,r18,r16
   22874:	8c400044 	addi	r17,r17,1
   22878:	008001c4 	movi	r2,7
   2287c:	1f000015 	stw	fp,0(r3)
   22880:	1c000115 	stw	r16,4(r3)
   22884:	dc800e15 	stw	r18,56(sp)
   22888:	dc400d15 	stw	r17,52(sp)
   2288c:	147fbc16 	blt	r2,r17,22780 <___vfprintf_internal_r+0x17a8>
   22890:	18c00204 	addi	r3,r3,8
   22894:	003fc206 	br	227a0 <___vfprintf_internal_r+0x17c8>
   22898:	d9014f17 	ldw	r4,1340(sp)
   2289c:	b00b883a 	mov	r5,r22
   228a0:	d9800c04 	addi	r6,sp,48
   228a4:	0020f800 	call	20f80 <__sprint_r>
   228a8:	103b831e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   228ac:	dc800e17 	ldw	r18,56(sp)
   228b0:	d9000517 	ldw	r4,20(sp)
   228b4:	d8c01904 	addi	r3,sp,100
   228b8:	003cfc06 	br	21cac <___vfprintf_internal_r+0xcd4>
   228bc:	070000f4 	movhi	fp,3
   228c0:	e735d884 	addi	fp,fp,-10398
   228c4:	003bde06 	br	21840 <___vfprintf_internal_r+0x868>
   228c8:	008000f4 	movhi	r2,3
   228cc:	10b5c704 	addi	r2,r2,-10468
   228d0:	d8814115 	stw	r2,1284(sp)
   228d4:	003def06 	br	22094 <___vfprintf_internal_r+0x10bc>
   228d8:	d9014217 	ldw	r4,1288(sp)
   228dc:	d9414317 	ldw	r5,1292(sp)
   228e0:	0027acc0 	call	27acc <__isnand>
   228e4:	10003926 	beq	r2,zero,229cc <___vfprintf_internal_r+0x19f4>
   228e8:	d9414d17 	ldw	r5,1332(sp)
   228ec:	008011c4 	movi	r2,71
   228f0:	1140ce16 	blt	r2,r5,22c2c <___vfprintf_internal_r+0x1c54>
   228f4:	018000f4 	movhi	r6,3
   228f8:	31b5c804 	addi	r6,r6,-10464
   228fc:	d9814115 	stw	r6,1284(sp)
   22900:	003de406 	br	22094 <___vfprintf_internal_r+0x10bc>
   22904:	d9014c17 	ldw	r4,1328(sp)
   22908:	bdc00044 	addi	r23,r23,1
   2290c:	b8c00007 	ldb	r3,0(r23)
   22910:	21000814 	ori	r4,r4,32
   22914:	d9014c15 	stw	r4,1328(sp)
   22918:	003a2e06 	br	211d4 <___vfprintf_internal_r+0x1fc>
   2291c:	dcc14515 	stw	r19,1300(sp)
   22920:	98011016 	blt	r19,zero,22d64 <___vfprintf_internal_r+0x1d8c>
   22924:	980f883a 	mov	r7,r19
   22928:	d8014615 	stw	zero,1304(sp)
   2292c:	003c4c06 	br	21a60 <___vfprintf_internal_r+0xa88>
   22930:	d9014f17 	ldw	r4,1340(sp)
   22934:	b00b883a 	mov	r5,r22
   22938:	d9800c04 	addi	r6,sp,48
   2293c:	0020f800 	call	20f80 <__sprint_r>
   22940:	103b5d1e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   22944:	dc800e17 	ldw	r18,56(sp)
   22948:	d9000517 	ldw	r4,20(sp)
   2294c:	d8c01904 	addi	r3,sp,100
   22950:	003f2e06 	br	2260c <___vfprintf_internal_r+0x1634>
   22954:	d8c14c17 	ldw	r3,1328(sp)
   22958:	1880100c 	andi	r2,r3,64
   2295c:	1000a026 	beq	r2,zero,22be0 <___vfprintf_internal_r+0x1c08>
   22960:	38800017 	ldw	r2,0(r7)
   22964:	39c00104 	addi	r7,r7,4
   22968:	d9c14015 	stw	r7,1280(sp)
   2296c:	d9014b17 	ldw	r4,1324(sp)
   22970:	d9c14017 	ldw	r7,1280(sp)
   22974:	1100000d 	sth	r4,0(r2)
   22978:	0039f306 	br	21148 <___vfprintf_internal_r+0x170>
   2297c:	d9014f17 	ldw	r4,1340(sp)
   22980:	b00b883a 	mov	r5,r22
   22984:	d9800c04 	addi	r6,sp,48
   22988:	0020f800 	call	20f80 <__sprint_r>
   2298c:	103b4a1e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   22990:	dc800e17 	ldw	r18,56(sp)
   22994:	dc400d17 	ldw	r17,52(sp)
   22998:	d9000517 	ldw	r4,20(sp)
   2299c:	d8c01904 	addi	r3,sp,100
   229a0:	003f2d06 	br	22658 <___vfprintf_internal_r+0x1680>
   229a4:	00800184 	movi	r2,6
   229a8:	14c09a36 	bltu	r2,r19,22c14 <___vfprintf_internal_r+0x1c3c>
   229ac:	dcc14515 	stw	r19,1300(sp)
   229b0:	9800010e 	bge	r19,zero,229b8 <___vfprintf_internal_r+0x19e0>
   229b4:	d8014515 	stw	zero,1300(sp)
   229b8:	008000f4 	movhi	r2,3
   229bc:	10b5ca04 	addi	r2,r2,-10456
   229c0:	980f883a 	mov	r7,r19
   229c4:	d8814115 	stw	r2,1284(sp)
   229c8:	003a7206 	br	21394 <___vfprintf_internal_r+0x3bc>
   229cc:	00bfffc4 	movi	r2,-1
   229d0:	9880e226 	beq	r19,r2,22d5c <___vfprintf_internal_r+0x1d84>
   229d4:	d9414d17 	ldw	r5,1332(sp)
   229d8:	008019c4 	movi	r2,103
   229dc:	2880dc26 	beq	r5,r2,22d50 <___vfprintf_internal_r+0x1d78>
   229e0:	008011c4 	movi	r2,71
   229e4:	2880da26 	beq	r5,r2,22d50 <___vfprintf_internal_r+0x1d78>
   229e8:	d9414c17 	ldw	r5,1328(sp)
   229ec:	d9014317 	ldw	r4,1292(sp)
   229f0:	d9814217 	ldw	r6,1288(sp)
   229f4:	29404014 	ori	r5,r5,256
   229f8:	d9414c15 	stw	r5,1328(sp)
   229fc:	2000cc16 	blt	r4,zero,22d30 <___vfprintf_internal_r+0x1d58>
   22a00:	3021883a 	mov	r16,r6
   22a04:	2023883a 	mov	r17,r4
   22a08:	0039883a 	mov	fp,zero
   22a0c:	d9414d17 	ldw	r5,1332(sp)
   22a10:	00801984 	movi	r2,102
   22a14:	2880b726 	beq	r5,r2,22cf4 <___vfprintf_internal_r+0x1d1c>
   22a18:	00801184 	movi	r2,70
   22a1c:	2880b526 	beq	r5,r2,22cf4 <___vfprintf_internal_r+0x1d1c>
   22a20:	00801944 	movi	r2,101
   22a24:	2880c826 	beq	r5,r2,22d48 <___vfprintf_internal_r+0x1d70>
   22a28:	00801144 	movi	r2,69
   22a2c:	2880c626 	beq	r5,r2,22d48 <___vfprintf_internal_r+0x1d70>
   22a30:	9829883a 	mov	r20,r19
   22a34:	d9014f17 	ldw	r4,1340(sp)
   22a38:	d8800504 	addi	r2,sp,20
   22a3c:	880d883a 	mov	r6,r17
   22a40:	d8800115 	stw	r2,4(sp)
   22a44:	d8c00604 	addi	r3,sp,24
   22a48:	d8800704 	addi	r2,sp,28
   22a4c:	800b883a 	mov	r5,r16
   22a50:	01c00084 	movi	r7,2
   22a54:	d8c00215 	stw	r3,8(sp)
   22a58:	d8800315 	stw	r2,12(sp)
   22a5c:	dd000015 	stw	r20,0(sp)
   22a60:	00232440 	call	23244 <_dtoa_r>
   22a64:	d9814d17 	ldw	r6,1332(sp)
   22a68:	d8814115 	stw	r2,1284(sp)
   22a6c:	008019c4 	movi	r2,103
   22a70:	30809526 	beq	r6,r2,22cc8 <___vfprintf_internal_r+0x1cf0>
   22a74:	d8c14d17 	ldw	r3,1332(sp)
   22a78:	008011c4 	movi	r2,71
   22a7c:	18809226 	beq	r3,r2,22cc8 <___vfprintf_internal_r+0x1cf0>
   22a80:	d9414117 	ldw	r5,1284(sp)
   22a84:	d9814d17 	ldw	r6,1332(sp)
   22a88:	00801984 	movi	r2,102
   22a8c:	2d25883a 	add	r18,r5,r20
   22a90:	30808626 	beq	r6,r2,22cac <___vfprintf_internal_r+0x1cd4>
   22a94:	00801184 	movi	r2,70
   22a98:	30808426 	beq	r6,r2,22cac <___vfprintf_internal_r+0x1cd4>
   22a9c:	000d883a 	mov	r6,zero
   22aa0:	000f883a 	mov	r7,zero
   22aa4:	880b883a 	mov	r5,r17
   22aa8:	8009883a 	mov	r4,r16
   22aac:	0029a7c0 	call	29a7c <__eqdf2>
   22ab0:	1000751e 	bne	r2,zero,22c88 <___vfprintf_internal_r+0x1cb0>
   22ab4:	9005883a 	mov	r2,r18
   22ab8:	dc800715 	stw	r18,28(sp)
   22abc:	d9014117 	ldw	r4,1284(sp)
   22ac0:	d9414d17 	ldw	r5,1332(sp)
   22ac4:	00c019c4 	movi	r3,103
   22ac8:	1125c83a 	sub	r18,r2,r4
   22acc:	28c06826 	beq	r5,r3,22c70 <___vfprintf_internal_r+0x1c98>
   22ad0:	008011c4 	movi	r2,71
   22ad4:	28806626 	beq	r5,r2,22c70 <___vfprintf_internal_r+0x1c98>
   22ad8:	d9000517 	ldw	r4,20(sp)
   22adc:	d8c14d17 	ldw	r3,1332(sp)
   22ae0:	00801944 	movi	r2,101
   22ae4:	10c05516 	blt	r2,r3,22c3c <___vfprintf_internal_r+0x1c64>
   22ae8:	213fffc4 	addi	r4,r4,-1
   22aec:	d9000515 	stw	r4,20(sp)
   22af0:	d8c00805 	stb	r3,32(sp)
   22af4:	2021883a 	mov	r16,r4
   22af8:	2000c116 	blt	r4,zero,22e00 <___vfprintf_internal_r+0x1e28>
   22afc:	00800ac4 	movi	r2,43
   22b00:	d8800845 	stb	r2,33(sp)
   22b04:	00800244 	movi	r2,9
   22b08:	1400af0e 	bge	r2,r16,22dc8 <___vfprintf_internal_r+0x1df0>
   22b0c:	1027883a 	mov	r19,r2
   22b10:	dc400b84 	addi	r17,sp,46
   22b14:	8009883a 	mov	r4,r16
   22b18:	01400284 	movi	r5,10
   22b1c:	002a1640 	call	2a164 <__modsi3>
   22b20:	10800c04 	addi	r2,r2,48
   22b24:	8c7fffc4 	addi	r17,r17,-1
   22b28:	8009883a 	mov	r4,r16
   22b2c:	01400284 	movi	r5,10
   22b30:	88800005 	stb	r2,0(r17)
   22b34:	002a1040 	call	2a104 <__divsi3>
   22b38:	1021883a 	mov	r16,r2
   22b3c:	98bff516 	blt	r19,r2,22b14 <___vfprintf_internal_r+0x1b3c>
   22b40:	10c00c04 	addi	r3,r2,48
   22b44:	d88009c4 	addi	r2,sp,39
   22b48:	108001c4 	addi	r2,r2,7
   22b4c:	897fffc4 	addi	r5,r17,-1
   22b50:	88ffffc5 	stb	r3,-1(r17)
   22b54:	2880a72e 	bgeu	r5,r2,22df4 <___vfprintf_internal_r+0x1e1c>
   22b58:	1009883a 	mov	r4,r2
   22b5c:	d9800804 	addi	r6,sp,32
   22b60:	d8c00884 	addi	r3,sp,34
   22b64:	28800003 	ldbu	r2,0(r5)
   22b68:	29400044 	addi	r5,r5,1
   22b6c:	18800005 	stb	r2,0(r3)
   22b70:	18c00044 	addi	r3,r3,1
   22b74:	293ffb36 	bltu	r5,r4,22b64 <___vfprintf_internal_r+0x1b8c>
   22b78:	1987c83a 	sub	r3,r3,r6
   22b7c:	00800044 	movi	r2,1
   22b80:	d8c14815 	stw	r3,1312(sp)
   22b84:	90cf883a 	add	r7,r18,r3
   22b88:	1480960e 	bge	r2,r18,22de4 <___vfprintf_internal_r+0x1e0c>
   22b8c:	39c00044 	addi	r7,r7,1
   22b90:	d9c14515 	stw	r7,1300(sp)
   22b94:	38003416 	blt	r7,zero,22c68 <___vfprintf_internal_r+0x1c90>
   22b98:	e0803fcc 	andi	r2,fp,255
   22b9c:	1080201c 	xori	r2,r2,128
   22ba0:	10bfe004 	addi	r2,r2,-128
   22ba4:	10004e26 	beq	r2,zero,22ce0 <___vfprintf_internal_r+0x1d08>
   22ba8:	00800b44 	movi	r2,45
   22bac:	dc814715 	stw	r18,1308(sp)
   22bb0:	d8014615 	stw	zero,1304(sp)
   22bb4:	d8800405 	stb	r2,16(sp)
   22bb8:	003bab06 	br	21a68 <___vfprintf_internal_r+0xa90>
   22bbc:	00800b44 	movi	r2,45
   22bc0:	d8800405 	stb	r2,16(sp)
   22bc4:	003d2d06 	br	2207c <___vfprintf_internal_r+0x10a4>
   22bc8:	d9014f17 	ldw	r4,1340(sp)
   22bcc:	b00b883a 	mov	r5,r22
   22bd0:	d9800c04 	addi	r6,sp,48
   22bd4:	0020f800 	call	20f80 <__sprint_r>
   22bd8:	103ab71e 	bne	r2,zero,216b8 <___vfprintf_internal_r+0x6e0>
   22bdc:	003ab506 	br	216b4 <___vfprintf_internal_r+0x6dc>
   22be0:	38800017 	ldw	r2,0(r7)
   22be4:	39c00104 	addi	r7,r7,4
   22be8:	d9c14015 	stw	r7,1280(sp)
   22bec:	d9414b17 	ldw	r5,1324(sp)
   22bf0:	d9c14017 	ldw	r7,1280(sp)
   22bf4:	11400015 	stw	r5,0(r2)
   22bf8:	00395306 	br	21148 <___vfprintf_internal_r+0x170>
   22bfc:	980f883a 	mov	r7,r19
   22c00:	dcc14515 	stw	r19,1300(sp)
   22c04:	d8014615 	stw	zero,1304(sp)
   22c08:	003b9506 	br	21a60 <___vfprintf_internal_r+0xa88>
   22c0c:	0027883a 	mov	r19,zero
   22c10:	00397206 	br	211dc <___vfprintf_internal_r+0x204>
   22c14:	00c000f4 	movhi	r3,3
   22c18:	18f5ca04 	addi	r3,r3,-10456
   22c1c:	100f883a 	mov	r7,r2
   22c20:	d8814515 	stw	r2,1300(sp)
   22c24:	d8c14115 	stw	r3,1284(sp)
   22c28:	0039da06 	br	21394 <___vfprintf_internal_r+0x3bc>
   22c2c:	008000f4 	movhi	r2,3
   22c30:	10b5c904 	addi	r2,r2,-10460
   22c34:	d8814115 	stw	r2,1284(sp)
   22c38:	003d1606 	br	22094 <___vfprintf_internal_r+0x10bc>
   22c3c:	d9414d17 	ldw	r5,1332(sp)
   22c40:	00801984 	movi	r2,102
   22c44:	28804926 	beq	r5,r2,22d6c <___vfprintf_internal_r+0x1d94>
   22c48:	200f883a 	mov	r7,r4
   22c4c:	24805716 	blt	r4,r18,22dac <___vfprintf_internal_r+0x1dd4>
   22c50:	d9414c17 	ldw	r5,1328(sp)
   22c54:	2880004c 	andi	r2,r5,1
   22c58:	10000126 	beq	r2,zero,22c60 <___vfprintf_internal_r+0x1c88>
   22c5c:	21c00044 	addi	r7,r4,1
   22c60:	d9c14515 	stw	r7,1300(sp)
   22c64:	383fcc0e 	bge	r7,zero,22b98 <___vfprintf_internal_r+0x1bc0>
   22c68:	d8014515 	stw	zero,1300(sp)
   22c6c:	003fca06 	br	22b98 <___vfprintf_internal_r+0x1bc0>
   22c70:	d9000517 	ldw	r4,20(sp)
   22c74:	00bfff04 	movi	r2,-4
   22c78:	1100480e 	bge	r2,r4,22d9c <___vfprintf_internal_r+0x1dc4>
   22c7c:	99004716 	blt	r19,r4,22d9c <___vfprintf_internal_r+0x1dc4>
   22c80:	d8c14d15 	stw	r3,1332(sp)
   22c84:	003ff006 	br	22c48 <___vfprintf_internal_r+0x1c70>
   22c88:	d8800717 	ldw	r2,28(sp)
   22c8c:	14bf8b2e 	bgeu	r2,r18,22abc <___vfprintf_internal_r+0x1ae4>
   22c90:	9007883a 	mov	r3,r18
   22c94:	01000c04 	movi	r4,48
   22c98:	11000005 	stb	r4,0(r2)
   22c9c:	10800044 	addi	r2,r2,1
   22ca0:	d8800715 	stw	r2,28(sp)
   22ca4:	18bffc1e 	bne	r3,r2,22c98 <___vfprintf_internal_r+0x1cc0>
   22ca8:	003f8406 	br	22abc <___vfprintf_internal_r+0x1ae4>
   22cac:	d8814117 	ldw	r2,1284(sp)
   22cb0:	10c00007 	ldb	r3,0(r2)
   22cb4:	00800c04 	movi	r2,48
   22cb8:	18805b26 	beq	r3,r2,22e28 <___vfprintf_internal_r+0x1e50>
   22cbc:	d9000517 	ldw	r4,20(sp)
   22cc0:	9125883a 	add	r18,r18,r4
   22cc4:	003f7506 	br	22a9c <___vfprintf_internal_r+0x1ac4>
   22cc8:	d9014c17 	ldw	r4,1328(sp)
   22ccc:	2080004c 	andi	r2,r4,1
   22cd0:	1005003a 	cmpeq	r2,r2,zero
   22cd4:	103f6a26 	beq	r2,zero,22a80 <___vfprintf_internal_r+0x1aa8>
   22cd8:	d8800717 	ldw	r2,28(sp)
   22cdc:	003f7706 	br	22abc <___vfprintf_internal_r+0x1ae4>
   22ce0:	d9c14515 	stw	r7,1300(sp)
   22ce4:	38004d16 	blt	r7,zero,22e1c <___vfprintf_internal_r+0x1e44>
   22ce8:	dc814715 	stw	r18,1308(sp)
   22cec:	d8014615 	stw	zero,1304(sp)
   22cf0:	003b5b06 	br	21a60 <___vfprintf_internal_r+0xa88>
   22cf4:	d9014f17 	ldw	r4,1340(sp)
   22cf8:	d8800504 	addi	r2,sp,20
   22cfc:	d8800115 	stw	r2,4(sp)
   22d00:	d8c00604 	addi	r3,sp,24
   22d04:	d8800704 	addi	r2,sp,28
   22d08:	800b883a 	mov	r5,r16
   22d0c:	880d883a 	mov	r6,r17
   22d10:	01c000c4 	movi	r7,3
   22d14:	d8c00215 	stw	r3,8(sp)
   22d18:	d8800315 	stw	r2,12(sp)
   22d1c:	dcc00015 	stw	r19,0(sp)
   22d20:	9829883a 	mov	r20,r19
   22d24:	00232440 	call	23244 <_dtoa_r>
   22d28:	d8814115 	stw	r2,1284(sp)
   22d2c:	003f5106 	br	22a74 <___vfprintf_internal_r+0x1a9c>
   22d30:	d8c14217 	ldw	r3,1288(sp)
   22d34:	d9014317 	ldw	r4,1292(sp)
   22d38:	07000b44 	movi	fp,45
   22d3c:	1821883a 	mov	r16,r3
   22d40:	2460003c 	xorhi	r17,r4,32768
   22d44:	003f3106 	br	22a0c <___vfprintf_internal_r+0x1a34>
   22d48:	9d000044 	addi	r20,r19,1
   22d4c:	003f3906 	br	22a34 <___vfprintf_internal_r+0x1a5c>
   22d50:	983f251e 	bne	r19,zero,229e8 <___vfprintf_internal_r+0x1a10>
   22d54:	04c00044 	movi	r19,1
   22d58:	003f2306 	br	229e8 <___vfprintf_internal_r+0x1a10>
   22d5c:	04c00184 	movi	r19,6
   22d60:	003f2106 	br	229e8 <___vfprintf_internal_r+0x1a10>
   22d64:	d8014515 	stw	zero,1300(sp)
   22d68:	003eee06 	br	22924 <___vfprintf_internal_r+0x194c>
   22d6c:	200f883a 	mov	r7,r4
   22d70:	0100370e 	bge	zero,r4,22e50 <___vfprintf_internal_r+0x1e78>
   22d74:	9800031e 	bne	r19,zero,22d84 <___vfprintf_internal_r+0x1dac>
   22d78:	d9814c17 	ldw	r6,1328(sp)
   22d7c:	3080004c 	andi	r2,r6,1
   22d80:	103fb726 	beq	r2,zero,22c60 <___vfprintf_internal_r+0x1c88>
   22d84:	20800044 	addi	r2,r4,1
   22d88:	98a7883a 	add	r19,r19,r2
   22d8c:	dcc14515 	stw	r19,1300(sp)
   22d90:	980f883a 	mov	r7,r19
   22d94:	983f800e 	bge	r19,zero,22b98 <___vfprintf_internal_r+0x1bc0>
   22d98:	003fb306 	br	22c68 <___vfprintf_internal_r+0x1c90>
   22d9c:	d9814d17 	ldw	r6,1332(sp)
   22da0:	31bfff84 	addi	r6,r6,-2
   22da4:	d9814d15 	stw	r6,1332(sp)
   22da8:	003f4c06 	br	22adc <___vfprintf_internal_r+0x1b04>
   22dac:	0100180e 	bge	zero,r4,22e10 <___vfprintf_internal_r+0x1e38>
   22db0:	00800044 	movi	r2,1
   22db4:	1485883a 	add	r2,r2,r18
   22db8:	d8814515 	stw	r2,1300(sp)
   22dbc:	100f883a 	mov	r7,r2
   22dc0:	103f750e 	bge	r2,zero,22b98 <___vfprintf_internal_r+0x1bc0>
   22dc4:	003fa806 	br	22c68 <___vfprintf_internal_r+0x1c90>
   22dc8:	80c00c04 	addi	r3,r16,48
   22dcc:	00800c04 	movi	r2,48
   22dd0:	d8c008c5 	stb	r3,35(sp)
   22dd4:	d9800804 	addi	r6,sp,32
   22dd8:	d8c00904 	addi	r3,sp,36
   22ddc:	d8800885 	stb	r2,34(sp)
   22de0:	003f6506 	br	22b78 <___vfprintf_internal_r+0x1ba0>
   22de4:	d9014c17 	ldw	r4,1328(sp)
   22de8:	2084703a 	and	r2,r4,r2
   22dec:	103f9c26 	beq	r2,zero,22c60 <___vfprintf_internal_r+0x1c88>
   22df0:	003f6606 	br	22b8c <___vfprintf_internal_r+0x1bb4>
   22df4:	d9800804 	addi	r6,sp,32
   22df8:	d8c00884 	addi	r3,sp,34
   22dfc:	003f5e06 	br	22b78 <___vfprintf_internal_r+0x1ba0>
   22e00:	00800b44 	movi	r2,45
   22e04:	0121c83a 	sub	r16,zero,r4
   22e08:	d8800845 	stb	r2,33(sp)
   22e0c:	003f3d06 	br	22b04 <___vfprintf_internal_r+0x1b2c>
   22e10:	00800084 	movi	r2,2
   22e14:	1105c83a 	sub	r2,r2,r4
   22e18:	003fe606 	br	22db4 <___vfprintf_internal_r+0x1ddc>
   22e1c:	d8014515 	stw	zero,1300(sp)
   22e20:	dc814715 	stw	r18,1308(sp)
   22e24:	003fb106 	br	22cec <___vfprintf_internal_r+0x1d14>
   22e28:	000d883a 	mov	r6,zero
   22e2c:	000f883a 	mov	r7,zero
   22e30:	8009883a 	mov	r4,r16
   22e34:	880b883a 	mov	r5,r17
   22e38:	0029b040 	call	29b04 <__nedf2>
   22e3c:	103f9f26 	beq	r2,zero,22cbc <___vfprintf_internal_r+0x1ce4>
   22e40:	00800044 	movi	r2,1
   22e44:	1509c83a 	sub	r4,r2,r20
   22e48:	d9000515 	stw	r4,20(sp)
   22e4c:	003f9b06 	br	22cbc <___vfprintf_internal_r+0x1ce4>
   22e50:	98000d1e 	bne	r19,zero,22e88 <___vfprintf_internal_r+0x1eb0>
   22e54:	d8c14c17 	ldw	r3,1328(sp)
   22e58:	1880004c 	andi	r2,r3,1
   22e5c:	10000a1e 	bne	r2,zero,22e88 <___vfprintf_internal_r+0x1eb0>
   22e60:	01000044 	movi	r4,1
   22e64:	200f883a 	mov	r7,r4
   22e68:	d9014515 	stw	r4,1300(sp)
   22e6c:	003f4a06 	br	22b98 <___vfprintf_internal_r+0x1bc0>
   22e70:	3cc00017 	ldw	r19,0(r7)
   22e74:	39c00104 	addi	r7,r7,4
   22e78:	983d0e0e 	bge	r19,zero,222b4 <___vfprintf_internal_r+0x12dc>
   22e7c:	b8c00007 	ldb	r3,0(r23)
   22e80:	04ffffc4 	movi	r19,-1
   22e84:	0038d306 	br	211d4 <___vfprintf_internal_r+0x1fc>
   22e88:	9cc00084 	addi	r19,r19,2
   22e8c:	dcc14515 	stw	r19,1300(sp)
   22e90:	980f883a 	mov	r7,r19
   22e94:	983f400e 	bge	r19,zero,22b98 <___vfprintf_internal_r+0x1bc0>
   22e98:	003f7306 	br	22c68 <___vfprintf_internal_r+0x1c90>

00022e9c <__vfprintf_internal>:
   22e9c:	008000f4 	movhi	r2,3
   22ea0:	10bd1d04 	addi	r2,r2,-2956
   22ea4:	2013883a 	mov	r9,r4
   22ea8:	11000017 	ldw	r4,0(r2)
   22eac:	2805883a 	mov	r2,r5
   22eb0:	300f883a 	mov	r7,r6
   22eb4:	480b883a 	mov	r5,r9
   22eb8:	100d883a 	mov	r6,r2
   22ebc:	0020fd81 	jmpi	20fd8 <___vfprintf_internal_r>

00022ec0 <vfprintf>:
   22ec0:	0022e9c1 	jmpi	22e9c <__vfprintf_internal>

00022ec4 <__swsetup_r>:
   22ec4:	008000f4 	movhi	r2,3
   22ec8:	10bd1d04 	addi	r2,r2,-2956
   22ecc:	10c00017 	ldw	r3,0(r2)
   22ed0:	defffd04 	addi	sp,sp,-12
   22ed4:	dc400115 	stw	r17,4(sp)
   22ed8:	dc000015 	stw	r16,0(sp)
   22edc:	dfc00215 	stw	ra,8(sp)
   22ee0:	2023883a 	mov	r17,r4
   22ee4:	2821883a 	mov	r16,r5
   22ee8:	18000226 	beq	r3,zero,22ef4 <__swsetup_r+0x30>
   22eec:	18800e17 	ldw	r2,56(r3)
   22ef0:	10001f26 	beq	r2,zero,22f70 <__swsetup_r+0xac>
   22ef4:	8100030b 	ldhu	r4,12(r16)
   22ef8:	2080020c 	andi	r2,r4,8
   22efc:	10002826 	beq	r2,zero,22fa0 <__swsetup_r+0xdc>
   22f00:	81400417 	ldw	r5,16(r16)
   22f04:	28001d26 	beq	r5,zero,22f7c <__swsetup_r+0xb8>
   22f08:	2080004c 	andi	r2,r4,1
   22f0c:	1005003a 	cmpeq	r2,r2,zero
   22f10:	10000b26 	beq	r2,zero,22f40 <__swsetup_r+0x7c>
   22f14:	2080008c 	andi	r2,r4,2
   22f18:	10001226 	beq	r2,zero,22f64 <__swsetup_r+0xa0>
   22f1c:	0005883a 	mov	r2,zero
   22f20:	80800215 	stw	r2,8(r16)
   22f24:	28000b26 	beq	r5,zero,22f54 <__swsetup_r+0x90>
   22f28:	0005883a 	mov	r2,zero
   22f2c:	dfc00217 	ldw	ra,8(sp)
   22f30:	dc400117 	ldw	r17,4(sp)
   22f34:	dc000017 	ldw	r16,0(sp)
   22f38:	dec00304 	addi	sp,sp,12
   22f3c:	f800283a 	ret
   22f40:	80800517 	ldw	r2,20(r16)
   22f44:	80000215 	stw	zero,8(r16)
   22f48:	0085c83a 	sub	r2,zero,r2
   22f4c:	80800615 	stw	r2,24(r16)
   22f50:	283ff51e 	bne	r5,zero,22f28 <__swsetup_r+0x64>
   22f54:	2080200c 	andi	r2,r4,128
   22f58:	103ff326 	beq	r2,zero,22f28 <__swsetup_r+0x64>
   22f5c:	00bfffc4 	movi	r2,-1
   22f60:	003ff206 	br	22f2c <__swsetup_r+0x68>
   22f64:	80800517 	ldw	r2,20(r16)
   22f68:	80800215 	stw	r2,8(r16)
   22f6c:	003fed06 	br	22f24 <__swsetup_r+0x60>
   22f70:	1809883a 	mov	r4,r3
   22f74:	0024a900 	call	24a90 <__sinit>
   22f78:	003fde06 	br	22ef4 <__swsetup_r+0x30>
   22f7c:	20c0a00c 	andi	r3,r4,640
   22f80:	00808004 	movi	r2,512
   22f84:	18bfe026 	beq	r3,r2,22f08 <__swsetup_r+0x44>
   22f88:	8809883a 	mov	r4,r17
   22f8c:	800b883a 	mov	r5,r16
   22f90:	002583c0 	call	2583c <__smakebuf_r>
   22f94:	8100030b 	ldhu	r4,12(r16)
   22f98:	81400417 	ldw	r5,16(r16)
   22f9c:	003fda06 	br	22f08 <__swsetup_r+0x44>
   22fa0:	2080040c 	andi	r2,r4,16
   22fa4:	103fed26 	beq	r2,zero,22f5c <__swsetup_r+0x98>
   22fa8:	2080010c 	andi	r2,r4,4
   22fac:	10001226 	beq	r2,zero,22ff8 <__swsetup_r+0x134>
   22fb0:	81400c17 	ldw	r5,48(r16)
   22fb4:	28000526 	beq	r5,zero,22fcc <__swsetup_r+0x108>
   22fb8:	80801004 	addi	r2,r16,64
   22fbc:	28800226 	beq	r5,r2,22fc8 <__swsetup_r+0x104>
   22fc0:	8809883a 	mov	r4,r17
   22fc4:	0024e480 	call	24e48 <_free_r>
   22fc8:	80000c15 	stw	zero,48(r16)
   22fcc:	8080030b 	ldhu	r2,12(r16)
   22fd0:	81400417 	ldw	r5,16(r16)
   22fd4:	80000115 	stw	zero,4(r16)
   22fd8:	10bff6cc 	andi	r2,r2,65499
   22fdc:	8080030d 	sth	r2,12(r16)
   22fe0:	81400015 	stw	r5,0(r16)
   22fe4:	8080030b 	ldhu	r2,12(r16)
   22fe8:	10800214 	ori	r2,r2,8
   22fec:	113fffcc 	andi	r4,r2,65535
   22ff0:	8080030d 	sth	r2,12(r16)
   22ff4:	003fc306 	br	22f04 <__swsetup_r+0x40>
   22ff8:	81400417 	ldw	r5,16(r16)
   22ffc:	003ff906 	br	22fe4 <__swsetup_r+0x120>

00023000 <quorem>:
   23000:	28c00417 	ldw	r3,16(r5)
   23004:	20800417 	ldw	r2,16(r4)
   23008:	defff104 	addi	sp,sp,-60
   2300c:	dfc00e15 	stw	ra,56(sp)
   23010:	df000d15 	stw	fp,52(sp)
   23014:	ddc00c15 	stw	r23,48(sp)
   23018:	dd800b15 	stw	r22,44(sp)
   2301c:	dd400a15 	stw	r21,40(sp)
   23020:	dd000915 	stw	r20,36(sp)
   23024:	dcc00815 	stw	r19,32(sp)
   23028:	dc800715 	stw	r18,28(sp)
   2302c:	dc400615 	stw	r17,24(sp)
   23030:	dc000515 	stw	r16,20(sp)
   23034:	d9000315 	stw	r4,12(sp)
   23038:	d9400415 	stw	r5,16(sp)
   2303c:	10c07f16 	blt	r2,r3,2323c <quorem+0x23c>
   23040:	1d3fffc4 	addi	r20,r3,-1
   23044:	d8c00417 	ldw	r3,16(sp)
   23048:	d9000317 	ldw	r4,12(sp)
   2304c:	a505883a 	add	r2,r20,r20
   23050:	1085883a 	add	r2,r2,r2
   23054:	1cc00504 	addi	r19,r3,20
   23058:	25c00504 	addi	r23,r4,20
   2305c:	98ad883a 	add	r22,r19,r2
   23060:	15c7883a 	add	r3,r2,r23
   23064:	b1400017 	ldw	r5,0(r22)
   23068:	19000017 	ldw	r4,0(r3)
   2306c:	d8c00015 	stw	r3,0(sp)
   23070:	29400044 	addi	r5,r5,1
   23074:	d9000215 	stw	r4,8(sp)
   23078:	002a1c40 	call	2a1c4 <__udivsi3>
   2307c:	1039883a 	mov	fp,r2
   23080:	10003d1e 	bne	r2,zero,23178 <quorem+0x178>
   23084:	d9400417 	ldw	r5,16(sp)
   23088:	d9000317 	ldw	r4,12(sp)
   2308c:	00265680 	call	26568 <__mcmp>
   23090:	10002c16 	blt	r2,zero,23144 <quorem+0x144>
   23094:	e7000044 	addi	fp,fp,1
   23098:	b80f883a 	mov	r7,r23
   2309c:	0011883a 	mov	r8,zero
   230a0:	0009883a 	mov	r4,zero
   230a4:	99400017 	ldw	r5,0(r19)
   230a8:	38c00017 	ldw	r3,0(r7)
   230ac:	9cc00104 	addi	r19,r19,4
   230b0:	28bfffcc 	andi	r2,r5,65535
   230b4:	2085883a 	add	r2,r4,r2
   230b8:	11bfffcc 	andi	r6,r2,65535
   230bc:	193fffcc 	andi	r4,r3,65535
   230c0:	1004d43a 	srli	r2,r2,16
   230c4:	280ad43a 	srli	r5,r5,16
   230c8:	2189c83a 	sub	r4,r4,r6
   230cc:	2209883a 	add	r4,r4,r8
   230d0:	1806d43a 	srli	r3,r3,16
   230d4:	288b883a 	add	r5,r5,r2
   230d8:	200dd43a 	srai	r6,r4,16
   230dc:	28bfffcc 	andi	r2,r5,65535
   230e0:	1887c83a 	sub	r3,r3,r2
   230e4:	1987883a 	add	r3,r3,r6
   230e8:	3900000d 	sth	r4,0(r7)
   230ec:	38c0008d 	sth	r3,2(r7)
   230f0:	2808d43a 	srli	r4,r5,16
   230f4:	39c00104 	addi	r7,r7,4
   230f8:	1811d43a 	srai	r8,r3,16
   230fc:	b4ffe92e 	bgeu	r22,r19,230a4 <quorem+0xa4>
   23100:	a505883a 	add	r2,r20,r20
   23104:	1085883a 	add	r2,r2,r2
   23108:	b885883a 	add	r2,r23,r2
   2310c:	10c00017 	ldw	r3,0(r2)
   23110:	18000c1e 	bne	r3,zero,23144 <quorem+0x144>
   23114:	113fff04 	addi	r4,r2,-4
   23118:	b900082e 	bgeu	r23,r4,2313c <quorem+0x13c>
   2311c:	10bfff17 	ldw	r2,-4(r2)
   23120:	10000326 	beq	r2,zero,23130 <quorem+0x130>
   23124:	00000506 	br	2313c <quorem+0x13c>
   23128:	20800017 	ldw	r2,0(r4)
   2312c:	1000031e 	bne	r2,zero,2313c <quorem+0x13c>
   23130:	213fff04 	addi	r4,r4,-4
   23134:	a53fffc4 	addi	r20,r20,-1
   23138:	b93ffb36 	bltu	r23,r4,23128 <quorem+0x128>
   2313c:	d9000317 	ldw	r4,12(sp)
   23140:	25000415 	stw	r20,16(r4)
   23144:	e005883a 	mov	r2,fp
   23148:	dfc00e17 	ldw	ra,56(sp)
   2314c:	df000d17 	ldw	fp,52(sp)
   23150:	ddc00c17 	ldw	r23,48(sp)
   23154:	dd800b17 	ldw	r22,44(sp)
   23158:	dd400a17 	ldw	r21,40(sp)
   2315c:	dd000917 	ldw	r20,36(sp)
   23160:	dcc00817 	ldw	r19,32(sp)
   23164:	dc800717 	ldw	r18,28(sp)
   23168:	dc400617 	ldw	r17,24(sp)
   2316c:	dc000517 	ldw	r16,20(sp)
   23170:	dec00f04 	addi	sp,sp,60
   23174:	f800283a 	ret
   23178:	b823883a 	mov	r17,r23
   2317c:	9825883a 	mov	r18,r19
   23180:	d8000115 	stw	zero,4(sp)
   23184:	002b883a 	mov	r21,zero
   23188:	94000017 	ldw	r16,0(r18)
   2318c:	e009883a 	mov	r4,fp
   23190:	94800104 	addi	r18,r18,4
   23194:	817fffcc 	andi	r5,r16,65535
   23198:	002a1d40 	call	2a1d4 <__mulsi3>
   2319c:	800ad43a 	srli	r5,r16,16
   231a0:	e009883a 	mov	r4,fp
   231a4:	a8a1883a 	add	r16,r21,r2
   231a8:	002a1d40 	call	2a1d4 <__mulsi3>
   231ac:	89000017 	ldw	r4,0(r17)
   231b0:	80ffffcc 	andi	r3,r16,65535
   231b4:	8020d43a 	srli	r16,r16,16
   231b8:	217fffcc 	andi	r5,r4,65535
   231bc:	28cbc83a 	sub	r5,r5,r3
   231c0:	d8c00117 	ldw	r3,4(sp)
   231c4:	2008d43a 	srli	r4,r4,16
   231c8:	1405883a 	add	r2,r2,r16
   231cc:	28cb883a 	add	r5,r5,r3
   231d0:	280dd43a 	srai	r6,r5,16
   231d4:	10ffffcc 	andi	r3,r2,65535
   231d8:	20c9c83a 	sub	r4,r4,r3
   231dc:	2189883a 	add	r4,r4,r6
   231e0:	8900008d 	sth	r4,2(r17)
   231e4:	2009d43a 	srai	r4,r4,16
   231e8:	8940000d 	sth	r5,0(r17)
   231ec:	102ad43a 	srli	r21,r2,16
   231f0:	8c400104 	addi	r17,r17,4
   231f4:	d9000115 	stw	r4,4(sp)
   231f8:	b4bfe32e 	bgeu	r22,r18,23188 <quorem+0x188>
   231fc:	d9000217 	ldw	r4,8(sp)
   23200:	203fa01e 	bne	r4,zero,23084 <quorem+0x84>
   23204:	d8800017 	ldw	r2,0(sp)
   23208:	10ffff04 	addi	r3,r2,-4
   2320c:	b8c0082e 	bgeu	r23,r3,23230 <quorem+0x230>
   23210:	10bfff17 	ldw	r2,-4(r2)
   23214:	10000326 	beq	r2,zero,23224 <quorem+0x224>
   23218:	00000506 	br	23230 <quorem+0x230>
   2321c:	18800017 	ldw	r2,0(r3)
   23220:	1000031e 	bne	r2,zero,23230 <quorem+0x230>
   23224:	18ffff04 	addi	r3,r3,-4
   23228:	a53fffc4 	addi	r20,r20,-1
   2322c:	b8fffb36 	bltu	r23,r3,2321c <quorem+0x21c>
   23230:	d8c00317 	ldw	r3,12(sp)
   23234:	1d000415 	stw	r20,16(r3)
   23238:	003f9206 	br	23084 <quorem+0x84>
   2323c:	0005883a 	mov	r2,zero
   23240:	003fc106 	br	23148 <quorem+0x148>

00023244 <_dtoa_r>:
   23244:	22001017 	ldw	r8,64(r4)
   23248:	deffda04 	addi	sp,sp,-152
   2324c:	dd402115 	stw	r21,132(sp)
   23250:	dd002015 	stw	r20,128(sp)
   23254:	dc801e15 	stw	r18,120(sp)
   23258:	dc401d15 	stw	r17,116(sp)
   2325c:	dfc02515 	stw	ra,148(sp)
   23260:	df002415 	stw	fp,144(sp)
   23264:	ddc02315 	stw	r23,140(sp)
   23268:	dd802215 	stw	r22,136(sp)
   2326c:	dcc01f15 	stw	r19,124(sp)
   23270:	dc001c15 	stw	r16,112(sp)
   23274:	d9001615 	stw	r4,88(sp)
   23278:	3023883a 	mov	r17,r6
   2327c:	2829883a 	mov	r20,r5
   23280:	d9c01715 	stw	r7,92(sp)
   23284:	dc802817 	ldw	r18,160(sp)
   23288:	302b883a 	mov	r21,r6
   2328c:	40000a26 	beq	r8,zero,232b8 <_dtoa_r+0x74>
   23290:	20801117 	ldw	r2,68(r4)
   23294:	400b883a 	mov	r5,r8
   23298:	40800115 	stw	r2,4(r8)
   2329c:	20c01117 	ldw	r3,68(r4)
   232a0:	00800044 	movi	r2,1
   232a4:	10c4983a 	sll	r2,r2,r3
   232a8:	40800215 	stw	r2,8(r8)
   232ac:	002640c0 	call	2640c <_Bfree>
   232b0:	d8c01617 	ldw	r3,88(sp)
   232b4:	18001015 	stw	zero,64(r3)
   232b8:	8800a316 	blt	r17,zero,23548 <_dtoa_r+0x304>
   232bc:	90000015 	stw	zero,0(r18)
   232c0:	a8dffc2c 	andhi	r3,r21,32752
   232c4:	009ffc34 	movhi	r2,32752
   232c8:	18809126 	beq	r3,r2,23510 <_dtoa_r+0x2cc>
   232cc:	000d883a 	mov	r6,zero
   232d0:	000f883a 	mov	r7,zero
   232d4:	a009883a 	mov	r4,r20
   232d8:	a80b883a 	mov	r5,r21
   232dc:	dd001215 	stw	r20,72(sp)
   232e0:	dd401315 	stw	r21,76(sp)
   232e4:	0029b040 	call	29b04 <__nedf2>
   232e8:	1000171e 	bne	r2,zero,23348 <_dtoa_r+0x104>
   232ec:	d9802717 	ldw	r6,156(sp)
   232f0:	00800044 	movi	r2,1
   232f4:	30800015 	stw	r2,0(r6)
   232f8:	d8802917 	ldw	r2,164(sp)
   232fc:	10029b26 	beq	r2,zero,23d6c <_dtoa_r+0xb28>
   23300:	d9002917 	ldw	r4,164(sp)
   23304:	008000f4 	movhi	r2,3
   23308:	10b5d844 	addi	r2,r2,-10399
   2330c:	10ffffc4 	addi	r3,r2,-1
   23310:	20800015 	stw	r2,0(r4)
   23314:	1805883a 	mov	r2,r3
   23318:	dfc02517 	ldw	ra,148(sp)
   2331c:	df002417 	ldw	fp,144(sp)
   23320:	ddc02317 	ldw	r23,140(sp)
   23324:	dd802217 	ldw	r22,136(sp)
   23328:	dd402117 	ldw	r21,132(sp)
   2332c:	dd002017 	ldw	r20,128(sp)
   23330:	dcc01f17 	ldw	r19,124(sp)
   23334:	dc801e17 	ldw	r18,120(sp)
   23338:	dc401d17 	ldw	r17,116(sp)
   2333c:	dc001c17 	ldw	r16,112(sp)
   23340:	dec02604 	addi	sp,sp,152
   23344:	f800283a 	ret
   23348:	d9001617 	ldw	r4,88(sp)
   2334c:	d9401217 	ldw	r5,72(sp)
   23350:	d8800104 	addi	r2,sp,4
   23354:	a80d883a 	mov	r6,r21
   23358:	d9c00204 	addi	r7,sp,8
   2335c:	d8800015 	stw	r2,0(sp)
   23360:	0026a480 	call	26a48 <__d2b>
   23364:	d8800715 	stw	r2,28(sp)
   23368:	a804d53a 	srli	r2,r21,20
   2336c:	1101ffcc 	andi	r4,r2,2047
   23370:	20008626 	beq	r4,zero,2358c <_dtoa_r+0x348>
   23374:	d8c01217 	ldw	r3,72(sp)
   23378:	00800434 	movhi	r2,16
   2337c:	10bfffc4 	addi	r2,r2,-1
   23380:	ddc00117 	ldw	r23,4(sp)
   23384:	a884703a 	and	r2,r21,r2
   23388:	1811883a 	mov	r8,r3
   2338c:	124ffc34 	orhi	r9,r2,16368
   23390:	25bf0044 	addi	r22,r4,-1023
   23394:	d8000815 	stw	zero,32(sp)
   23398:	0005883a 	mov	r2,zero
   2339c:	00cffe34 	movhi	r3,16376
   233a0:	480b883a 	mov	r5,r9
   233a4:	4009883a 	mov	r4,r8
   233a8:	180f883a 	mov	r7,r3
   233ac:	100d883a 	mov	r6,r2
   233b0:	002936c0 	call	2936c <__subdf3>
   233b4:	0218dbf4 	movhi	r8,25455
   233b8:	4210d844 	addi	r8,r8,17249
   233bc:	024ff4f4 	movhi	r9,16339
   233c0:	4a61e9c4 	addi	r9,r9,-30809
   233c4:	480f883a 	mov	r7,r9
   233c8:	400d883a 	mov	r6,r8
   233cc:	180b883a 	mov	r5,r3
   233d0:	1009883a 	mov	r4,r2
   233d4:	00294600 	call	29460 <__muldf3>
   233d8:	0222d874 	movhi	r8,35681
   233dc:	42322cc4 	addi	r8,r8,-14157
   233e0:	024ff1f4 	movhi	r9,16327
   233e4:	4a628a04 	addi	r9,r9,-30168
   233e8:	480f883a 	mov	r7,r9
   233ec:	400d883a 	mov	r6,r8
   233f0:	180b883a 	mov	r5,r3
   233f4:	1009883a 	mov	r4,r2
   233f8:	00293ec0 	call	293ec <__adddf3>
   233fc:	b009883a 	mov	r4,r22
   23400:	1021883a 	mov	r16,r2
   23404:	1823883a 	mov	r17,r3
   23408:	0029d240 	call	29d24 <__floatsidf>
   2340c:	021427f4 	movhi	r8,20639
   23410:	421e7ec4 	addi	r8,r8,31227
   23414:	024ff4f4 	movhi	r9,16339
   23418:	4a5104c4 	addi	r9,r9,17427
   2341c:	480f883a 	mov	r7,r9
   23420:	400d883a 	mov	r6,r8
   23424:	180b883a 	mov	r5,r3
   23428:	1009883a 	mov	r4,r2
   2342c:	00294600 	call	29460 <__muldf3>
   23430:	180f883a 	mov	r7,r3
   23434:	880b883a 	mov	r5,r17
   23438:	100d883a 	mov	r6,r2
   2343c:	8009883a 	mov	r4,r16
   23440:	00293ec0 	call	293ec <__adddf3>
   23444:	1009883a 	mov	r4,r2
   23448:	180b883a 	mov	r5,r3
   2344c:	1021883a 	mov	r16,r2
   23450:	1823883a 	mov	r17,r3
   23454:	0029e1c0 	call	29e1c <__fixdfsi>
   23458:	000d883a 	mov	r6,zero
   2345c:	000f883a 	mov	r7,zero
   23460:	8009883a 	mov	r4,r16
   23464:	880b883a 	mov	r5,r17
   23468:	d8800d15 	stw	r2,52(sp)
   2346c:	0029c9c0 	call	29c9c <__ltdf2>
   23470:	10031716 	blt	r2,zero,240d0 <_dtoa_r+0xe8c>
   23474:	d8c00d17 	ldw	r3,52(sp)
   23478:	00800584 	movi	r2,22
   2347c:	10c1482e 	bgeu	r2,r3,239a0 <_dtoa_r+0x75c>
   23480:	01000044 	movi	r4,1
   23484:	d9000c15 	stw	r4,48(sp)
   23488:	bd85c83a 	sub	r2,r23,r22
   2348c:	11bfffc4 	addi	r6,r2,-1
   23490:	30030b16 	blt	r6,zero,240c0 <_dtoa_r+0xe7c>
   23494:	d9800a15 	stw	r6,40(sp)
   23498:	d8001115 	stw	zero,68(sp)
   2349c:	d8c00d17 	ldw	r3,52(sp)
   234a0:	1802ff16 	blt	r3,zero,240a0 <_dtoa_r+0xe5c>
   234a4:	d9000a17 	ldw	r4,40(sp)
   234a8:	d8c00915 	stw	r3,36(sp)
   234ac:	d8001015 	stw	zero,64(sp)
   234b0:	20c9883a 	add	r4,r4,r3
   234b4:	d9000a15 	stw	r4,40(sp)
   234b8:	d9001717 	ldw	r4,92(sp)
   234bc:	00800244 	movi	r2,9
   234c0:	11004636 	bltu	r2,r4,235dc <_dtoa_r+0x398>
   234c4:	00800144 	movi	r2,5
   234c8:	11020416 	blt	r2,r4,23cdc <_dtoa_r+0xa98>
   234cc:	04400044 	movi	r17,1
   234d0:	d8c01717 	ldw	r3,92(sp)
   234d4:	00800144 	movi	r2,5
   234d8:	10c1ed36 	bltu	r2,r3,23c90 <_dtoa_r+0xa4c>
   234dc:	18c5883a 	add	r2,r3,r3
   234e0:	1085883a 	add	r2,r2,r2
   234e4:	00c000b4 	movhi	r3,2
   234e8:	18cd3e04 	addi	r3,r3,13560
   234ec:	10c5883a 	add	r2,r2,r3
   234f0:	11000017 	ldw	r4,0(r2)
   234f4:	2000683a 	jmp	r4
   234f8:	000235e4 	muli	zero,zero,2263
   234fc:	000235e4 	muli	zero,zero,2263
   23500:	00023fe4 	muli	zero,zero,2303
   23504:	00023fbc 	xorhi	zero,zero,2302
   23508:	00024000 	call	2400 <__alt_mem_nios_base_onchip_ram-0x1dc00>
   2350c:	0002400c 	andi	zero,zero,2304
   23510:	d9002717 	ldw	r4,156(sp)
   23514:	0089c3c4 	movi	r2,9999
   23518:	20800015 	stw	r2,0(r4)
   2351c:	a0001026 	beq	r20,zero,23560 <_dtoa_r+0x31c>
   23520:	00c000f4 	movhi	r3,3
   23524:	18f5e404 	addi	r3,r3,-10352
   23528:	d9802917 	ldw	r6,164(sp)
   2352c:	303f7926 	beq	r6,zero,23314 <_dtoa_r+0xd0>
   23530:	188000c7 	ldb	r2,3(r3)
   23534:	190000c4 	addi	r4,r3,3
   23538:	1000101e 	bne	r2,zero,2357c <_dtoa_r+0x338>
   2353c:	d8802917 	ldw	r2,164(sp)
   23540:	11000015 	stw	r4,0(r2)
   23544:	003f7306 	br	23314 <_dtoa_r+0xd0>
   23548:	00a00034 	movhi	r2,32768
   2354c:	10bfffc4 	addi	r2,r2,-1
   23550:	00c00044 	movi	r3,1
   23554:	88aa703a 	and	r21,r17,r2
   23558:	90c00015 	stw	r3,0(r18)
   2355c:	003f5806 	br	232c0 <_dtoa_r+0x7c>
   23560:	00800434 	movhi	r2,16
   23564:	10bfffc4 	addi	r2,r2,-1
   23568:	a884703a 	and	r2,r21,r2
   2356c:	103fec1e 	bne	r2,zero,23520 <_dtoa_r+0x2dc>
   23570:	00c000f4 	movhi	r3,3
   23574:	18f5e104 	addi	r3,r3,-10364
   23578:	003feb06 	br	23528 <_dtoa_r+0x2e4>
   2357c:	d8802917 	ldw	r2,164(sp)
   23580:	19000204 	addi	r4,r3,8
   23584:	11000015 	stw	r4,0(r2)
   23588:	003f6206 	br	23314 <_dtoa_r+0xd0>
   2358c:	ddc00117 	ldw	r23,4(sp)
   23590:	d8800217 	ldw	r2,8(sp)
   23594:	01000804 	movi	r4,32
   23598:	b8c10c84 	addi	r3,r23,1074
   2359c:	18a3883a 	add	r17,r3,r2
   235a0:	2441b80e 	bge	r4,r17,23c84 <_dtoa_r+0xa40>
   235a4:	00c01004 	movi	r3,64
   235a8:	1c47c83a 	sub	r3,r3,r17
   235ac:	88bff804 	addi	r2,r17,-32
   235b0:	a8c6983a 	sll	r3,r21,r3
   235b4:	a084d83a 	srl	r2,r20,r2
   235b8:	1888b03a 	or	r4,r3,r2
   235bc:	0029ef40 	call	29ef4 <__floatunsidf>
   235c0:	1011883a 	mov	r8,r2
   235c4:	00bf8434 	movhi	r2,65040
   235c8:	01000044 	movi	r4,1
   235cc:	10d3883a 	add	r9,r2,r3
   235d0:	8dbef344 	addi	r22,r17,-1075
   235d4:	d9000815 	stw	r4,32(sp)
   235d8:	003f6f06 	br	23398 <_dtoa_r+0x154>
   235dc:	d8001715 	stw	zero,92(sp)
   235e0:	04400044 	movi	r17,1
   235e4:	00bfffc4 	movi	r2,-1
   235e8:	00c00044 	movi	r3,1
   235ec:	d8800e15 	stw	r2,56(sp)
   235f0:	d8002615 	stw	zero,152(sp)
   235f4:	d8800f15 	stw	r2,60(sp)
   235f8:	d8c00b15 	stw	r3,44(sp)
   235fc:	1021883a 	mov	r16,r2
   23600:	d8801617 	ldw	r2,88(sp)
   23604:	10001115 	stw	zero,68(r2)
   23608:	d8801617 	ldw	r2,88(sp)
   2360c:	11401117 	ldw	r5,68(r2)
   23610:	1009883a 	mov	r4,r2
   23614:	002698c0 	call	2698c <_Balloc>
   23618:	d8c01617 	ldw	r3,88(sp)
   2361c:	d8800515 	stw	r2,20(sp)
   23620:	18801015 	stw	r2,64(r3)
   23624:	00800384 	movi	r2,14
   23628:	14006836 	bltu	r2,r16,237cc <_dtoa_r+0x588>
   2362c:	8805003a 	cmpeq	r2,r17,zero
   23630:	1000661e 	bne	r2,zero,237cc <_dtoa_r+0x588>
   23634:	d9000d17 	ldw	r4,52(sp)
   23638:	0102300e 	bge	zero,r4,23efc <_dtoa_r+0xcb8>
   2363c:	208003cc 	andi	r2,r4,15
   23640:	100490fa 	slli	r2,r2,3
   23644:	2025d13a 	srai	r18,r4,4
   23648:	00c000f4 	movhi	r3,3
   2364c:	18f5f504 	addi	r3,r3,-10284
   23650:	10c5883a 	add	r2,r2,r3
   23654:	90c0040c 	andi	r3,r18,16
   23658:	14000017 	ldw	r16,0(r2)
   2365c:	14400117 	ldw	r17,4(r2)
   23660:	18036a1e 	bne	r3,zero,2440c <_dtoa_r+0x11c8>
   23664:	05800084 	movi	r22,2
   23668:	90001026 	beq	r18,zero,236ac <_dtoa_r+0x468>
   2366c:	04c000f4 	movhi	r19,3
   23670:	9cf62704 	addi	r19,r19,-10084
   23674:	9080004c 	andi	r2,r18,1
   23678:	1005003a 	cmpeq	r2,r2,zero
   2367c:	1000081e 	bne	r2,zero,236a0 <_dtoa_r+0x45c>
   23680:	99800017 	ldw	r6,0(r19)
   23684:	99c00117 	ldw	r7,4(r19)
   23688:	880b883a 	mov	r5,r17
   2368c:	8009883a 	mov	r4,r16
   23690:	00294600 	call	29460 <__muldf3>
   23694:	1021883a 	mov	r16,r2
   23698:	b5800044 	addi	r22,r22,1
   2369c:	1823883a 	mov	r17,r3
   236a0:	9025d07a 	srai	r18,r18,1
   236a4:	9cc00204 	addi	r19,r19,8
   236a8:	903ff21e 	bne	r18,zero,23674 <_dtoa_r+0x430>
   236ac:	a80b883a 	mov	r5,r21
   236b0:	a009883a 	mov	r4,r20
   236b4:	880f883a 	mov	r7,r17
   236b8:	800d883a 	mov	r6,r16
   236bc:	00298240 	call	29824 <__divdf3>
   236c0:	1029883a 	mov	r20,r2
   236c4:	182b883a 	mov	r21,r3
   236c8:	d8c00c17 	ldw	r3,48(sp)
   236cc:	1805003a 	cmpeq	r2,r3,zero
   236d0:	1000081e 	bne	r2,zero,236f4 <_dtoa_r+0x4b0>
   236d4:	0005883a 	mov	r2,zero
   236d8:	00cffc34 	movhi	r3,16368
   236dc:	180f883a 	mov	r7,r3
   236e0:	a009883a 	mov	r4,r20
   236e4:	a80b883a 	mov	r5,r21
   236e8:	100d883a 	mov	r6,r2
   236ec:	0029c9c0 	call	29c9c <__ltdf2>
   236f0:	1003fe16 	blt	r2,zero,246ec <_dtoa_r+0x14a8>
   236f4:	b009883a 	mov	r4,r22
   236f8:	0029d240 	call	29d24 <__floatsidf>
   236fc:	180b883a 	mov	r5,r3
   23700:	1009883a 	mov	r4,r2
   23704:	a00d883a 	mov	r6,r20
   23708:	a80f883a 	mov	r7,r21
   2370c:	00294600 	call	29460 <__muldf3>
   23710:	0011883a 	mov	r8,zero
   23714:	02500734 	movhi	r9,16412
   23718:	1009883a 	mov	r4,r2
   2371c:	180b883a 	mov	r5,r3
   23720:	480f883a 	mov	r7,r9
   23724:	400d883a 	mov	r6,r8
   23728:	00293ec0 	call	293ec <__adddf3>
   2372c:	d9000f17 	ldw	r4,60(sp)
   23730:	102d883a 	mov	r22,r2
   23734:	00bf3034 	movhi	r2,64704
   23738:	18b9883a 	add	fp,r3,r2
   2373c:	e02f883a 	mov	r23,fp
   23740:	20028f1e 	bne	r4,zero,24180 <_dtoa_r+0xf3c>
   23744:	0005883a 	mov	r2,zero
   23748:	00d00534 	movhi	r3,16404
   2374c:	a009883a 	mov	r4,r20
   23750:	a80b883a 	mov	r5,r21
   23754:	180f883a 	mov	r7,r3
   23758:	100d883a 	mov	r6,r2
   2375c:	002936c0 	call	2936c <__subdf3>
   23760:	1009883a 	mov	r4,r2
   23764:	e00f883a 	mov	r7,fp
   23768:	180b883a 	mov	r5,r3
   2376c:	b00d883a 	mov	r6,r22
   23770:	1025883a 	mov	r18,r2
   23774:	1827883a 	mov	r19,r3
   23778:	0029b8c0 	call	29b8c <__gtdf2>
   2377c:	00834f16 	blt	zero,r2,244bc <_dtoa_r+0x1278>
   23780:	e0e0003c 	xorhi	r3,fp,32768
   23784:	9009883a 	mov	r4,r18
   23788:	980b883a 	mov	r5,r19
   2378c:	180f883a 	mov	r7,r3
   23790:	b00d883a 	mov	r6,r22
   23794:	0029c9c0 	call	29c9c <__ltdf2>
   23798:	1000080e 	bge	r2,zero,237bc <_dtoa_r+0x578>
   2379c:	0027883a 	mov	r19,zero
   237a0:	0025883a 	mov	r18,zero
   237a4:	d8802617 	ldw	r2,152(sp)
   237a8:	df000517 	ldw	fp,20(sp)
   237ac:	d8000615 	stw	zero,24(sp)
   237b0:	0084303a 	nor	r2,zero,r2
   237b4:	d8800d15 	stw	r2,52(sp)
   237b8:	00019b06 	br	23e28 <_dtoa_r+0xbe4>
   237bc:	d9801217 	ldw	r6,72(sp)
   237c0:	d8801317 	ldw	r2,76(sp)
   237c4:	3029883a 	mov	r20,r6
   237c8:	102b883a 	mov	r21,r2
   237cc:	d8c00217 	ldw	r3,8(sp)
   237d0:	18008516 	blt	r3,zero,239e8 <_dtoa_r+0x7a4>
   237d4:	d9000d17 	ldw	r4,52(sp)
   237d8:	00800384 	movi	r2,14
   237dc:	11008216 	blt	r2,r4,239e8 <_dtoa_r+0x7a4>
   237e0:	200490fa 	slli	r2,r4,3
   237e4:	d9802617 	ldw	r6,152(sp)
   237e8:	00c000f4 	movhi	r3,3
   237ec:	18f5f504 	addi	r3,r3,-10284
   237f0:	10c5883a 	add	r2,r2,r3
   237f4:	14800017 	ldw	r18,0(r2)
   237f8:	14c00117 	ldw	r19,4(r2)
   237fc:	30031e16 	blt	r6,zero,24478 <_dtoa_r+0x1234>
   23800:	d9000517 	ldw	r4,20(sp)
   23804:	d8c00f17 	ldw	r3,60(sp)
   23808:	a823883a 	mov	r17,r21
   2380c:	a021883a 	mov	r16,r20
   23810:	192b883a 	add	r21,r3,r4
   23814:	2039883a 	mov	fp,r4
   23818:	00000f06 	br	23858 <_dtoa_r+0x614>
   2381c:	0005883a 	mov	r2,zero
   23820:	00d00934 	movhi	r3,16420
   23824:	5009883a 	mov	r4,r10
   23828:	580b883a 	mov	r5,r11
   2382c:	180f883a 	mov	r7,r3
   23830:	100d883a 	mov	r6,r2
   23834:	00294600 	call	29460 <__muldf3>
   23838:	180b883a 	mov	r5,r3
   2383c:	000d883a 	mov	r6,zero
   23840:	000f883a 	mov	r7,zero
   23844:	1009883a 	mov	r4,r2
   23848:	1021883a 	mov	r16,r2
   2384c:	1823883a 	mov	r17,r3
   23850:	0029b040 	call	29b04 <__nedf2>
   23854:	10004526 	beq	r2,zero,2396c <_dtoa_r+0x728>
   23858:	900d883a 	mov	r6,r18
   2385c:	980f883a 	mov	r7,r19
   23860:	8009883a 	mov	r4,r16
   23864:	880b883a 	mov	r5,r17
   23868:	00298240 	call	29824 <__divdf3>
   2386c:	180b883a 	mov	r5,r3
   23870:	1009883a 	mov	r4,r2
   23874:	0029e1c0 	call	29e1c <__fixdfsi>
   23878:	1009883a 	mov	r4,r2
   2387c:	1029883a 	mov	r20,r2
   23880:	0029d240 	call	29d24 <__floatsidf>
   23884:	180f883a 	mov	r7,r3
   23888:	9009883a 	mov	r4,r18
   2388c:	980b883a 	mov	r5,r19
   23890:	100d883a 	mov	r6,r2
   23894:	00294600 	call	29460 <__muldf3>
   23898:	180f883a 	mov	r7,r3
   2389c:	880b883a 	mov	r5,r17
   238a0:	8009883a 	mov	r4,r16
   238a4:	100d883a 	mov	r6,r2
   238a8:	002936c0 	call	2936c <__subdf3>
   238ac:	1015883a 	mov	r10,r2
   238b0:	a0800c04 	addi	r2,r20,48
   238b4:	e0800005 	stb	r2,0(fp)
   238b8:	e7000044 	addi	fp,fp,1
   238bc:	1817883a 	mov	r11,r3
   238c0:	e57fd61e 	bne	fp,r21,2381c <_dtoa_r+0x5d8>
   238c4:	500d883a 	mov	r6,r10
   238c8:	180f883a 	mov	r7,r3
   238cc:	5009883a 	mov	r4,r10
   238d0:	180b883a 	mov	r5,r3
   238d4:	00293ec0 	call	293ec <__adddf3>
   238d8:	100d883a 	mov	r6,r2
   238dc:	9009883a 	mov	r4,r18
   238e0:	980b883a 	mov	r5,r19
   238e4:	180f883a 	mov	r7,r3
   238e8:	1021883a 	mov	r16,r2
   238ec:	1823883a 	mov	r17,r3
   238f0:	0029c9c0 	call	29c9c <__ltdf2>
   238f4:	10000816 	blt	r2,zero,23918 <_dtoa_r+0x6d4>
   238f8:	980b883a 	mov	r5,r19
   238fc:	800d883a 	mov	r6,r16
   23900:	880f883a 	mov	r7,r17
   23904:	9009883a 	mov	r4,r18
   23908:	0029a7c0 	call	29a7c <__eqdf2>
   2390c:	1000171e 	bne	r2,zero,2396c <_dtoa_r+0x728>
   23910:	a080004c 	andi	r2,r20,1
   23914:	10001526 	beq	r2,zero,2396c <_dtoa_r+0x728>
   23918:	d8800d17 	ldw	r2,52(sp)
   2391c:	d8800415 	stw	r2,16(sp)
   23920:	e009883a 	mov	r4,fp
   23924:	213fffc4 	addi	r4,r4,-1
   23928:	20c00007 	ldb	r3,0(r4)
   2392c:	00800e44 	movi	r2,57
   23930:	1880081e 	bne	r3,r2,23954 <_dtoa_r+0x710>
   23934:	d8800517 	ldw	r2,20(sp)
   23938:	113ffa1e 	bne	r2,r4,23924 <_dtoa_r+0x6e0>
   2393c:	d8c00417 	ldw	r3,16(sp)
   23940:	d9800517 	ldw	r6,20(sp)
   23944:	00800c04 	movi	r2,48
   23948:	18c00044 	addi	r3,r3,1
   2394c:	d8c00415 	stw	r3,16(sp)
   23950:	30800005 	stb	r2,0(r6)
   23954:	20800003 	ldbu	r2,0(r4)
   23958:	d8c00417 	ldw	r3,16(sp)
   2395c:	27000044 	addi	fp,r4,1
   23960:	10800044 	addi	r2,r2,1
   23964:	d8c00d15 	stw	r3,52(sp)
   23968:	20800005 	stb	r2,0(r4)
   2396c:	d9001617 	ldw	r4,88(sp)
   23970:	d9400717 	ldw	r5,28(sp)
   23974:	002640c0 	call	2640c <_Bfree>
   23978:	e0000005 	stb	zero,0(fp)
   2397c:	d9800d17 	ldw	r6,52(sp)
   23980:	d8c02717 	ldw	r3,156(sp)
   23984:	d9002917 	ldw	r4,164(sp)
   23988:	30800044 	addi	r2,r6,1
   2398c:	18800015 	stw	r2,0(r3)
   23990:	20029c26 	beq	r4,zero,24404 <_dtoa_r+0x11c0>
   23994:	d8c00517 	ldw	r3,20(sp)
   23998:	27000015 	stw	fp,0(r4)
   2399c:	003e5d06 	br	23314 <_dtoa_r+0xd0>
   239a0:	d9800d17 	ldw	r6,52(sp)
   239a4:	00c000f4 	movhi	r3,3
   239a8:	18f5f504 	addi	r3,r3,-10284
   239ac:	d9001217 	ldw	r4,72(sp)
   239b0:	300490fa 	slli	r2,r6,3
   239b4:	d9401317 	ldw	r5,76(sp)
   239b8:	10c5883a 	add	r2,r2,r3
   239bc:	12000017 	ldw	r8,0(r2)
   239c0:	12400117 	ldw	r9,4(r2)
   239c4:	400d883a 	mov	r6,r8
   239c8:	480f883a 	mov	r7,r9
   239cc:	0029c9c0 	call	29c9c <__ltdf2>
   239d0:	1000030e 	bge	r2,zero,239e0 <_dtoa_r+0x79c>
   239d4:	d8800d17 	ldw	r2,52(sp)
   239d8:	10bfffc4 	addi	r2,r2,-1
   239dc:	d8800d15 	stw	r2,52(sp)
   239e0:	d8000c15 	stw	zero,48(sp)
   239e4:	003ea806 	br	23488 <_dtoa_r+0x244>
   239e8:	d9000b17 	ldw	r4,44(sp)
   239ec:	202cc03a 	cmpne	r22,r4,zero
   239f0:	b000c71e 	bne	r22,zero,23d10 <_dtoa_r+0xacc>
   239f4:	dc001117 	ldw	r16,68(sp)
   239f8:	dc801017 	ldw	r18,64(sp)
   239fc:	0027883a 	mov	r19,zero
   23a00:	04000b0e 	bge	zero,r16,23a30 <_dtoa_r+0x7ec>
   23a04:	d8c00a17 	ldw	r3,40(sp)
   23a08:	00c0090e 	bge	zero,r3,23a30 <_dtoa_r+0x7ec>
   23a0c:	8005883a 	mov	r2,r16
   23a10:	1c011316 	blt	r3,r16,23e60 <_dtoa_r+0xc1c>
   23a14:	d9000a17 	ldw	r4,40(sp)
   23a18:	d9801117 	ldw	r6,68(sp)
   23a1c:	80a1c83a 	sub	r16,r16,r2
   23a20:	2089c83a 	sub	r4,r4,r2
   23a24:	308dc83a 	sub	r6,r6,r2
   23a28:	d9000a15 	stw	r4,40(sp)
   23a2c:	d9801115 	stw	r6,68(sp)
   23a30:	d8801017 	ldw	r2,64(sp)
   23a34:	0080150e 	bge	zero,r2,23a8c <_dtoa_r+0x848>
   23a38:	d8c00b17 	ldw	r3,44(sp)
   23a3c:	1805003a 	cmpeq	r2,r3,zero
   23a40:	1001c91e 	bne	r2,zero,24168 <_dtoa_r+0xf24>
   23a44:	04800e0e 	bge	zero,r18,23a80 <_dtoa_r+0x83c>
   23a48:	d9001617 	ldw	r4,88(sp)
   23a4c:	980b883a 	mov	r5,r19
   23a50:	900d883a 	mov	r6,r18
   23a54:	00272580 	call	27258 <__pow5mult>
   23a58:	d9001617 	ldw	r4,88(sp)
   23a5c:	d9800717 	ldw	r6,28(sp)
   23a60:	100b883a 	mov	r5,r2
   23a64:	1027883a 	mov	r19,r2
   23a68:	0026e9c0 	call	26e9c <__multiply>
   23a6c:	d9001617 	ldw	r4,88(sp)
   23a70:	d9400717 	ldw	r5,28(sp)
   23a74:	1023883a 	mov	r17,r2
   23a78:	002640c0 	call	2640c <_Bfree>
   23a7c:	dc400715 	stw	r17,28(sp)
   23a80:	d9001017 	ldw	r4,64(sp)
   23a84:	248dc83a 	sub	r6,r4,r18
   23a88:	30010e1e 	bne	r6,zero,23ec4 <_dtoa_r+0xc80>
   23a8c:	d9001617 	ldw	r4,88(sp)
   23a90:	04400044 	movi	r17,1
   23a94:	880b883a 	mov	r5,r17
   23a98:	00270f00 	call	270f0 <__i2b>
   23a9c:	d9800917 	ldw	r6,36(sp)
   23aa0:	1025883a 	mov	r18,r2
   23aa4:	0180040e 	bge	zero,r6,23ab8 <_dtoa_r+0x874>
   23aa8:	d9001617 	ldw	r4,88(sp)
   23aac:	100b883a 	mov	r5,r2
   23ab0:	00272580 	call	27258 <__pow5mult>
   23ab4:	1025883a 	mov	r18,r2
   23ab8:	d8801717 	ldw	r2,92(sp)
   23abc:	8880f30e 	bge	r17,r2,23e8c <_dtoa_r+0xc48>
   23ac0:	0023883a 	mov	r17,zero
   23ac4:	d9800917 	ldw	r6,36(sp)
   23ac8:	30019e1e 	bne	r6,zero,24144 <_dtoa_r+0xf00>
   23acc:	00c00044 	movi	r3,1
   23ad0:	d9000a17 	ldw	r4,40(sp)
   23ad4:	20c5883a 	add	r2,r4,r3
   23ad8:	10c007cc 	andi	r3,r2,31
   23adc:	1800841e 	bne	r3,zero,23cf0 <_dtoa_r+0xaac>
   23ae0:	00800704 	movi	r2,28
   23ae4:	d9000a17 	ldw	r4,40(sp)
   23ae8:	d9801117 	ldw	r6,68(sp)
   23aec:	80a1883a 	add	r16,r16,r2
   23af0:	2089883a 	add	r4,r4,r2
   23af4:	308d883a 	add	r6,r6,r2
   23af8:	d9000a15 	stw	r4,40(sp)
   23afc:	d9801115 	stw	r6,68(sp)
   23b00:	d8801117 	ldw	r2,68(sp)
   23b04:	0080050e 	bge	zero,r2,23b1c <_dtoa_r+0x8d8>
   23b08:	d9400717 	ldw	r5,28(sp)
   23b0c:	d9001617 	ldw	r4,88(sp)
   23b10:	100d883a 	mov	r6,r2
   23b14:	0026d500 	call	26d50 <__lshift>
   23b18:	d8800715 	stw	r2,28(sp)
   23b1c:	d8c00a17 	ldw	r3,40(sp)
   23b20:	00c0050e 	bge	zero,r3,23b38 <_dtoa_r+0x8f4>
   23b24:	d9001617 	ldw	r4,88(sp)
   23b28:	900b883a 	mov	r5,r18
   23b2c:	180d883a 	mov	r6,r3
   23b30:	0026d500 	call	26d50 <__lshift>
   23b34:	1025883a 	mov	r18,r2
   23b38:	d9000c17 	ldw	r4,48(sp)
   23b3c:	2005003a 	cmpeq	r2,r4,zero
   23b40:	10016f26 	beq	r2,zero,24100 <_dtoa_r+0xebc>
   23b44:	d9000f17 	ldw	r4,60(sp)
   23b48:	0102170e 	bge	zero,r4,243a8 <_dtoa_r+0x1164>
   23b4c:	d9800b17 	ldw	r6,44(sp)
   23b50:	3005003a 	cmpeq	r2,r6,zero
   23b54:	1000881e 	bne	r2,zero,23d78 <_dtoa_r+0xb34>
   23b58:	0400050e 	bge	zero,r16,23b70 <_dtoa_r+0x92c>
   23b5c:	d9001617 	ldw	r4,88(sp)
   23b60:	980b883a 	mov	r5,r19
   23b64:	800d883a 	mov	r6,r16
   23b68:	0026d500 	call	26d50 <__lshift>
   23b6c:	1027883a 	mov	r19,r2
   23b70:	8804c03a 	cmpne	r2,r17,zero
   23b74:	1002541e 	bne	r2,zero,244c8 <_dtoa_r+0x1284>
   23b78:	980b883a 	mov	r5,r19
   23b7c:	dd800517 	ldw	r22,20(sp)
   23b80:	dcc00615 	stw	r19,24(sp)
   23b84:	a700004c 	andi	fp,r20,1
   23b88:	2827883a 	mov	r19,r5
   23b8c:	d9000717 	ldw	r4,28(sp)
   23b90:	900b883a 	mov	r5,r18
   23b94:	00230000 	call	23000 <quorem>
   23b98:	d9000717 	ldw	r4,28(sp)
   23b9c:	d9400617 	ldw	r5,24(sp)
   23ba0:	1023883a 	mov	r17,r2
   23ba4:	8dc00c04 	addi	r23,r17,48
   23ba8:	00265680 	call	26568 <__mcmp>
   23bac:	d9001617 	ldw	r4,88(sp)
   23bb0:	900b883a 	mov	r5,r18
   23bb4:	980d883a 	mov	r6,r19
   23bb8:	1029883a 	mov	r20,r2
   23bbc:	0026bc40 	call	26bc4 <__mdiff>
   23bc0:	102b883a 	mov	r21,r2
   23bc4:	10800317 	ldw	r2,12(r2)
   23bc8:	1001281e 	bne	r2,zero,2406c <_dtoa_r+0xe28>
   23bcc:	d9000717 	ldw	r4,28(sp)
   23bd0:	a80b883a 	mov	r5,r21
   23bd4:	00265680 	call	26568 <__mcmp>
   23bd8:	d9001617 	ldw	r4,88(sp)
   23bdc:	1021883a 	mov	r16,r2
   23be0:	a80b883a 	mov	r5,r21
   23be4:	002640c0 	call	2640c <_Bfree>
   23be8:	8000041e 	bne	r16,zero,23bfc <_dtoa_r+0x9b8>
   23bec:	d8801717 	ldw	r2,92(sp)
   23bf0:	1000021e 	bne	r2,zero,23bfc <_dtoa_r+0x9b8>
   23bf4:	e004c03a 	cmpne	r2,fp,zero
   23bf8:	10011726 	beq	r2,zero,24058 <_dtoa_r+0xe14>
   23bfc:	a0010616 	blt	r20,zero,24018 <_dtoa_r+0xdd4>
   23c00:	a000041e 	bne	r20,zero,23c14 <_dtoa_r+0x9d0>
   23c04:	d8c01717 	ldw	r3,92(sp)
   23c08:	1800021e 	bne	r3,zero,23c14 <_dtoa_r+0x9d0>
   23c0c:	e004c03a 	cmpne	r2,fp,zero
   23c10:	10010126 	beq	r2,zero,24018 <_dtoa_r+0xdd4>
   23c14:	04023d16 	blt	zero,r16,2450c <_dtoa_r+0x12c8>
   23c18:	b5c00005 	stb	r23,0(r22)
   23c1c:	d9800517 	ldw	r6,20(sp)
   23c20:	d9000f17 	ldw	r4,60(sp)
   23c24:	b5800044 	addi	r22,r22,1
   23c28:	3105883a 	add	r2,r6,r4
   23c2c:	b0806526 	beq	r22,r2,23dc4 <_dtoa_r+0xb80>
   23c30:	d9400717 	ldw	r5,28(sp)
   23c34:	d9001617 	ldw	r4,88(sp)
   23c38:	01800284 	movi	r6,10
   23c3c:	000f883a 	mov	r7,zero
   23c40:	002712c0 	call	2712c <__multadd>
   23c44:	d8800715 	stw	r2,28(sp)
   23c48:	d8800617 	ldw	r2,24(sp)
   23c4c:	14c10c26 	beq	r2,r19,24080 <_dtoa_r+0xe3c>
   23c50:	d9400617 	ldw	r5,24(sp)
   23c54:	d9001617 	ldw	r4,88(sp)
   23c58:	01800284 	movi	r6,10
   23c5c:	000f883a 	mov	r7,zero
   23c60:	002712c0 	call	2712c <__multadd>
   23c64:	d9001617 	ldw	r4,88(sp)
   23c68:	980b883a 	mov	r5,r19
   23c6c:	01800284 	movi	r6,10
   23c70:	000f883a 	mov	r7,zero
   23c74:	d8800615 	stw	r2,24(sp)
   23c78:	002712c0 	call	2712c <__multadd>
   23c7c:	1027883a 	mov	r19,r2
   23c80:	003fc206 	br	23b8c <_dtoa_r+0x948>
   23c84:	2445c83a 	sub	r2,r4,r17
   23c88:	a088983a 	sll	r4,r20,r2
   23c8c:	003e4b06 	br	235bc <_dtoa_r+0x378>
   23c90:	01bfffc4 	movi	r6,-1
   23c94:	00800044 	movi	r2,1
   23c98:	d9800e15 	stw	r6,56(sp)
   23c9c:	d9800f15 	stw	r6,60(sp)
   23ca0:	d8800b15 	stw	r2,44(sp)
   23ca4:	d8c01617 	ldw	r3,88(sp)
   23ca8:	008005c4 	movi	r2,23
   23cac:	18001115 	stw	zero,68(r3)
   23cb0:	1580082e 	bgeu	r2,r22,23cd4 <_dtoa_r+0xa90>
   23cb4:	00c00104 	movi	r3,4
   23cb8:	0009883a 	mov	r4,zero
   23cbc:	18c7883a 	add	r3,r3,r3
   23cc0:	18800504 	addi	r2,r3,20
   23cc4:	21000044 	addi	r4,r4,1
   23cc8:	b0bffc2e 	bgeu	r22,r2,23cbc <_dtoa_r+0xa78>
   23ccc:	d9801617 	ldw	r6,88(sp)
   23cd0:	31001115 	stw	r4,68(r6)
   23cd4:	dc000f17 	ldw	r16,60(sp)
   23cd8:	003e4b06 	br	23608 <_dtoa_r+0x3c4>
   23cdc:	d9801717 	ldw	r6,92(sp)
   23ce0:	0023883a 	mov	r17,zero
   23ce4:	31bfff04 	addi	r6,r6,-4
   23ce8:	d9801715 	stw	r6,92(sp)
   23cec:	003df806 	br	234d0 <_dtoa_r+0x28c>
   23cf0:	00800804 	movi	r2,32
   23cf4:	10c9c83a 	sub	r4,r2,r3
   23cf8:	00c00104 	movi	r3,4
   23cfc:	19005a16 	blt	r3,r4,23e68 <_dtoa_r+0xc24>
   23d00:	008000c4 	movi	r2,3
   23d04:	113f7e16 	blt	r2,r4,23b00 <_dtoa_r+0x8bc>
   23d08:	20800704 	addi	r2,r4,28
   23d0c:	003f7506 	br	23ae4 <_dtoa_r+0x8a0>
   23d10:	d9801717 	ldw	r6,92(sp)
   23d14:	00800044 	movi	r2,1
   23d18:	1180a10e 	bge	r2,r6,23fa0 <_dtoa_r+0xd5c>
   23d1c:	d9800f17 	ldw	r6,60(sp)
   23d20:	d8c01017 	ldw	r3,64(sp)
   23d24:	30bfffc4 	addi	r2,r6,-1
   23d28:	1881c616 	blt	r3,r2,24444 <_dtoa_r+0x1200>
   23d2c:	18a5c83a 	sub	r18,r3,r2
   23d30:	d8800f17 	ldw	r2,60(sp)
   23d34:	10026216 	blt	r2,zero,246c0 <_dtoa_r+0x147c>
   23d38:	dc001117 	ldw	r16,68(sp)
   23d3c:	1007883a 	mov	r3,r2
   23d40:	d9800a17 	ldw	r6,40(sp)
   23d44:	d8801117 	ldw	r2,68(sp)
   23d48:	d9001617 	ldw	r4,88(sp)
   23d4c:	30cd883a 	add	r6,r6,r3
   23d50:	10c5883a 	add	r2,r2,r3
   23d54:	01400044 	movi	r5,1
   23d58:	d9800a15 	stw	r6,40(sp)
   23d5c:	d8801115 	stw	r2,68(sp)
   23d60:	00270f00 	call	270f0 <__i2b>
   23d64:	1027883a 	mov	r19,r2
   23d68:	003f2506 	br	23a00 <_dtoa_r+0x7bc>
   23d6c:	00c000f4 	movhi	r3,3
   23d70:	18f5d804 	addi	r3,r3,-10400
   23d74:	003d6706 	br	23314 <_dtoa_r+0xd0>
   23d78:	dd800517 	ldw	r22,20(sp)
   23d7c:	04000044 	movi	r16,1
   23d80:	00000706 	br	23da0 <_dtoa_r+0xb5c>
   23d84:	d9400717 	ldw	r5,28(sp)
   23d88:	d9001617 	ldw	r4,88(sp)
   23d8c:	01800284 	movi	r6,10
   23d90:	000f883a 	mov	r7,zero
   23d94:	002712c0 	call	2712c <__multadd>
   23d98:	d8800715 	stw	r2,28(sp)
   23d9c:	84000044 	addi	r16,r16,1
   23da0:	d9000717 	ldw	r4,28(sp)
   23da4:	900b883a 	mov	r5,r18
   23da8:	00230000 	call	23000 <quorem>
   23dac:	15c00c04 	addi	r23,r2,48
   23db0:	b5c00005 	stb	r23,0(r22)
   23db4:	d8c00f17 	ldw	r3,60(sp)
   23db8:	b5800044 	addi	r22,r22,1
   23dbc:	80fff116 	blt	r16,r3,23d84 <_dtoa_r+0xb40>
   23dc0:	d8000615 	stw	zero,24(sp)
   23dc4:	d9400717 	ldw	r5,28(sp)
   23dc8:	d9001617 	ldw	r4,88(sp)
   23dcc:	01800044 	movi	r6,1
   23dd0:	0026d500 	call	26d50 <__lshift>
   23dd4:	1009883a 	mov	r4,r2
   23dd8:	900b883a 	mov	r5,r18
   23ddc:	d8800715 	stw	r2,28(sp)
   23de0:	00265680 	call	26568 <__mcmp>
   23de4:	00803c0e 	bge	zero,r2,23ed8 <_dtoa_r+0xc94>
   23de8:	b009883a 	mov	r4,r22
   23dec:	213fffc4 	addi	r4,r4,-1
   23df0:	21400003 	ldbu	r5,0(r4)
   23df4:	00800e44 	movi	r2,57
   23df8:	28c03fcc 	andi	r3,r5,255
   23dfc:	18c0201c 	xori	r3,r3,128
   23e00:	18ffe004 	addi	r3,r3,-128
   23e04:	1881981e 	bne	r3,r2,24468 <_dtoa_r+0x1224>
   23e08:	d9800517 	ldw	r6,20(sp)
   23e0c:	21bff71e 	bne	r4,r6,23dec <_dtoa_r+0xba8>
   23e10:	d8800d17 	ldw	r2,52(sp)
   23e14:	37000044 	addi	fp,r6,1
   23e18:	10800044 	addi	r2,r2,1
   23e1c:	d8800d15 	stw	r2,52(sp)
   23e20:	00800c44 	movi	r2,49
   23e24:	30800005 	stb	r2,0(r6)
   23e28:	d9001617 	ldw	r4,88(sp)
   23e2c:	900b883a 	mov	r5,r18
   23e30:	002640c0 	call	2640c <_Bfree>
   23e34:	983ecd26 	beq	r19,zero,2396c <_dtoa_r+0x728>
   23e38:	d8c00617 	ldw	r3,24(sp)
   23e3c:	18000426 	beq	r3,zero,23e50 <_dtoa_r+0xc0c>
   23e40:	1cc00326 	beq	r3,r19,23e50 <_dtoa_r+0xc0c>
   23e44:	d9001617 	ldw	r4,88(sp)
   23e48:	180b883a 	mov	r5,r3
   23e4c:	002640c0 	call	2640c <_Bfree>
   23e50:	d9001617 	ldw	r4,88(sp)
   23e54:	980b883a 	mov	r5,r19
   23e58:	002640c0 	call	2640c <_Bfree>
   23e5c:	003ec306 	br	2396c <_dtoa_r+0x728>
   23e60:	1805883a 	mov	r2,r3
   23e64:	003eeb06 	br	23a14 <_dtoa_r+0x7d0>
   23e68:	d9800a17 	ldw	r6,40(sp)
   23e6c:	d8c01117 	ldw	r3,68(sp)
   23e70:	20bfff04 	addi	r2,r4,-4
   23e74:	308d883a 	add	r6,r6,r2
   23e78:	1887883a 	add	r3,r3,r2
   23e7c:	80a1883a 	add	r16,r16,r2
   23e80:	d9800a15 	stw	r6,40(sp)
   23e84:	d8c01115 	stw	r3,68(sp)
   23e88:	003f1d06 	br	23b00 <_dtoa_r+0x8bc>
   23e8c:	a03f0c1e 	bne	r20,zero,23ac0 <_dtoa_r+0x87c>
   23e90:	00800434 	movhi	r2,16
   23e94:	10bfffc4 	addi	r2,r2,-1
   23e98:	a884703a 	and	r2,r21,r2
   23e9c:	103f081e 	bne	r2,zero,23ac0 <_dtoa_r+0x87c>
   23ea0:	a89ffc2c 	andhi	r2,r21,32752
   23ea4:	103f0626 	beq	r2,zero,23ac0 <_dtoa_r+0x87c>
   23ea8:	d8c01117 	ldw	r3,68(sp)
   23eac:	d9000a17 	ldw	r4,40(sp)
   23eb0:	18c00044 	addi	r3,r3,1
   23eb4:	21000044 	addi	r4,r4,1
   23eb8:	d8c01115 	stw	r3,68(sp)
   23ebc:	d9000a15 	stw	r4,40(sp)
   23ec0:	003f0006 	br	23ac4 <_dtoa_r+0x880>
   23ec4:	d9400717 	ldw	r5,28(sp)
   23ec8:	d9001617 	ldw	r4,88(sp)
   23ecc:	00272580 	call	27258 <__pow5mult>
   23ed0:	d8800715 	stw	r2,28(sp)
   23ed4:	003eed06 	br	23a8c <_dtoa_r+0x848>
   23ed8:	1000021e 	bne	r2,zero,23ee4 <_dtoa_r+0xca0>
   23edc:	b880004c 	andi	r2,r23,1
   23ee0:	103fc11e 	bne	r2,zero,23de8 <_dtoa_r+0xba4>
   23ee4:	b5bfffc4 	addi	r22,r22,-1
   23ee8:	b0c00007 	ldb	r3,0(r22)
   23eec:	00800c04 	movi	r2,48
   23ef0:	18bffc26 	beq	r3,r2,23ee4 <_dtoa_r+0xca0>
   23ef4:	b7000044 	addi	fp,r22,1
   23ef8:	003fcb06 	br	23e28 <_dtoa_r+0xbe4>
   23efc:	d9800d17 	ldw	r6,52(sp)
   23f00:	018fc83a 	sub	r7,zero,r6
   23f04:	3801f726 	beq	r7,zero,246e4 <_dtoa_r+0x14a0>
   23f08:	398003cc 	andi	r6,r7,15
   23f0c:	300c90fa 	slli	r6,r6,3
   23f10:	014000f4 	movhi	r5,3
   23f14:	2975f504 	addi	r5,r5,-10284
   23f18:	d9001217 	ldw	r4,72(sp)
   23f1c:	314d883a 	add	r6,r6,r5
   23f20:	30c00117 	ldw	r3,4(r6)
   23f24:	30800017 	ldw	r2,0(r6)
   23f28:	d9401317 	ldw	r5,76(sp)
   23f2c:	3821d13a 	srai	r16,r7,4
   23f30:	100d883a 	mov	r6,r2
   23f34:	180f883a 	mov	r7,r3
   23f38:	00294600 	call	29460 <__muldf3>
   23f3c:	1011883a 	mov	r8,r2
   23f40:	1813883a 	mov	r9,r3
   23f44:	1029883a 	mov	r20,r2
   23f48:	182b883a 	mov	r21,r3
   23f4c:	8001e526 	beq	r16,zero,246e4 <_dtoa_r+0x14a0>
   23f50:	05800084 	movi	r22,2
   23f54:	044000f4 	movhi	r17,3
   23f58:	8c762704 	addi	r17,r17,-10084
   23f5c:	8080004c 	andi	r2,r16,1
   23f60:	1005003a 	cmpeq	r2,r2,zero
   23f64:	1000081e 	bne	r2,zero,23f88 <_dtoa_r+0xd44>
   23f68:	89800017 	ldw	r6,0(r17)
   23f6c:	89c00117 	ldw	r7,4(r17)
   23f70:	480b883a 	mov	r5,r9
   23f74:	4009883a 	mov	r4,r8
   23f78:	00294600 	call	29460 <__muldf3>
   23f7c:	1011883a 	mov	r8,r2
   23f80:	b5800044 	addi	r22,r22,1
   23f84:	1813883a 	mov	r9,r3
   23f88:	8021d07a 	srai	r16,r16,1
   23f8c:	8c400204 	addi	r17,r17,8
   23f90:	803ff21e 	bne	r16,zero,23f5c <_dtoa_r+0xd18>
   23f94:	4029883a 	mov	r20,r8
   23f98:	482b883a 	mov	r21,r9
   23f9c:	003dca06 	br	236c8 <_dtoa_r+0x484>
   23fa0:	d9000817 	ldw	r4,32(sp)
   23fa4:	2005003a 	cmpeq	r2,r4,zero
   23fa8:	1001f61e 	bne	r2,zero,24784 <_dtoa_r+0x1540>
   23fac:	dc001117 	ldw	r16,68(sp)
   23fb0:	dc801017 	ldw	r18,64(sp)
   23fb4:	18c10cc4 	addi	r3,r3,1075
   23fb8:	003f6106 	br	23d40 <_dtoa_r+0xafc>
   23fbc:	d8000b15 	stw	zero,44(sp)
   23fc0:	d9802617 	ldw	r6,152(sp)
   23fc4:	d8c00d17 	ldw	r3,52(sp)
   23fc8:	30800044 	addi	r2,r6,1
   23fcc:	18ad883a 	add	r22,r3,r2
   23fd0:	b13fffc4 	addi	r4,r22,-1
   23fd4:	d9000e15 	stw	r4,56(sp)
   23fd8:	0581f60e 	bge	zero,r22,247b4 <_dtoa_r+0x1570>
   23fdc:	dd800f15 	stw	r22,60(sp)
   23fe0:	003f3006 	br	23ca4 <_dtoa_r+0xa60>
   23fe4:	d8000b15 	stw	zero,44(sp)
   23fe8:	d9002617 	ldw	r4,152(sp)
   23fec:	0101eb0e 	bge	zero,r4,2479c <_dtoa_r+0x1558>
   23ff0:	202d883a 	mov	r22,r4
   23ff4:	d9000e15 	stw	r4,56(sp)
   23ff8:	d9000f15 	stw	r4,60(sp)
   23ffc:	003f2906 	br	23ca4 <_dtoa_r+0xa60>
   24000:	01800044 	movi	r6,1
   24004:	d9800b15 	stw	r6,44(sp)
   24008:	003ff706 	br	23fe8 <_dtoa_r+0xda4>
   2400c:	01000044 	movi	r4,1
   24010:	d9000b15 	stw	r4,44(sp)
   24014:	003fea06 	br	23fc0 <_dtoa_r+0xd7c>
   24018:	04000c0e 	bge	zero,r16,2404c <_dtoa_r+0xe08>
   2401c:	d9400717 	ldw	r5,28(sp)
   24020:	d9001617 	ldw	r4,88(sp)
   24024:	01800044 	movi	r6,1
   24028:	0026d500 	call	26d50 <__lshift>
   2402c:	1009883a 	mov	r4,r2
   24030:	900b883a 	mov	r5,r18
   24034:	d8800715 	stw	r2,28(sp)
   24038:	00265680 	call	26568 <__mcmp>
   2403c:	0081e00e 	bge	zero,r2,247c0 <_dtoa_r+0x157c>
   24040:	bdc00044 	addi	r23,r23,1
   24044:	00800e84 	movi	r2,58
   24048:	b881a226 	beq	r23,r2,246d4 <_dtoa_r+0x1490>
   2404c:	b7000044 	addi	fp,r22,1
   24050:	b5c00005 	stb	r23,0(r22)
   24054:	003f7406 	br	23e28 <_dtoa_r+0xbe4>
   24058:	00800e44 	movi	r2,57
   2405c:	b8819d26 	beq	r23,r2,246d4 <_dtoa_r+0x1490>
   24060:	053ffa0e 	bge	zero,r20,2404c <_dtoa_r+0xe08>
   24064:	8dc00c44 	addi	r23,r17,49
   24068:	003ff806 	br	2404c <_dtoa_r+0xe08>
   2406c:	d9001617 	ldw	r4,88(sp)
   24070:	a80b883a 	mov	r5,r21
   24074:	04000044 	movi	r16,1
   24078:	002640c0 	call	2640c <_Bfree>
   2407c:	003edf06 	br	23bfc <_dtoa_r+0x9b8>
   24080:	d9001617 	ldw	r4,88(sp)
   24084:	980b883a 	mov	r5,r19
   24088:	01800284 	movi	r6,10
   2408c:	000f883a 	mov	r7,zero
   24090:	002712c0 	call	2712c <__multadd>
   24094:	1027883a 	mov	r19,r2
   24098:	d8800615 	stw	r2,24(sp)
   2409c:	003ebb06 	br	23b8c <_dtoa_r+0x948>
   240a0:	d9801117 	ldw	r6,68(sp)
   240a4:	d8800d17 	ldw	r2,52(sp)
   240a8:	d8000915 	stw	zero,36(sp)
   240ac:	308dc83a 	sub	r6,r6,r2
   240b0:	0087c83a 	sub	r3,zero,r2
   240b4:	d9801115 	stw	r6,68(sp)
   240b8:	d8c01015 	stw	r3,64(sp)
   240bc:	003cfe06 	br	234b8 <_dtoa_r+0x274>
   240c0:	018dc83a 	sub	r6,zero,r6
   240c4:	d9801115 	stw	r6,68(sp)
   240c8:	d8000a15 	stw	zero,40(sp)
   240cc:	003cf306 	br	2349c <_dtoa_r+0x258>
   240d0:	d9000d17 	ldw	r4,52(sp)
   240d4:	0029d240 	call	29d24 <__floatsidf>
   240d8:	880b883a 	mov	r5,r17
   240dc:	8009883a 	mov	r4,r16
   240e0:	180f883a 	mov	r7,r3
   240e4:	100d883a 	mov	r6,r2
   240e8:	0029b040 	call	29b04 <__nedf2>
   240ec:	103ce126 	beq	r2,zero,23474 <_dtoa_r+0x230>
   240f0:	d9800d17 	ldw	r6,52(sp)
   240f4:	31bfffc4 	addi	r6,r6,-1
   240f8:	d9800d15 	stw	r6,52(sp)
   240fc:	003cdd06 	br	23474 <_dtoa_r+0x230>
   24100:	d9000717 	ldw	r4,28(sp)
   24104:	900b883a 	mov	r5,r18
   24108:	00265680 	call	26568 <__mcmp>
   2410c:	103e8d0e 	bge	r2,zero,23b44 <_dtoa_r+0x900>
   24110:	d9400717 	ldw	r5,28(sp)
   24114:	d9001617 	ldw	r4,88(sp)
   24118:	01800284 	movi	r6,10
   2411c:	000f883a 	mov	r7,zero
   24120:	002712c0 	call	2712c <__multadd>
   24124:	d9800d17 	ldw	r6,52(sp)
   24128:	d8800715 	stw	r2,28(sp)
   2412c:	31bfffc4 	addi	r6,r6,-1
   24130:	d9800d15 	stw	r6,52(sp)
   24134:	b001a71e 	bne	r22,zero,247d4 <_dtoa_r+0x1590>
   24138:	d8800e17 	ldw	r2,56(sp)
   2413c:	d8800f15 	stw	r2,60(sp)
   24140:	003e8006 	br	23b44 <_dtoa_r+0x900>
   24144:	90800417 	ldw	r2,16(r18)
   24148:	1085883a 	add	r2,r2,r2
   2414c:	1085883a 	add	r2,r2,r2
   24150:	1485883a 	add	r2,r2,r18
   24154:	11000417 	ldw	r4,16(r2)
   24158:	00264340 	call	26434 <__hi0bits>
   2415c:	00c00804 	movi	r3,32
   24160:	1887c83a 	sub	r3,r3,r2
   24164:	003e5a06 	br	23ad0 <_dtoa_r+0x88c>
   24168:	d9400717 	ldw	r5,28(sp)
   2416c:	d9801017 	ldw	r6,64(sp)
   24170:	d9001617 	ldw	r4,88(sp)
   24174:	00272580 	call	27258 <__pow5mult>
   24178:	d8800715 	stw	r2,28(sp)
   2417c:	003e4306 	br	23a8c <_dtoa_r+0x848>
   24180:	d9800f17 	ldw	r6,60(sp)
   24184:	d8800d17 	ldw	r2,52(sp)
   24188:	d9800315 	stw	r6,12(sp)
   2418c:	d8800415 	stw	r2,16(sp)
   24190:	d8c00b17 	ldw	r3,44(sp)
   24194:	1805003a 	cmpeq	r2,r3,zero
   24198:	1000e21e 	bne	r2,zero,24524 <_dtoa_r+0x12e0>
   2419c:	d9000317 	ldw	r4,12(sp)
   241a0:	0005883a 	mov	r2,zero
   241a4:	00cff834 	movhi	r3,16352
   241a8:	200c90fa 	slli	r6,r4,3
   241ac:	010000f4 	movhi	r4,3
   241b0:	2135f504 	addi	r4,r4,-10284
   241b4:	180b883a 	mov	r5,r3
   241b8:	310d883a 	add	r6,r6,r4
   241bc:	327fff17 	ldw	r9,-4(r6)
   241c0:	323ffe17 	ldw	r8,-8(r6)
   241c4:	1009883a 	mov	r4,r2
   241c8:	480f883a 	mov	r7,r9
   241cc:	400d883a 	mov	r6,r8
   241d0:	00298240 	call	29824 <__divdf3>
   241d4:	180b883a 	mov	r5,r3
   241d8:	b00d883a 	mov	r6,r22
   241dc:	b80f883a 	mov	r7,r23
   241e0:	1009883a 	mov	r4,r2
   241e4:	002936c0 	call	2936c <__subdf3>
   241e8:	a80b883a 	mov	r5,r21
   241ec:	a009883a 	mov	r4,r20
   241f0:	d8c01915 	stw	r3,100(sp)
   241f4:	d8801815 	stw	r2,96(sp)
   241f8:	0029e1c0 	call	29e1c <__fixdfsi>
   241fc:	1009883a 	mov	r4,r2
   24200:	1027883a 	mov	r19,r2
   24204:	0029d240 	call	29d24 <__floatsidf>
   24208:	a80b883a 	mov	r5,r21
   2420c:	a009883a 	mov	r4,r20
   24210:	180f883a 	mov	r7,r3
   24214:	100d883a 	mov	r6,r2
   24218:	002936c0 	call	2936c <__subdf3>
   2421c:	d9801817 	ldw	r6,96(sp)
   24220:	1823883a 	mov	r17,r3
   24224:	d8801415 	stw	r2,80(sp)
   24228:	302d883a 	mov	r22,r6
   2422c:	d9800517 	ldw	r6,20(sp)
   24230:	9cc00c04 	addi	r19,r19,48
   24234:	dc401515 	stw	r17,84(sp)
   24238:	d8c01917 	ldw	r3,100(sp)
   2423c:	34c00005 	stb	r19,0(r6)
   24240:	d8800517 	ldw	r2,20(sp)
   24244:	d9401917 	ldw	r5,100(sp)
   24248:	d9801417 	ldw	r6,80(sp)
   2424c:	b009883a 	mov	r4,r22
   24250:	880f883a 	mov	r7,r17
   24254:	182f883a 	mov	r23,r3
   24258:	17000044 	addi	fp,r2,1
   2425c:	0029b8c0 	call	29b8c <__gtdf2>
   24260:	00804e16 	blt	zero,r2,2439c <_dtoa_r+0x1158>
   24264:	d9801417 	ldw	r6,80(sp)
   24268:	0005883a 	mov	r2,zero
   2426c:	00cffc34 	movhi	r3,16368
   24270:	180b883a 	mov	r5,r3
   24274:	880f883a 	mov	r7,r17
   24278:	1009883a 	mov	r4,r2
   2427c:	002936c0 	call	2936c <__subdf3>
   24280:	d9401917 	ldw	r5,100(sp)
   24284:	180f883a 	mov	r7,r3
   24288:	b009883a 	mov	r4,r22
   2428c:	100d883a 	mov	r6,r2
   24290:	0029b8c0 	call	29b8c <__gtdf2>
   24294:	00bda216 	blt	zero,r2,23920 <_dtoa_r+0x6dc>
   24298:	d8c00317 	ldw	r3,12(sp)
   2429c:	00800044 	movi	r2,1
   242a0:	10c01216 	blt	r2,r3,242ec <_dtoa_r+0x10a8>
   242a4:	003d4506 	br	237bc <_dtoa_r+0x578>
   242a8:	d9801417 	ldw	r6,80(sp)
   242ac:	0005883a 	mov	r2,zero
   242b0:	00cffc34 	movhi	r3,16368
   242b4:	180b883a 	mov	r5,r3
   242b8:	880f883a 	mov	r7,r17
   242bc:	1009883a 	mov	r4,r2
   242c0:	002936c0 	call	2936c <__subdf3>
   242c4:	d9c01b17 	ldw	r7,108(sp)
   242c8:	180b883a 	mov	r5,r3
   242cc:	1009883a 	mov	r4,r2
   242d0:	b00d883a 	mov	r6,r22
   242d4:	0029c9c0 	call	29c9c <__ltdf2>
   242d8:	103d9116 	blt	r2,zero,23920 <_dtoa_r+0x6dc>
   242dc:	d9800517 	ldw	r6,20(sp)
   242e0:	d9000317 	ldw	r4,12(sp)
   242e4:	3105883a 	add	r2,r6,r4
   242e8:	e0bd3426 	beq	fp,r2,237bc <_dtoa_r+0x578>
   242ec:	04500934 	movhi	r17,16420
   242f0:	0021883a 	mov	r16,zero
   242f4:	b80b883a 	mov	r5,r23
   242f8:	b009883a 	mov	r4,r22
   242fc:	800d883a 	mov	r6,r16
   24300:	880f883a 	mov	r7,r17
   24304:	00294600 	call	29460 <__muldf3>
   24308:	d9401517 	ldw	r5,84(sp)
   2430c:	d9001417 	ldw	r4,80(sp)
   24310:	880f883a 	mov	r7,r17
   24314:	000d883a 	mov	r6,zero
   24318:	d8801a15 	stw	r2,104(sp)
   2431c:	d8c01b15 	stw	r3,108(sp)
   24320:	00294600 	call	29460 <__muldf3>
   24324:	180b883a 	mov	r5,r3
   24328:	1009883a 	mov	r4,r2
   2432c:	1823883a 	mov	r17,r3
   24330:	1021883a 	mov	r16,r2
   24334:	0029e1c0 	call	29e1c <__fixdfsi>
   24338:	1009883a 	mov	r4,r2
   2433c:	102b883a 	mov	r21,r2
   24340:	0029d240 	call	29d24 <__floatsidf>
   24344:	880b883a 	mov	r5,r17
   24348:	8009883a 	mov	r4,r16
   2434c:	180f883a 	mov	r7,r3
   24350:	100d883a 	mov	r6,r2
   24354:	002936c0 	call	2936c <__subdf3>
   24358:	1021883a 	mov	r16,r2
   2435c:	d9001b17 	ldw	r4,108(sp)
   24360:	1823883a 	mov	r17,r3
   24364:	dc001415 	stw	r16,80(sp)
   24368:	ad400c04 	addi	r21,r21,48
   2436c:	dc401515 	stw	r17,84(sp)
   24370:	d8801a17 	ldw	r2,104(sp)
   24374:	e5400005 	stb	r21,0(fp)
   24378:	202f883a 	mov	r23,r4
   2437c:	d9c01b17 	ldw	r7,108(sp)
   24380:	d9001417 	ldw	r4,80(sp)
   24384:	880b883a 	mov	r5,r17
   24388:	100d883a 	mov	r6,r2
   2438c:	102d883a 	mov	r22,r2
   24390:	e7000044 	addi	fp,fp,1
   24394:	0029c9c0 	call	29c9c <__ltdf2>
   24398:	103fc30e 	bge	r2,zero,242a8 <_dtoa_r+0x1064>
   2439c:	d9000417 	ldw	r4,16(sp)
   243a0:	d9000d15 	stw	r4,52(sp)
   243a4:	003d7106 	br	2396c <_dtoa_r+0x728>
   243a8:	d9801717 	ldw	r6,92(sp)
   243ac:	00800084 	movi	r2,2
   243b0:	11bde60e 	bge	r2,r6,23b4c <_dtoa_r+0x908>
   243b4:	203cfb1e 	bne	r4,zero,237a4 <_dtoa_r+0x560>
   243b8:	d9001617 	ldw	r4,88(sp)
   243bc:	900b883a 	mov	r5,r18
   243c0:	01800144 	movi	r6,5
   243c4:	000f883a 	mov	r7,zero
   243c8:	002712c0 	call	2712c <__multadd>
   243cc:	d9000717 	ldw	r4,28(sp)
   243d0:	100b883a 	mov	r5,r2
   243d4:	1025883a 	mov	r18,r2
   243d8:	00265680 	call	26568 <__mcmp>
   243dc:	00bcf10e 	bge	zero,r2,237a4 <_dtoa_r+0x560>
   243e0:	d8c00d17 	ldw	r3,52(sp)
   243e4:	d9000517 	ldw	r4,20(sp)
   243e8:	d8000615 	stw	zero,24(sp)
   243ec:	18c00044 	addi	r3,r3,1
   243f0:	d8c00d15 	stw	r3,52(sp)
   243f4:	00800c44 	movi	r2,49
   243f8:	27000044 	addi	fp,r4,1
   243fc:	20800005 	stb	r2,0(r4)
   24400:	003e8906 	br	23e28 <_dtoa_r+0xbe4>
   24404:	d8c00517 	ldw	r3,20(sp)
   24408:	003bc206 	br	23314 <_dtoa_r+0xd0>
   2440c:	018000f4 	movhi	r6,3
   24410:	31b62704 	addi	r6,r6,-10084
   24414:	30c00917 	ldw	r3,36(r6)
   24418:	30800817 	ldw	r2,32(r6)
   2441c:	d9001217 	ldw	r4,72(sp)
   24420:	d9401317 	ldw	r5,76(sp)
   24424:	180f883a 	mov	r7,r3
   24428:	100d883a 	mov	r6,r2
   2442c:	00298240 	call	29824 <__divdf3>
   24430:	948003cc 	andi	r18,r18,15
   24434:	058000c4 	movi	r22,3
   24438:	1029883a 	mov	r20,r2
   2443c:	182b883a 	mov	r21,r3
   24440:	003c8906 	br	23668 <_dtoa_r+0x424>
   24444:	d9001017 	ldw	r4,64(sp)
   24448:	d9800917 	ldw	r6,36(sp)
   2444c:	0025883a 	mov	r18,zero
   24450:	1105c83a 	sub	r2,r2,r4
   24454:	2089883a 	add	r4,r4,r2
   24458:	308d883a 	add	r6,r6,r2
   2445c:	d9001015 	stw	r4,64(sp)
   24460:	d9800915 	stw	r6,36(sp)
   24464:	003e3206 	br	23d30 <_dtoa_r+0xaec>
   24468:	28800044 	addi	r2,r5,1
   2446c:	27000044 	addi	fp,r4,1
   24470:	20800005 	stb	r2,0(r4)
   24474:	003e6c06 	br	23e28 <_dtoa_r+0xbe4>
   24478:	d8800f17 	ldw	r2,60(sp)
   2447c:	00bce016 	blt	zero,r2,23800 <_dtoa_r+0x5bc>
   24480:	d9800f17 	ldw	r6,60(sp)
   24484:	303cc51e 	bne	r6,zero,2379c <_dtoa_r+0x558>
   24488:	0005883a 	mov	r2,zero
   2448c:	00d00534 	movhi	r3,16404
   24490:	980b883a 	mov	r5,r19
   24494:	180f883a 	mov	r7,r3
   24498:	9009883a 	mov	r4,r18
   2449c:	100d883a 	mov	r6,r2
   244a0:	00294600 	call	29460 <__muldf3>
   244a4:	180b883a 	mov	r5,r3
   244a8:	a80f883a 	mov	r7,r21
   244ac:	1009883a 	mov	r4,r2
   244b0:	a00d883a 	mov	r6,r20
   244b4:	0029c140 	call	29c14 <__gedf2>
   244b8:	103cb80e 	bge	r2,zero,2379c <_dtoa_r+0x558>
   244bc:	0027883a 	mov	r19,zero
   244c0:	0025883a 	mov	r18,zero
   244c4:	003fc606 	br	243e0 <_dtoa_r+0x119c>
   244c8:	99400117 	ldw	r5,4(r19)
   244cc:	d9001617 	ldw	r4,88(sp)
   244d0:	002698c0 	call	2698c <_Balloc>
   244d4:	99800417 	ldw	r6,16(r19)
   244d8:	11000304 	addi	r4,r2,12
   244dc:	99400304 	addi	r5,r19,12
   244e0:	318d883a 	add	r6,r6,r6
   244e4:	318d883a 	add	r6,r6,r6
   244e8:	31800204 	addi	r6,r6,8
   244ec:	1023883a 	mov	r17,r2
   244f0:	00261f40 	call	261f4 <memcpy>
   244f4:	d9001617 	ldw	r4,88(sp)
   244f8:	880b883a 	mov	r5,r17
   244fc:	01800044 	movi	r6,1
   24500:	0026d500 	call	26d50 <__lshift>
   24504:	100b883a 	mov	r5,r2
   24508:	003d9c06 	br	23b7c <_dtoa_r+0x938>
   2450c:	00800e44 	movi	r2,57
   24510:	b8807026 	beq	r23,r2,246d4 <_dtoa_r+0x1490>
   24514:	b8800044 	addi	r2,r23,1
   24518:	b7000044 	addi	fp,r22,1
   2451c:	b0800005 	stb	r2,0(r22)
   24520:	003e4106 	br	23e28 <_dtoa_r+0xbe4>
   24524:	d8800317 	ldw	r2,12(sp)
   24528:	018000f4 	movhi	r6,3
   2452c:	31b5f504 	addi	r6,r6,-10284
   24530:	b009883a 	mov	r4,r22
   24534:	100e90fa 	slli	r7,r2,3
   24538:	b80b883a 	mov	r5,r23
   2453c:	398f883a 	add	r7,r7,r6
   24540:	38bffe17 	ldw	r2,-8(r7)
   24544:	d9800517 	ldw	r6,20(sp)
   24548:	38ffff17 	ldw	r3,-4(r7)
   2454c:	37000044 	addi	fp,r6,1
   24550:	180f883a 	mov	r7,r3
   24554:	100d883a 	mov	r6,r2
   24558:	00294600 	call	29460 <__muldf3>
   2455c:	a80b883a 	mov	r5,r21
   24560:	a009883a 	mov	r4,r20
   24564:	182f883a 	mov	r23,r3
   24568:	102d883a 	mov	r22,r2
   2456c:	0029e1c0 	call	29e1c <__fixdfsi>
   24570:	1009883a 	mov	r4,r2
   24574:	1027883a 	mov	r19,r2
   24578:	0029d240 	call	29d24 <__floatsidf>
   2457c:	a80b883a 	mov	r5,r21
   24580:	a009883a 	mov	r4,r20
   24584:	180f883a 	mov	r7,r3
   24588:	100d883a 	mov	r6,r2
   2458c:	002936c0 	call	2936c <__subdf3>
   24590:	180b883a 	mov	r5,r3
   24594:	d8c00517 	ldw	r3,20(sp)
   24598:	9cc00c04 	addi	r19,r19,48
   2459c:	1009883a 	mov	r4,r2
   245a0:	1cc00005 	stb	r19,0(r3)
   245a4:	2021883a 	mov	r16,r4
   245a8:	d9000317 	ldw	r4,12(sp)
   245ac:	00800044 	movi	r2,1
   245b0:	2823883a 	mov	r17,r5
   245b4:	20802226 	beq	r4,r2,24640 <_dtoa_r+0x13fc>
   245b8:	1029883a 	mov	r20,r2
   245bc:	0005883a 	mov	r2,zero
   245c0:	00d00934 	movhi	r3,16420
   245c4:	180f883a 	mov	r7,r3
   245c8:	100d883a 	mov	r6,r2
   245cc:	880b883a 	mov	r5,r17
   245d0:	8009883a 	mov	r4,r16
   245d4:	00294600 	call	29460 <__muldf3>
   245d8:	180b883a 	mov	r5,r3
   245dc:	1009883a 	mov	r4,r2
   245e0:	1823883a 	mov	r17,r3
   245e4:	1021883a 	mov	r16,r2
   245e8:	0029e1c0 	call	29e1c <__fixdfsi>
   245ec:	1009883a 	mov	r4,r2
   245f0:	102b883a 	mov	r21,r2
   245f4:	0029d240 	call	29d24 <__floatsidf>
   245f8:	880b883a 	mov	r5,r17
   245fc:	8009883a 	mov	r4,r16
   24600:	180f883a 	mov	r7,r3
   24604:	100d883a 	mov	r6,r2
   24608:	002936c0 	call	2936c <__subdf3>
   2460c:	180b883a 	mov	r5,r3
   24610:	d8c00517 	ldw	r3,20(sp)
   24614:	1009883a 	mov	r4,r2
   24618:	ad400c04 	addi	r21,r21,48
   2461c:	1d05883a 	add	r2,r3,r20
   24620:	15400005 	stb	r21,0(r2)
   24624:	2021883a 	mov	r16,r4
   24628:	d9000317 	ldw	r4,12(sp)
   2462c:	a5000044 	addi	r20,r20,1
   24630:	2823883a 	mov	r17,r5
   24634:	a13fe11e 	bne	r20,r4,245bc <_dtoa_r+0x1378>
   24638:	e505883a 	add	r2,fp,r20
   2463c:	173fffc4 	addi	fp,r2,-1
   24640:	0025883a 	mov	r18,zero
   24644:	04cff834 	movhi	r19,16352
   24648:	b009883a 	mov	r4,r22
   2464c:	b80b883a 	mov	r5,r23
   24650:	900d883a 	mov	r6,r18
   24654:	980f883a 	mov	r7,r19
   24658:	00293ec0 	call	293ec <__adddf3>
   2465c:	180b883a 	mov	r5,r3
   24660:	1009883a 	mov	r4,r2
   24664:	800d883a 	mov	r6,r16
   24668:	880f883a 	mov	r7,r17
   2466c:	0029c9c0 	call	29c9c <__ltdf2>
   24670:	103cab16 	blt	r2,zero,23920 <_dtoa_r+0x6dc>
   24674:	0009883a 	mov	r4,zero
   24678:	980b883a 	mov	r5,r19
   2467c:	b80f883a 	mov	r7,r23
   24680:	b00d883a 	mov	r6,r22
   24684:	002936c0 	call	2936c <__subdf3>
   24688:	180b883a 	mov	r5,r3
   2468c:	880f883a 	mov	r7,r17
   24690:	1009883a 	mov	r4,r2
   24694:	800d883a 	mov	r6,r16
   24698:	0029b8c0 	call	29b8c <__gtdf2>
   2469c:	00bc470e 	bge	zero,r2,237bc <_dtoa_r+0x578>
   246a0:	00c00c04 	movi	r3,48
   246a4:	e73fffc4 	addi	fp,fp,-1
   246a8:	e0800007 	ldb	r2,0(fp)
   246ac:	10fffd26 	beq	r2,r3,246a4 <_dtoa_r+0x1460>
   246b0:	d9800417 	ldw	r6,16(sp)
   246b4:	e7000044 	addi	fp,fp,1
   246b8:	d9800d15 	stw	r6,52(sp)
   246bc:	003cab06 	br	2396c <_dtoa_r+0x728>
   246c0:	d8c00f17 	ldw	r3,60(sp)
   246c4:	d9001117 	ldw	r4,68(sp)
   246c8:	20e1c83a 	sub	r16,r4,r3
   246cc:	0007883a 	mov	r3,zero
   246d0:	003d9b06 	br	23d40 <_dtoa_r+0xafc>
   246d4:	00800e44 	movi	r2,57
   246d8:	b0800005 	stb	r2,0(r22)
   246dc:	b5800044 	addi	r22,r22,1
   246e0:	003dc106 	br	23de8 <_dtoa_r+0xba4>
   246e4:	05800084 	movi	r22,2
   246e8:	003bf706 	br	236c8 <_dtoa_r+0x484>
   246ec:	d9000f17 	ldw	r4,60(sp)
   246f0:	013c000e 	bge	zero,r4,236f4 <_dtoa_r+0x4b0>
   246f4:	d9800e17 	ldw	r6,56(sp)
   246f8:	01bc300e 	bge	zero,r6,237bc <_dtoa_r+0x578>
   246fc:	0005883a 	mov	r2,zero
   24700:	00d00934 	movhi	r3,16420
   24704:	a80b883a 	mov	r5,r21
   24708:	180f883a 	mov	r7,r3
   2470c:	a009883a 	mov	r4,r20
   24710:	100d883a 	mov	r6,r2
   24714:	00294600 	call	29460 <__muldf3>
   24718:	b1000044 	addi	r4,r22,1
   2471c:	1021883a 	mov	r16,r2
   24720:	1823883a 	mov	r17,r3
   24724:	0029d240 	call	29d24 <__floatsidf>
   24728:	880b883a 	mov	r5,r17
   2472c:	8009883a 	mov	r4,r16
   24730:	180f883a 	mov	r7,r3
   24734:	100d883a 	mov	r6,r2
   24738:	00294600 	call	29460 <__muldf3>
   2473c:	0011883a 	mov	r8,zero
   24740:	02500734 	movhi	r9,16412
   24744:	180b883a 	mov	r5,r3
   24748:	480f883a 	mov	r7,r9
   2474c:	1009883a 	mov	r4,r2
   24750:	400d883a 	mov	r6,r8
   24754:	00293ec0 	call	293ec <__adddf3>
   24758:	102d883a 	mov	r22,r2
   2475c:	00bf3034 	movhi	r2,64704
   24760:	10ef883a 	add	r23,r2,r3
   24764:	d8800d17 	ldw	r2,52(sp)
   24768:	d8c00e17 	ldw	r3,56(sp)
   2476c:	8029883a 	mov	r20,r16
   24770:	10bfffc4 	addi	r2,r2,-1
   24774:	882b883a 	mov	r21,r17
   24778:	d8800415 	stw	r2,16(sp)
   2477c:	d8c00315 	stw	r3,12(sp)
   24780:	003e8306 	br	24190 <_dtoa_r+0xf4c>
   24784:	d8800117 	ldw	r2,4(sp)
   24788:	dc001117 	ldw	r16,68(sp)
   2478c:	dc801017 	ldw	r18,64(sp)
   24790:	00c00d84 	movi	r3,54
   24794:	1887c83a 	sub	r3,r3,r2
   24798:	003d6906 	br	23d40 <_dtoa_r+0xafc>
   2479c:	01800044 	movi	r6,1
   247a0:	3021883a 	mov	r16,r6
   247a4:	d9800f15 	stw	r6,60(sp)
   247a8:	d9802615 	stw	r6,152(sp)
   247ac:	d9800e15 	stw	r6,56(sp)
   247b0:	003b9306 	br	23600 <_dtoa_r+0x3bc>
   247b4:	b021883a 	mov	r16,r22
   247b8:	dd800f15 	stw	r22,60(sp)
   247bc:	003b9006 	br	23600 <_dtoa_r+0x3bc>
   247c0:	103e221e 	bne	r2,zero,2404c <_dtoa_r+0xe08>
   247c4:	b880004c 	andi	r2,r23,1
   247c8:	1005003a 	cmpeq	r2,r2,zero
   247cc:	103e1f1e 	bne	r2,zero,2404c <_dtoa_r+0xe08>
   247d0:	003e1b06 	br	24040 <_dtoa_r+0xdfc>
   247d4:	d9001617 	ldw	r4,88(sp)
   247d8:	980b883a 	mov	r5,r19
   247dc:	01800284 	movi	r6,10
   247e0:	000f883a 	mov	r7,zero
   247e4:	002712c0 	call	2712c <__multadd>
   247e8:	d8c00e17 	ldw	r3,56(sp)
   247ec:	1027883a 	mov	r19,r2
   247f0:	d8c00f15 	stw	r3,60(sp)
   247f4:	003cd306 	br	23b44 <_dtoa_r+0x900>

000247f8 <_fflush_r>:
   247f8:	defffb04 	addi	sp,sp,-20
   247fc:	dcc00315 	stw	r19,12(sp)
   24800:	dc800215 	stw	r18,8(sp)
   24804:	dfc00415 	stw	ra,16(sp)
   24808:	dc400115 	stw	r17,4(sp)
   2480c:	dc000015 	stw	r16,0(sp)
   24810:	2027883a 	mov	r19,r4
   24814:	2825883a 	mov	r18,r5
   24818:	20000226 	beq	r4,zero,24824 <_fflush_r+0x2c>
   2481c:	20800e17 	ldw	r2,56(r4)
   24820:	10005626 	beq	r2,zero,2497c <_fflush_r+0x184>
   24824:	9100030b 	ldhu	r4,12(r18)
   24828:	20ffffcc 	andi	r3,r4,65535
   2482c:	18e0001c 	xori	r3,r3,32768
   24830:	18e00004 	addi	r3,r3,-32768
   24834:	1880020c 	andi	r2,r3,8
   24838:	1000261e 	bne	r2,zero,248d4 <_fflush_r+0xdc>
   2483c:	90c00117 	ldw	r3,4(r18)
   24840:	20820014 	ori	r2,r4,2048
   24844:	9080030d 	sth	r2,12(r18)
   24848:	1009883a 	mov	r4,r2
   2484c:	00c0400e 	bge	zero,r3,24950 <_fflush_r+0x158>
   24850:	92000a17 	ldw	r8,40(r18)
   24854:	40004026 	beq	r8,zero,24958 <_fflush_r+0x160>
   24858:	2084000c 	andi	r2,r4,4096
   2485c:	10005326 	beq	r2,zero,249ac <_fflush_r+0x1b4>
   24860:	94001417 	ldw	r16,80(r18)
   24864:	9080030b 	ldhu	r2,12(r18)
   24868:	1080010c 	andi	r2,r2,4
   2486c:	1000481e 	bne	r2,zero,24990 <_fflush_r+0x198>
   24870:	91400717 	ldw	r5,28(r18)
   24874:	9809883a 	mov	r4,r19
   24878:	800d883a 	mov	r6,r16
   2487c:	000f883a 	mov	r7,zero
   24880:	403ee83a 	callr	r8
   24884:	8080261e 	bne	r16,r2,24920 <_fflush_r+0x128>
   24888:	9080030b 	ldhu	r2,12(r18)
   2488c:	91000417 	ldw	r4,16(r18)
   24890:	90000115 	stw	zero,4(r18)
   24894:	10bdffcc 	andi	r2,r2,63487
   24898:	10ffffcc 	andi	r3,r2,65535
   2489c:	18c4000c 	andi	r3,r3,4096
   248a0:	9080030d 	sth	r2,12(r18)
   248a4:	91000015 	stw	r4,0(r18)
   248a8:	18002b26 	beq	r3,zero,24958 <_fflush_r+0x160>
   248ac:	0007883a 	mov	r3,zero
   248b0:	1805883a 	mov	r2,r3
   248b4:	94001415 	stw	r16,80(r18)
   248b8:	dfc00417 	ldw	ra,16(sp)
   248bc:	dcc00317 	ldw	r19,12(sp)
   248c0:	dc800217 	ldw	r18,8(sp)
   248c4:	dc400117 	ldw	r17,4(sp)
   248c8:	dc000017 	ldw	r16,0(sp)
   248cc:	dec00504 	addi	sp,sp,20
   248d0:	f800283a 	ret
   248d4:	94400417 	ldw	r17,16(r18)
   248d8:	88001f26 	beq	r17,zero,24958 <_fflush_r+0x160>
   248dc:	90800017 	ldw	r2,0(r18)
   248e0:	18c000cc 	andi	r3,r3,3
   248e4:	94400015 	stw	r17,0(r18)
   248e8:	1461c83a 	sub	r16,r2,r17
   248ec:	18002526 	beq	r3,zero,24984 <_fflush_r+0x18c>
   248f0:	0005883a 	mov	r2,zero
   248f4:	90800215 	stw	r2,8(r18)
   248f8:	0400170e 	bge	zero,r16,24958 <_fflush_r+0x160>
   248fc:	90c00917 	ldw	r3,36(r18)
   24900:	91400717 	ldw	r5,28(r18)
   24904:	880d883a 	mov	r6,r17
   24908:	800f883a 	mov	r7,r16
   2490c:	9809883a 	mov	r4,r19
   24910:	183ee83a 	callr	r3
   24914:	88a3883a 	add	r17,r17,r2
   24918:	80a1c83a 	sub	r16,r16,r2
   2491c:	00bff616 	blt	zero,r2,248f8 <_fflush_r+0x100>
   24920:	9080030b 	ldhu	r2,12(r18)
   24924:	00ffffc4 	movi	r3,-1
   24928:	10801014 	ori	r2,r2,64
   2492c:	9080030d 	sth	r2,12(r18)
   24930:	1805883a 	mov	r2,r3
   24934:	dfc00417 	ldw	ra,16(sp)
   24938:	dcc00317 	ldw	r19,12(sp)
   2493c:	dc800217 	ldw	r18,8(sp)
   24940:	dc400117 	ldw	r17,4(sp)
   24944:	dc000017 	ldw	r16,0(sp)
   24948:	dec00504 	addi	sp,sp,20
   2494c:	f800283a 	ret
   24950:	90800f17 	ldw	r2,60(r18)
   24954:	00bfbe16 	blt	zero,r2,24850 <_fflush_r+0x58>
   24958:	0007883a 	mov	r3,zero
   2495c:	1805883a 	mov	r2,r3
   24960:	dfc00417 	ldw	ra,16(sp)
   24964:	dcc00317 	ldw	r19,12(sp)
   24968:	dc800217 	ldw	r18,8(sp)
   2496c:	dc400117 	ldw	r17,4(sp)
   24970:	dc000017 	ldw	r16,0(sp)
   24974:	dec00504 	addi	sp,sp,20
   24978:	f800283a 	ret
   2497c:	0024a900 	call	24a90 <__sinit>
   24980:	003fa806 	br	24824 <_fflush_r+0x2c>
   24984:	90800517 	ldw	r2,20(r18)
   24988:	90800215 	stw	r2,8(r18)
   2498c:	003fda06 	br	248f8 <_fflush_r+0x100>
   24990:	90800117 	ldw	r2,4(r18)
   24994:	90c00c17 	ldw	r3,48(r18)
   24998:	80a1c83a 	sub	r16,r16,r2
   2499c:	183fb426 	beq	r3,zero,24870 <_fflush_r+0x78>
   249a0:	90800f17 	ldw	r2,60(r18)
   249a4:	80a1c83a 	sub	r16,r16,r2
   249a8:	003fb106 	br	24870 <_fflush_r+0x78>
   249ac:	91400717 	ldw	r5,28(r18)
   249b0:	9809883a 	mov	r4,r19
   249b4:	000d883a 	mov	r6,zero
   249b8:	01c00044 	movi	r7,1
   249bc:	403ee83a 	callr	r8
   249c0:	1021883a 	mov	r16,r2
   249c4:	00bfffc4 	movi	r2,-1
   249c8:	80800226 	beq	r16,r2,249d4 <_fflush_r+0x1dc>
   249cc:	92000a17 	ldw	r8,40(r18)
   249d0:	003fa406 	br	24864 <_fflush_r+0x6c>
   249d4:	98c00017 	ldw	r3,0(r19)
   249d8:	00800744 	movi	r2,29
   249dc:	18bfde26 	beq	r3,r2,24958 <_fflush_r+0x160>
   249e0:	9080030b 	ldhu	r2,12(r18)
   249e4:	8007883a 	mov	r3,r16
   249e8:	10801014 	ori	r2,r2,64
   249ec:	9080030d 	sth	r2,12(r18)
   249f0:	003fcf06 	br	24930 <_fflush_r+0x138>

000249f4 <fflush>:
   249f4:	014000b4 	movhi	r5,2
   249f8:	2951fe04 	addi	r5,r5,18424
   249fc:	2007883a 	mov	r3,r4
   24a00:	20000526 	beq	r4,zero,24a18 <fflush+0x24>
   24a04:	008000f4 	movhi	r2,3
   24a08:	10bd1d04 	addi	r2,r2,-2956
   24a0c:	11000017 	ldw	r4,0(r2)
   24a10:	180b883a 	mov	r5,r3
   24a14:	00247f81 	jmpi	247f8 <_fflush_r>
   24a18:	008000f4 	movhi	r2,3
   24a1c:	10bd1e04 	addi	r2,r2,-2952
   24a20:	11000017 	ldw	r4,0(r2)
   24a24:	00255f81 	jmpi	255f8 <_fwalk_reent>

00024a28 <std>:
   24a28:	008000b4 	movhi	r2,2
   24a2c:	109edb04 	addi	r2,r2,31596
   24a30:	20800b15 	stw	r2,44(r4)
   24a34:	008000b4 	movhi	r2,2
   24a38:	109f1604 	addi	r2,r2,31832
   24a3c:	20800815 	stw	r2,32(r4)
   24a40:	00c000b4 	movhi	r3,2
   24a44:	18def704 	addi	r3,r3,31708
   24a48:	008000b4 	movhi	r2,2
   24a4c:	109edd04 	addi	r2,r2,31604
   24a50:	2140030d 	sth	r5,12(r4)
   24a54:	2180038d 	sth	r6,14(r4)
   24a58:	20c00915 	stw	r3,36(r4)
   24a5c:	20800a15 	stw	r2,40(r4)
   24a60:	20000015 	stw	zero,0(r4)
   24a64:	20000115 	stw	zero,4(r4)
   24a68:	20000215 	stw	zero,8(r4)
   24a6c:	20000415 	stw	zero,16(r4)
   24a70:	20000515 	stw	zero,20(r4)
   24a74:	20000615 	stw	zero,24(r4)
   24a78:	21000715 	stw	r4,28(r4)
   24a7c:	f800283a 	ret

00024a80 <__sfp_lock_acquire>:
   24a80:	f800283a 	ret

00024a84 <__sfp_lock_release>:
   24a84:	f800283a 	ret

00024a88 <__sinit_lock_acquire>:
   24a88:	f800283a 	ret

00024a8c <__sinit_lock_release>:
   24a8c:	f800283a 	ret

00024a90 <__sinit>:
   24a90:	20800e17 	ldw	r2,56(r4)
   24a94:	defffd04 	addi	sp,sp,-12
   24a98:	dc400115 	stw	r17,4(sp)
   24a9c:	dc000015 	stw	r16,0(sp)
   24aa0:	dfc00215 	stw	ra,8(sp)
   24aa4:	04400044 	movi	r17,1
   24aa8:	01400104 	movi	r5,4
   24aac:	000d883a 	mov	r6,zero
   24ab0:	2021883a 	mov	r16,r4
   24ab4:	2200bb04 	addi	r8,r4,748
   24ab8:	200f883a 	mov	r7,r4
   24abc:	10000526 	beq	r2,zero,24ad4 <__sinit+0x44>
   24ac0:	dfc00217 	ldw	ra,8(sp)
   24ac4:	dc400117 	ldw	r17,4(sp)
   24ac8:	dc000017 	ldw	r16,0(sp)
   24acc:	dec00304 	addi	sp,sp,12
   24ad0:	f800283a 	ret
   24ad4:	21000117 	ldw	r4,4(r4)
   24ad8:	008000b4 	movhi	r2,2
   24adc:	1092dd04 	addi	r2,r2,19316
   24ae0:	00c000c4 	movi	r3,3
   24ae4:	80800f15 	stw	r2,60(r16)
   24ae8:	80c0b915 	stw	r3,740(r16)
   24aec:	8200ba15 	stw	r8,744(r16)
   24af0:	84400e15 	stw	r17,56(r16)
   24af4:	8000b815 	stw	zero,736(r16)
   24af8:	0024a280 	call	24a28 <std>
   24afc:	81000217 	ldw	r4,8(r16)
   24b00:	880d883a 	mov	r6,r17
   24b04:	800f883a 	mov	r7,r16
   24b08:	01400284 	movi	r5,10
   24b0c:	0024a280 	call	24a28 <std>
   24b10:	81000317 	ldw	r4,12(r16)
   24b14:	800f883a 	mov	r7,r16
   24b18:	01400484 	movi	r5,18
   24b1c:	01800084 	movi	r6,2
   24b20:	dfc00217 	ldw	ra,8(sp)
   24b24:	dc400117 	ldw	r17,4(sp)
   24b28:	dc000017 	ldw	r16,0(sp)
   24b2c:	dec00304 	addi	sp,sp,12
   24b30:	0024a281 	jmpi	24a28 <std>

00024b34 <__fp_lock>:
   24b34:	0005883a 	mov	r2,zero
   24b38:	f800283a 	ret

00024b3c <__fp_unlock>:
   24b3c:	0005883a 	mov	r2,zero
   24b40:	f800283a 	ret

00024b44 <__fp_unlock_all>:
   24b44:	008000f4 	movhi	r2,3
   24b48:	10bd1d04 	addi	r2,r2,-2956
   24b4c:	11000017 	ldw	r4,0(r2)
   24b50:	014000b4 	movhi	r5,2
   24b54:	2952cf04 	addi	r5,r5,19260
   24b58:	00256c01 	jmpi	256c0 <_fwalk>

00024b5c <__fp_lock_all>:
   24b5c:	008000f4 	movhi	r2,3
   24b60:	10bd1d04 	addi	r2,r2,-2956
   24b64:	11000017 	ldw	r4,0(r2)
   24b68:	014000b4 	movhi	r5,2
   24b6c:	2952cd04 	addi	r5,r5,19252
   24b70:	00256c01 	jmpi	256c0 <_fwalk>

00024b74 <_cleanup_r>:
   24b74:	014000f4 	movhi	r5,3
   24b78:	29602a04 	addi	r5,r5,-32600
   24b7c:	00256c01 	jmpi	256c0 <_fwalk>

00024b80 <_cleanup>:
   24b80:	008000f4 	movhi	r2,3
   24b84:	10bd1e04 	addi	r2,r2,-2952
   24b88:	11000017 	ldw	r4,0(r2)
   24b8c:	0024b741 	jmpi	24b74 <_cleanup_r>

00024b90 <__sfmoreglue>:
   24b90:	defffc04 	addi	sp,sp,-16
   24b94:	dc000015 	stw	r16,0(sp)
   24b98:	2821883a 	mov	r16,r5
   24b9c:	dc400115 	stw	r17,4(sp)
   24ba0:	01401704 	movi	r5,92
   24ba4:	2023883a 	mov	r17,r4
   24ba8:	8009883a 	mov	r4,r16
   24bac:	dfc00315 	stw	ra,12(sp)
   24bb0:	dcc00215 	stw	r19,8(sp)
   24bb4:	002a1d40 	call	2a1d4 <__mulsi3>
   24bb8:	11400304 	addi	r5,r2,12
   24bbc:	8809883a 	mov	r4,r17
   24bc0:	1027883a 	mov	r19,r2
   24bc4:	00259d00 	call	259d0 <_malloc_r>
   24bc8:	10c00304 	addi	r3,r2,12
   24bcc:	1023883a 	mov	r17,r2
   24bd0:	1809883a 	mov	r4,r3
   24bd4:	980d883a 	mov	r6,r19
   24bd8:	000b883a 	mov	r5,zero
   24bdc:	10000b26 	beq	r2,zero,24c0c <__sfmoreglue+0x7c>
   24be0:	14000115 	stw	r16,4(r2)
   24be4:	10c00215 	stw	r3,8(r2)
   24be8:	10000015 	stw	zero,0(r2)
   24bec:	00263740 	call	26374 <memset>
   24bf0:	8805883a 	mov	r2,r17
   24bf4:	dfc00317 	ldw	ra,12(sp)
   24bf8:	dcc00217 	ldw	r19,8(sp)
   24bfc:	dc400117 	ldw	r17,4(sp)
   24c00:	dc000017 	ldw	r16,0(sp)
   24c04:	dec00404 	addi	sp,sp,16
   24c08:	f800283a 	ret
   24c0c:	0023883a 	mov	r17,zero
   24c10:	8805883a 	mov	r2,r17
   24c14:	dfc00317 	ldw	ra,12(sp)
   24c18:	dcc00217 	ldw	r19,8(sp)
   24c1c:	dc400117 	ldw	r17,4(sp)
   24c20:	dc000017 	ldw	r16,0(sp)
   24c24:	dec00404 	addi	sp,sp,16
   24c28:	f800283a 	ret

00024c2c <__sfp>:
   24c2c:	defffd04 	addi	sp,sp,-12
   24c30:	008000f4 	movhi	r2,3
   24c34:	10bd1e04 	addi	r2,r2,-2952
   24c38:	dc000015 	stw	r16,0(sp)
   24c3c:	14000017 	ldw	r16,0(r2)
   24c40:	dc400115 	stw	r17,4(sp)
   24c44:	dfc00215 	stw	ra,8(sp)
   24c48:	80800e17 	ldw	r2,56(r16)
   24c4c:	2023883a 	mov	r17,r4
   24c50:	10002626 	beq	r2,zero,24cec <__sfp+0xc0>
   24c54:	8400b804 	addi	r16,r16,736
   24c58:	80800117 	ldw	r2,4(r16)
   24c5c:	81000217 	ldw	r4,8(r16)
   24c60:	10ffffc4 	addi	r3,r2,-1
   24c64:	18000916 	blt	r3,zero,24c8c <__sfp+0x60>
   24c68:	2080030f 	ldh	r2,12(r4)
   24c6c:	10000b26 	beq	r2,zero,24c9c <__sfp+0x70>
   24c70:	017fffc4 	movi	r5,-1
   24c74:	00000206 	br	24c80 <__sfp+0x54>
   24c78:	2080030f 	ldh	r2,12(r4)
   24c7c:	10000726 	beq	r2,zero,24c9c <__sfp+0x70>
   24c80:	18ffffc4 	addi	r3,r3,-1
   24c84:	21001704 	addi	r4,r4,92
   24c88:	197ffb1e 	bne	r3,r5,24c78 <__sfp+0x4c>
   24c8c:	80800017 	ldw	r2,0(r16)
   24c90:	10001926 	beq	r2,zero,24cf8 <__sfp+0xcc>
   24c94:	1021883a 	mov	r16,r2
   24c98:	003fef06 	br	24c58 <__sfp+0x2c>
   24c9c:	00bfffc4 	movi	r2,-1
   24ca0:	00c00044 	movi	r3,1
   24ca4:	2080038d 	sth	r2,14(r4)
   24ca8:	20c0030d 	sth	r3,12(r4)
   24cac:	20000015 	stw	zero,0(r4)
   24cb0:	20000215 	stw	zero,8(r4)
   24cb4:	20000115 	stw	zero,4(r4)
   24cb8:	20000415 	stw	zero,16(r4)
   24cbc:	20000515 	stw	zero,20(r4)
   24cc0:	20000615 	stw	zero,24(r4)
   24cc4:	20000c15 	stw	zero,48(r4)
   24cc8:	20000d15 	stw	zero,52(r4)
   24ccc:	20001115 	stw	zero,68(r4)
   24cd0:	20001215 	stw	zero,72(r4)
   24cd4:	2005883a 	mov	r2,r4
   24cd8:	dfc00217 	ldw	ra,8(sp)
   24cdc:	dc400117 	ldw	r17,4(sp)
   24ce0:	dc000017 	ldw	r16,0(sp)
   24ce4:	dec00304 	addi	sp,sp,12
   24ce8:	f800283a 	ret
   24cec:	8009883a 	mov	r4,r16
   24cf0:	0024a900 	call	24a90 <__sinit>
   24cf4:	003fd706 	br	24c54 <__sfp+0x28>
   24cf8:	8809883a 	mov	r4,r17
   24cfc:	01400104 	movi	r5,4
   24d00:	0024b900 	call	24b90 <__sfmoreglue>
   24d04:	80800015 	stw	r2,0(r16)
   24d08:	103fe21e 	bne	r2,zero,24c94 <__sfp+0x68>
   24d0c:	00800304 	movi	r2,12
   24d10:	0009883a 	mov	r4,zero
   24d14:	88800015 	stw	r2,0(r17)
   24d18:	003fee06 	br	24cd4 <__sfp+0xa8>

00024d1c <_malloc_trim_r>:
   24d1c:	defffb04 	addi	sp,sp,-20
   24d20:	dcc00315 	stw	r19,12(sp)
   24d24:	04c000f4 	movhi	r19,3
   24d28:	9cf79704 	addi	r19,r19,-8612
   24d2c:	dc800215 	stw	r18,8(sp)
   24d30:	dc400115 	stw	r17,4(sp)
   24d34:	dc000015 	stw	r16,0(sp)
   24d38:	2823883a 	mov	r17,r5
   24d3c:	2025883a 	mov	r18,r4
   24d40:	dfc00415 	stw	ra,16(sp)
   24d44:	002b2240 	call	2b224 <__malloc_lock>
   24d48:	98800217 	ldw	r2,8(r19)
   24d4c:	9009883a 	mov	r4,r18
   24d50:	000b883a 	mov	r5,zero
   24d54:	10c00117 	ldw	r3,4(r2)
   24d58:	00bfff04 	movi	r2,-4
   24d5c:	18a0703a 	and	r16,r3,r2
   24d60:	8463c83a 	sub	r17,r16,r17
   24d64:	8c43fbc4 	addi	r17,r17,4079
   24d68:	8822d33a 	srli	r17,r17,12
   24d6c:	0083ffc4 	movi	r2,4095
   24d70:	8c7fffc4 	addi	r17,r17,-1
   24d74:	8822933a 	slli	r17,r17,12
   24d78:	1440060e 	bge	r2,r17,24d94 <_malloc_trim_r+0x78>
   24d7c:	0027afc0 	call	27afc <_sbrk_r>
   24d80:	98c00217 	ldw	r3,8(r19)
   24d84:	9009883a 	mov	r4,r18
   24d88:	044bc83a 	sub	r5,zero,r17
   24d8c:	80c7883a 	add	r3,r16,r3
   24d90:	10c00926 	beq	r2,r3,24db8 <_malloc_trim_r+0x9c>
   24d94:	002b2440 	call	2b244 <__malloc_unlock>
   24d98:	0005883a 	mov	r2,zero
   24d9c:	dfc00417 	ldw	ra,16(sp)
   24da0:	dcc00317 	ldw	r19,12(sp)
   24da4:	dc800217 	ldw	r18,8(sp)
   24da8:	dc400117 	ldw	r17,4(sp)
   24dac:	dc000017 	ldw	r16,0(sp)
   24db0:	dec00504 	addi	sp,sp,20
   24db4:	f800283a 	ret
   24db8:	9009883a 	mov	r4,r18
   24dbc:	0027afc0 	call	27afc <_sbrk_r>
   24dc0:	844dc83a 	sub	r6,r16,r17
   24dc4:	00ffffc4 	movi	r3,-1
   24dc8:	9009883a 	mov	r4,r18
   24dcc:	000b883a 	mov	r5,zero
   24dd0:	01c000f4 	movhi	r7,3
   24dd4:	39c3d404 	addi	r7,r7,3920
   24dd8:	31800054 	ori	r6,r6,1
   24ddc:	10c00926 	beq	r2,r3,24e04 <_malloc_trim_r+0xe8>
   24de0:	38800017 	ldw	r2,0(r7)
   24de4:	98c00217 	ldw	r3,8(r19)
   24de8:	9009883a 	mov	r4,r18
   24dec:	1445c83a 	sub	r2,r2,r17
   24df0:	38800015 	stw	r2,0(r7)
   24df4:	19800115 	stw	r6,4(r3)
   24df8:	002b2440 	call	2b244 <__malloc_unlock>
   24dfc:	00800044 	movi	r2,1
   24e00:	003fe606 	br	24d9c <_malloc_trim_r+0x80>
   24e04:	0027afc0 	call	27afc <_sbrk_r>
   24e08:	99800217 	ldw	r6,8(r19)
   24e0c:	100f883a 	mov	r7,r2
   24e10:	9009883a 	mov	r4,r18
   24e14:	1187c83a 	sub	r3,r2,r6
   24e18:	008003c4 	movi	r2,15
   24e1c:	19400054 	ori	r5,r3,1
   24e20:	10ffdc0e 	bge	r2,r3,24d94 <_malloc_trim_r+0x78>
   24e24:	008000f4 	movhi	r2,3
   24e28:	10bd2204 	addi	r2,r2,-2936
   24e2c:	10c00017 	ldw	r3,0(r2)
   24e30:	008000f4 	movhi	r2,3
   24e34:	1083d404 	addi	r2,r2,3920
   24e38:	31400115 	stw	r5,4(r6)
   24e3c:	38c7c83a 	sub	r3,r7,r3
   24e40:	10c00015 	stw	r3,0(r2)
   24e44:	003fd306 	br	24d94 <_malloc_trim_r+0x78>

00024e48 <_free_r>:
   24e48:	defffd04 	addi	sp,sp,-12
   24e4c:	dc400115 	stw	r17,4(sp)
   24e50:	dc000015 	stw	r16,0(sp)
   24e54:	dfc00215 	stw	ra,8(sp)
   24e58:	2821883a 	mov	r16,r5
   24e5c:	2023883a 	mov	r17,r4
   24e60:	28005a26 	beq	r5,zero,24fcc <_free_r+0x184>
   24e64:	002b2240 	call	2b224 <__malloc_lock>
   24e68:	823ffe04 	addi	r8,r16,-8
   24e6c:	41400117 	ldw	r5,4(r8)
   24e70:	00bfff84 	movi	r2,-2
   24e74:	028000f4 	movhi	r10,3
   24e78:	52b79704 	addi	r10,r10,-8612
   24e7c:	288e703a 	and	r7,r5,r2
   24e80:	41cd883a 	add	r6,r8,r7
   24e84:	30c00117 	ldw	r3,4(r6)
   24e88:	51000217 	ldw	r4,8(r10)
   24e8c:	00bfff04 	movi	r2,-4
   24e90:	1892703a 	and	r9,r3,r2
   24e94:	5017883a 	mov	r11,r10
   24e98:	31006726 	beq	r6,r4,25038 <_free_r+0x1f0>
   24e9c:	2880004c 	andi	r2,r5,1
   24ea0:	1005003a 	cmpeq	r2,r2,zero
   24ea4:	32400115 	stw	r9,4(r6)
   24ea8:	10001a1e 	bne	r2,zero,24f14 <_free_r+0xcc>
   24eac:	000b883a 	mov	r5,zero
   24eb0:	3247883a 	add	r3,r6,r9
   24eb4:	18800117 	ldw	r2,4(r3)
   24eb8:	1080004c 	andi	r2,r2,1
   24ebc:	1000231e 	bne	r2,zero,24f4c <_free_r+0x104>
   24ec0:	280ac03a 	cmpne	r5,r5,zero
   24ec4:	3a4f883a 	add	r7,r7,r9
   24ec8:	2800451e 	bne	r5,zero,24fe0 <_free_r+0x198>
   24ecc:	31000217 	ldw	r4,8(r6)
   24ed0:	008000f4 	movhi	r2,3
   24ed4:	10b79904 	addi	r2,r2,-8604
   24ed8:	20807b26 	beq	r4,r2,250c8 <_free_r+0x280>
   24edc:	30800317 	ldw	r2,12(r6)
   24ee0:	3a07883a 	add	r3,r7,r8
   24ee4:	19c00015 	stw	r7,0(r3)
   24ee8:	11000215 	stw	r4,8(r2)
   24eec:	20800315 	stw	r2,12(r4)
   24ef0:	38800054 	ori	r2,r7,1
   24ef4:	40800115 	stw	r2,4(r8)
   24ef8:	28001a26 	beq	r5,zero,24f64 <_free_r+0x11c>
   24efc:	8809883a 	mov	r4,r17
   24f00:	dfc00217 	ldw	ra,8(sp)
   24f04:	dc400117 	ldw	r17,4(sp)
   24f08:	dc000017 	ldw	r16,0(sp)
   24f0c:	dec00304 	addi	sp,sp,12
   24f10:	002b2441 	jmpi	2b244 <__malloc_unlock>
   24f14:	80bffe17 	ldw	r2,-8(r16)
   24f18:	50c00204 	addi	r3,r10,8
   24f1c:	4091c83a 	sub	r8,r8,r2
   24f20:	41000217 	ldw	r4,8(r8)
   24f24:	388f883a 	add	r7,r7,r2
   24f28:	20c06126 	beq	r4,r3,250b0 <_free_r+0x268>
   24f2c:	40800317 	ldw	r2,12(r8)
   24f30:	3247883a 	add	r3,r6,r9
   24f34:	000b883a 	mov	r5,zero
   24f38:	11000215 	stw	r4,8(r2)
   24f3c:	20800315 	stw	r2,12(r4)
   24f40:	18800117 	ldw	r2,4(r3)
   24f44:	1080004c 	andi	r2,r2,1
   24f48:	103fdd26 	beq	r2,zero,24ec0 <_free_r+0x78>
   24f4c:	38800054 	ori	r2,r7,1
   24f50:	3a07883a 	add	r3,r7,r8
   24f54:	280ac03a 	cmpne	r5,r5,zero
   24f58:	40800115 	stw	r2,4(r8)
   24f5c:	19c00015 	stw	r7,0(r3)
   24f60:	283fe61e 	bne	r5,zero,24efc <_free_r+0xb4>
   24f64:	00807fc4 	movi	r2,511
   24f68:	11c01f2e 	bgeu	r2,r7,24fe8 <_free_r+0x1a0>
   24f6c:	3806d27a 	srli	r3,r7,9
   24f70:	1800481e 	bne	r3,zero,25094 <_free_r+0x24c>
   24f74:	3804d0fa 	srli	r2,r7,3
   24f78:	100690fa 	slli	r3,r2,3
   24f7c:	1acd883a 	add	r6,r3,r11
   24f80:	31400217 	ldw	r5,8(r6)
   24f84:	31405926 	beq	r6,r5,250ec <_free_r+0x2a4>
   24f88:	28800117 	ldw	r2,4(r5)
   24f8c:	00ffff04 	movi	r3,-4
   24f90:	10c4703a 	and	r2,r2,r3
   24f94:	3880022e 	bgeu	r7,r2,24fa0 <_free_r+0x158>
   24f98:	29400217 	ldw	r5,8(r5)
   24f9c:	317ffa1e 	bne	r6,r5,24f88 <_free_r+0x140>
   24fa0:	29800317 	ldw	r6,12(r5)
   24fa4:	41800315 	stw	r6,12(r8)
   24fa8:	41400215 	stw	r5,8(r8)
   24fac:	8809883a 	mov	r4,r17
   24fb0:	2a000315 	stw	r8,12(r5)
   24fb4:	32000215 	stw	r8,8(r6)
   24fb8:	dfc00217 	ldw	ra,8(sp)
   24fbc:	dc400117 	ldw	r17,4(sp)
   24fc0:	dc000017 	ldw	r16,0(sp)
   24fc4:	dec00304 	addi	sp,sp,12
   24fc8:	002b2441 	jmpi	2b244 <__malloc_unlock>
   24fcc:	dfc00217 	ldw	ra,8(sp)
   24fd0:	dc400117 	ldw	r17,4(sp)
   24fd4:	dc000017 	ldw	r16,0(sp)
   24fd8:	dec00304 	addi	sp,sp,12
   24fdc:	f800283a 	ret
   24fe0:	31000217 	ldw	r4,8(r6)
   24fe4:	003fbd06 	br	24edc <_free_r+0x94>
   24fe8:	3806d0fa 	srli	r3,r7,3
   24fec:	00800044 	movi	r2,1
   24ff0:	51400117 	ldw	r5,4(r10)
   24ff4:	180890fa 	slli	r4,r3,3
   24ff8:	1807d0ba 	srai	r3,r3,2
   24ffc:	22c9883a 	add	r4,r4,r11
   25000:	21800217 	ldw	r6,8(r4)
   25004:	10c4983a 	sll	r2,r2,r3
   25008:	41000315 	stw	r4,12(r8)
   2500c:	41800215 	stw	r6,8(r8)
   25010:	288ab03a 	or	r5,r5,r2
   25014:	22000215 	stw	r8,8(r4)
   25018:	8809883a 	mov	r4,r17
   2501c:	51400115 	stw	r5,4(r10)
   25020:	32000315 	stw	r8,12(r6)
   25024:	dfc00217 	ldw	ra,8(sp)
   25028:	dc400117 	ldw	r17,4(sp)
   2502c:	dc000017 	ldw	r16,0(sp)
   25030:	dec00304 	addi	sp,sp,12
   25034:	002b2441 	jmpi	2b244 <__malloc_unlock>
   25038:	2880004c 	andi	r2,r5,1
   2503c:	3a4d883a 	add	r6,r7,r9
   25040:	1000071e 	bne	r2,zero,25060 <_free_r+0x218>
   25044:	80bffe17 	ldw	r2,-8(r16)
   25048:	4091c83a 	sub	r8,r8,r2
   2504c:	41000317 	ldw	r4,12(r8)
   25050:	40c00217 	ldw	r3,8(r8)
   25054:	308d883a 	add	r6,r6,r2
   25058:	20c00215 	stw	r3,8(r4)
   2505c:	19000315 	stw	r4,12(r3)
   25060:	008000f4 	movhi	r2,3
   25064:	10bd2104 	addi	r2,r2,-2940
   25068:	11000017 	ldw	r4,0(r2)
   2506c:	30c00054 	ori	r3,r6,1
   25070:	52000215 	stw	r8,8(r10)
   25074:	40c00115 	stw	r3,4(r8)
   25078:	313fa036 	bltu	r6,r4,24efc <_free_r+0xb4>
   2507c:	008000f4 	movhi	r2,3
   25080:	1083ca04 	addi	r2,r2,3880
   25084:	11400017 	ldw	r5,0(r2)
   25088:	8809883a 	mov	r4,r17
   2508c:	0024d1c0 	call	24d1c <_malloc_trim_r>
   25090:	003f9a06 	br	24efc <_free_r+0xb4>
   25094:	00800104 	movi	r2,4
   25098:	10c0072e 	bgeu	r2,r3,250b8 <_free_r+0x270>
   2509c:	00800504 	movi	r2,20
   250a0:	10c01936 	bltu	r2,r3,25108 <_free_r+0x2c0>
   250a4:	188016c4 	addi	r2,r3,91
   250a8:	100690fa 	slli	r3,r2,3
   250ac:	003fb306 	br	24f7c <_free_r+0x134>
   250b0:	01400044 	movi	r5,1
   250b4:	003f7e06 	br	24eb0 <_free_r+0x68>
   250b8:	3804d1ba 	srli	r2,r7,6
   250bc:	10800e04 	addi	r2,r2,56
   250c0:	100690fa 	slli	r3,r2,3
   250c4:	003fad06 	br	24f7c <_free_r+0x134>
   250c8:	22000315 	stw	r8,12(r4)
   250cc:	22000215 	stw	r8,8(r4)
   250d0:	3a05883a 	add	r2,r7,r8
   250d4:	38c00054 	ori	r3,r7,1
   250d8:	11c00015 	stw	r7,0(r2)
   250dc:	41000215 	stw	r4,8(r8)
   250e0:	40c00115 	stw	r3,4(r8)
   250e4:	41000315 	stw	r4,12(r8)
   250e8:	003f8406 	br	24efc <_free_r+0xb4>
   250ec:	1005d0ba 	srai	r2,r2,2
   250f0:	00c00044 	movi	r3,1
   250f4:	51000117 	ldw	r4,4(r10)
   250f8:	1886983a 	sll	r3,r3,r2
   250fc:	20c8b03a 	or	r4,r4,r3
   25100:	51000115 	stw	r4,4(r10)
   25104:	003fa706 	br	24fa4 <_free_r+0x15c>
   25108:	00801504 	movi	r2,84
   2510c:	10c00436 	bltu	r2,r3,25120 <_free_r+0x2d8>
   25110:	3804d33a 	srli	r2,r7,12
   25114:	10801b84 	addi	r2,r2,110
   25118:	100690fa 	slli	r3,r2,3
   2511c:	003f9706 	br	24f7c <_free_r+0x134>
   25120:	00805504 	movi	r2,340
   25124:	10c00436 	bltu	r2,r3,25138 <_free_r+0x2f0>
   25128:	3804d3fa 	srli	r2,r7,15
   2512c:	10801dc4 	addi	r2,r2,119
   25130:	100690fa 	slli	r3,r2,3
   25134:	003f9106 	br	24f7c <_free_r+0x134>
   25138:	00815504 	movi	r2,1364
   2513c:	10c0032e 	bgeu	r2,r3,2514c <_free_r+0x304>
   25140:	00801f84 	movi	r2,126
   25144:	00c0fc04 	movi	r3,1008
   25148:	003f8c06 	br	24f7c <_free_r+0x134>
   2514c:	3804d4ba 	srli	r2,r7,18
   25150:	10801f04 	addi	r2,r2,124
   25154:	100690fa 	slli	r3,r2,3
   25158:	003f8806 	br	24f7c <_free_r+0x134>

0002515c <__sfvwrite_r>:
   2515c:	30800217 	ldw	r2,8(r6)
   25160:	defff504 	addi	sp,sp,-44
   25164:	df000915 	stw	fp,36(sp)
   25168:	dd800715 	stw	r22,28(sp)
   2516c:	dc800315 	stw	r18,12(sp)
   25170:	dfc00a15 	stw	ra,40(sp)
   25174:	ddc00815 	stw	r23,32(sp)
   25178:	dd400615 	stw	r21,24(sp)
   2517c:	dd000515 	stw	r20,20(sp)
   25180:	dcc00415 	stw	r19,16(sp)
   25184:	dc400215 	stw	r17,8(sp)
   25188:	dc000115 	stw	r16,4(sp)
   2518c:	302d883a 	mov	r22,r6
   25190:	2039883a 	mov	fp,r4
   25194:	2825883a 	mov	r18,r5
   25198:	10001c26 	beq	r2,zero,2520c <__sfvwrite_r+0xb0>
   2519c:	29c0030b 	ldhu	r7,12(r5)
   251a0:	3880020c 	andi	r2,r7,8
   251a4:	10002726 	beq	r2,zero,25244 <__sfvwrite_r+0xe8>
   251a8:	28800417 	ldw	r2,16(r5)
   251ac:	10002526 	beq	r2,zero,25244 <__sfvwrite_r+0xe8>
   251b0:	3880008c 	andi	r2,r7,2
   251b4:	b5400017 	ldw	r21,0(r22)
   251b8:	10002826 	beq	r2,zero,2525c <__sfvwrite_r+0x100>
   251bc:	0021883a 	mov	r16,zero
   251c0:	0023883a 	mov	r17,zero
   251c4:	880d883a 	mov	r6,r17
   251c8:	e009883a 	mov	r4,fp
   251cc:	00810004 	movi	r2,1024
   251d0:	80006e26 	beq	r16,zero,2538c <__sfvwrite_r+0x230>
   251d4:	800f883a 	mov	r7,r16
   251d8:	91400717 	ldw	r5,28(r18)
   251dc:	1400012e 	bgeu	r2,r16,251e4 <__sfvwrite_r+0x88>
   251e0:	100f883a 	mov	r7,r2
   251e4:	90c00917 	ldw	r3,36(r18)
   251e8:	183ee83a 	callr	r3
   251ec:	1007883a 	mov	r3,r2
   251f0:	80a1c83a 	sub	r16,r16,r2
   251f4:	88a3883a 	add	r17,r17,r2
   251f8:	00806d0e 	bge	zero,r2,253b0 <__sfvwrite_r+0x254>
   251fc:	b0800217 	ldw	r2,8(r22)
   25200:	10c5c83a 	sub	r2,r2,r3
   25204:	b0800215 	stw	r2,8(r22)
   25208:	103fee1e 	bne	r2,zero,251c4 <__sfvwrite_r+0x68>
   2520c:	0009883a 	mov	r4,zero
   25210:	2005883a 	mov	r2,r4
   25214:	dfc00a17 	ldw	ra,40(sp)
   25218:	df000917 	ldw	fp,36(sp)
   2521c:	ddc00817 	ldw	r23,32(sp)
   25220:	dd800717 	ldw	r22,28(sp)
   25224:	dd400617 	ldw	r21,24(sp)
   25228:	dd000517 	ldw	r20,20(sp)
   2522c:	dcc00417 	ldw	r19,16(sp)
   25230:	dc800317 	ldw	r18,12(sp)
   25234:	dc400217 	ldw	r17,8(sp)
   25238:	dc000117 	ldw	r16,4(sp)
   2523c:	dec00b04 	addi	sp,sp,44
   25240:	f800283a 	ret
   25244:	0022ec40 	call	22ec4 <__swsetup_r>
   25248:	1000e41e 	bne	r2,zero,255dc <__sfvwrite_r+0x480>
   2524c:	91c0030b 	ldhu	r7,12(r18)
   25250:	b5400017 	ldw	r21,0(r22)
   25254:	3880008c 	andi	r2,r7,2
   25258:	103fd81e 	bne	r2,zero,251bc <__sfvwrite_r+0x60>
   2525c:	3880004c 	andi	r2,r7,1
   25260:	1005003a 	cmpeq	r2,r2,zero
   25264:	10005726 	beq	r2,zero,253c4 <__sfvwrite_r+0x268>
   25268:	0029883a 	mov	r20,zero
   2526c:	002f883a 	mov	r23,zero
   25270:	a0004226 	beq	r20,zero,2537c <__sfvwrite_r+0x220>
   25274:	3880800c 	andi	r2,r7,512
   25278:	94000217 	ldw	r16,8(r18)
   2527c:	10008b26 	beq	r2,zero,254ac <__sfvwrite_r+0x350>
   25280:	800d883a 	mov	r6,r16
   25284:	a400a536 	bltu	r20,r16,2551c <__sfvwrite_r+0x3c0>
   25288:	3881200c 	andi	r2,r7,1152
   2528c:	10002726 	beq	r2,zero,2532c <__sfvwrite_r+0x1d0>
   25290:	90800517 	ldw	r2,20(r18)
   25294:	92000417 	ldw	r8,16(r18)
   25298:	91400017 	ldw	r5,0(r18)
   2529c:	1087883a 	add	r3,r2,r2
   252a0:	1887883a 	add	r3,r3,r2
   252a4:	1808d7fa 	srli	r4,r3,31
   252a8:	2a21c83a 	sub	r16,r5,r8
   252ac:	80800044 	addi	r2,r16,1
   252b0:	20c9883a 	add	r4,r4,r3
   252b4:	2027d07a 	srai	r19,r4,1
   252b8:	a085883a 	add	r2,r20,r2
   252bc:	980d883a 	mov	r6,r19
   252c0:	9880022e 	bgeu	r19,r2,252cc <__sfvwrite_r+0x170>
   252c4:	1027883a 	mov	r19,r2
   252c8:	100d883a 	mov	r6,r2
   252cc:	3881000c 	andi	r2,r7,1024
   252d0:	1000b826 	beq	r2,zero,255b4 <__sfvwrite_r+0x458>
   252d4:	300b883a 	mov	r5,r6
   252d8:	e009883a 	mov	r4,fp
   252dc:	00259d00 	call	259d0 <_malloc_r>
   252e0:	10003126 	beq	r2,zero,253a8 <__sfvwrite_r+0x24c>
   252e4:	91400417 	ldw	r5,16(r18)
   252e8:	1009883a 	mov	r4,r2
   252ec:	800d883a 	mov	r6,r16
   252f0:	1023883a 	mov	r17,r2
   252f4:	00261f40 	call	261f4 <memcpy>
   252f8:	90c0030b 	ldhu	r3,12(r18)
   252fc:	00beffc4 	movi	r2,-1025
   25300:	1886703a 	and	r3,r3,r2
   25304:	18c02014 	ori	r3,r3,128
   25308:	90c0030d 	sth	r3,12(r18)
   2530c:	9c07c83a 	sub	r3,r19,r16
   25310:	8c05883a 	add	r2,r17,r16
   25314:	a00d883a 	mov	r6,r20
   25318:	a021883a 	mov	r16,r20
   2531c:	90800015 	stw	r2,0(r18)
   25320:	90c00215 	stw	r3,8(r18)
   25324:	94400415 	stw	r17,16(r18)
   25328:	94c00515 	stw	r19,20(r18)
   2532c:	91000017 	ldw	r4,0(r18)
   25330:	b80b883a 	mov	r5,r23
   25334:	a023883a 	mov	r17,r20
   25338:	00262940 	call	26294 <memmove>
   2533c:	90c00217 	ldw	r3,8(r18)
   25340:	90800017 	ldw	r2,0(r18)
   25344:	a027883a 	mov	r19,r20
   25348:	1c07c83a 	sub	r3,r3,r16
   2534c:	1405883a 	add	r2,r2,r16
   25350:	90c00215 	stw	r3,8(r18)
   25354:	a021883a 	mov	r16,r20
   25358:	90800015 	stw	r2,0(r18)
   2535c:	b0800217 	ldw	r2,8(r22)
   25360:	1405c83a 	sub	r2,r2,r16
   25364:	b0800215 	stw	r2,8(r22)
   25368:	103fa826 	beq	r2,zero,2520c <__sfvwrite_r+0xb0>
   2536c:	a469c83a 	sub	r20,r20,r17
   25370:	91c0030b 	ldhu	r7,12(r18)
   25374:	bcef883a 	add	r23,r23,r19
   25378:	a03fbe1e 	bne	r20,zero,25274 <__sfvwrite_r+0x118>
   2537c:	adc00017 	ldw	r23,0(r21)
   25380:	ad000117 	ldw	r20,4(r21)
   25384:	ad400204 	addi	r21,r21,8
   25388:	003fb906 	br	25270 <__sfvwrite_r+0x114>
   2538c:	ac400017 	ldw	r17,0(r21)
   25390:	ac000117 	ldw	r16,4(r21)
   25394:	ad400204 	addi	r21,r21,8
   25398:	003f8a06 	br	251c4 <__sfvwrite_r+0x68>
   2539c:	91400417 	ldw	r5,16(r18)
   253a0:	e009883a 	mov	r4,fp
   253a4:	0024e480 	call	24e48 <_free_r>
   253a8:	00800304 	movi	r2,12
   253ac:	e0800015 	stw	r2,0(fp)
   253b0:	9080030b 	ldhu	r2,12(r18)
   253b4:	013fffc4 	movi	r4,-1
   253b8:	10801014 	ori	r2,r2,64
   253bc:	9080030d 	sth	r2,12(r18)
   253c0:	003f9306 	br	25210 <__sfvwrite_r+0xb4>
   253c4:	0027883a 	mov	r19,zero
   253c8:	002f883a 	mov	r23,zero
   253cc:	d8000015 	stw	zero,0(sp)
   253d0:	0029883a 	mov	r20,zero
   253d4:	98001e26 	beq	r19,zero,25450 <__sfvwrite_r+0x2f4>
   253d8:	d8c00017 	ldw	r3,0(sp)
   253dc:	1804c03a 	cmpne	r2,r3,zero
   253e0:	10005e26 	beq	r2,zero,2555c <__sfvwrite_r+0x400>
   253e4:	9821883a 	mov	r16,r19
   253e8:	a4c0012e 	bgeu	r20,r19,253f0 <__sfvwrite_r+0x294>
   253ec:	a021883a 	mov	r16,r20
   253f0:	91000017 	ldw	r4,0(r18)
   253f4:	90800417 	ldw	r2,16(r18)
   253f8:	91800217 	ldw	r6,8(r18)
   253fc:	91c00517 	ldw	r7,20(r18)
   25400:	1100022e 	bgeu	r2,r4,2540c <__sfvwrite_r+0x2b0>
   25404:	31e3883a 	add	r17,r6,r7
   25408:	8c001616 	blt	r17,r16,25464 <__sfvwrite_r+0x308>
   2540c:	81c03816 	blt	r16,r7,254f0 <__sfvwrite_r+0x394>
   25410:	90c00917 	ldw	r3,36(r18)
   25414:	91400717 	ldw	r5,28(r18)
   25418:	e009883a 	mov	r4,fp
   2541c:	b80d883a 	mov	r6,r23
   25420:	183ee83a 	callr	r3
   25424:	1023883a 	mov	r17,r2
   25428:	00bfe10e 	bge	zero,r2,253b0 <__sfvwrite_r+0x254>
   2542c:	a469c83a 	sub	r20,r20,r17
   25430:	a0001826 	beq	r20,zero,25494 <__sfvwrite_r+0x338>
   25434:	b0800217 	ldw	r2,8(r22)
   25438:	1445c83a 	sub	r2,r2,r17
   2543c:	b0800215 	stw	r2,8(r22)
   25440:	103f7226 	beq	r2,zero,2520c <__sfvwrite_r+0xb0>
   25444:	9c67c83a 	sub	r19,r19,r17
   25448:	bc6f883a 	add	r23,r23,r17
   2544c:	983fe21e 	bne	r19,zero,253d8 <__sfvwrite_r+0x27c>
   25450:	adc00017 	ldw	r23,0(r21)
   25454:	acc00117 	ldw	r19,4(r21)
   25458:	ad400204 	addi	r21,r21,8
   2545c:	d8000015 	stw	zero,0(sp)
   25460:	003fdc06 	br	253d4 <__sfvwrite_r+0x278>
   25464:	b80b883a 	mov	r5,r23
   25468:	880d883a 	mov	r6,r17
   2546c:	00262940 	call	26294 <memmove>
   25470:	90c00017 	ldw	r3,0(r18)
   25474:	e009883a 	mov	r4,fp
   25478:	900b883a 	mov	r5,r18
   2547c:	1c47883a 	add	r3,r3,r17
   25480:	90c00015 	stw	r3,0(r18)
   25484:	00247f80 	call	247f8 <_fflush_r>
   25488:	103fc91e 	bne	r2,zero,253b0 <__sfvwrite_r+0x254>
   2548c:	a469c83a 	sub	r20,r20,r17
   25490:	a03fe81e 	bne	r20,zero,25434 <__sfvwrite_r+0x2d8>
   25494:	e009883a 	mov	r4,fp
   25498:	900b883a 	mov	r5,r18
   2549c:	00247f80 	call	247f8 <_fflush_r>
   254a0:	103fc31e 	bne	r2,zero,253b0 <__sfvwrite_r+0x254>
   254a4:	d8000015 	stw	zero,0(sp)
   254a8:	003fe206 	br	25434 <__sfvwrite_r+0x2d8>
   254ac:	91000017 	ldw	r4,0(r18)
   254b0:	90800417 	ldw	r2,16(r18)
   254b4:	1100022e 	bgeu	r2,r4,254c0 <__sfvwrite_r+0x364>
   254b8:	8023883a 	mov	r17,r16
   254bc:	85003136 	bltu	r16,r20,25584 <__sfvwrite_r+0x428>
   254c0:	91c00517 	ldw	r7,20(r18)
   254c4:	a1c01836 	bltu	r20,r7,25528 <__sfvwrite_r+0x3cc>
   254c8:	90c00917 	ldw	r3,36(r18)
   254cc:	91400717 	ldw	r5,28(r18)
   254d0:	e009883a 	mov	r4,fp
   254d4:	b80d883a 	mov	r6,r23
   254d8:	183ee83a 	callr	r3
   254dc:	1021883a 	mov	r16,r2
   254e0:	00bfb30e 	bge	zero,r2,253b0 <__sfvwrite_r+0x254>
   254e4:	1023883a 	mov	r17,r2
   254e8:	1027883a 	mov	r19,r2
   254ec:	003f9b06 	br	2535c <__sfvwrite_r+0x200>
   254f0:	b80b883a 	mov	r5,r23
   254f4:	800d883a 	mov	r6,r16
   254f8:	00262940 	call	26294 <memmove>
   254fc:	90c00217 	ldw	r3,8(r18)
   25500:	90800017 	ldw	r2,0(r18)
   25504:	8023883a 	mov	r17,r16
   25508:	1c07c83a 	sub	r3,r3,r16
   2550c:	1405883a 	add	r2,r2,r16
   25510:	90c00215 	stw	r3,8(r18)
   25514:	90800015 	stw	r2,0(r18)
   25518:	003fc406 	br	2542c <__sfvwrite_r+0x2d0>
   2551c:	a00d883a 	mov	r6,r20
   25520:	a021883a 	mov	r16,r20
   25524:	003f8106 	br	2532c <__sfvwrite_r+0x1d0>
   25528:	b80b883a 	mov	r5,r23
   2552c:	a00d883a 	mov	r6,r20
   25530:	00262940 	call	26294 <memmove>
   25534:	90c00217 	ldw	r3,8(r18)
   25538:	90800017 	ldw	r2,0(r18)
   2553c:	a021883a 	mov	r16,r20
   25540:	1d07c83a 	sub	r3,r3,r20
   25544:	1505883a 	add	r2,r2,r20
   25548:	a023883a 	mov	r17,r20
   2554c:	a027883a 	mov	r19,r20
   25550:	90c00215 	stw	r3,8(r18)
   25554:	90800015 	stw	r2,0(r18)
   25558:	003f8006 	br	2535c <__sfvwrite_r+0x200>
   2555c:	b809883a 	mov	r4,r23
   25560:	01400284 	movi	r5,10
   25564:	980d883a 	mov	r6,r19
   25568:	00261100 	call	26110 <memchr>
   2556c:	10001726 	beq	r2,zero,255cc <__sfvwrite_r+0x470>
   25570:	15c5c83a 	sub	r2,r2,r23
   25574:	15000044 	addi	r20,r2,1
   25578:	00800044 	movi	r2,1
   2557c:	d8800015 	stw	r2,0(sp)
   25580:	003f9806 	br	253e4 <__sfvwrite_r+0x288>
   25584:	b80b883a 	mov	r5,r23
   25588:	800d883a 	mov	r6,r16
   2558c:	00262940 	call	26294 <memmove>
   25590:	90c00017 	ldw	r3,0(r18)
   25594:	e009883a 	mov	r4,fp
   25598:	900b883a 	mov	r5,r18
   2559c:	1c07883a 	add	r3,r3,r16
   255a0:	90c00015 	stw	r3,0(r18)
   255a4:	8027883a 	mov	r19,r16
   255a8:	00247f80 	call	247f8 <_fflush_r>
   255ac:	103f6b26 	beq	r2,zero,2535c <__sfvwrite_r+0x200>
   255b0:	003f7f06 	br	253b0 <__sfvwrite_r+0x254>
   255b4:	400b883a 	mov	r5,r8
   255b8:	e009883a 	mov	r4,fp
   255bc:	00274980 	call	27498 <_realloc_r>
   255c0:	103f7626 	beq	r2,zero,2539c <__sfvwrite_r+0x240>
   255c4:	1023883a 	mov	r17,r2
   255c8:	003f5006 	br	2530c <__sfvwrite_r+0x1b0>
   255cc:	00c00044 	movi	r3,1
   255d0:	9d000044 	addi	r20,r19,1
   255d4:	d8c00015 	stw	r3,0(sp)
   255d8:	003f8206 	br	253e4 <__sfvwrite_r+0x288>
   255dc:	9080030b 	ldhu	r2,12(r18)
   255e0:	00c00244 	movi	r3,9
   255e4:	013fffc4 	movi	r4,-1
   255e8:	10801014 	ori	r2,r2,64
   255ec:	9080030d 	sth	r2,12(r18)
   255f0:	e0c00015 	stw	r3,0(fp)
   255f4:	003f0606 	br	25210 <__sfvwrite_r+0xb4>

000255f8 <_fwalk_reent>:
   255f8:	defff704 	addi	sp,sp,-36
   255fc:	dcc00315 	stw	r19,12(sp)
   25600:	24c0b804 	addi	r19,r4,736
   25604:	dd800615 	stw	r22,24(sp)
   25608:	dd400515 	stw	r21,20(sp)
   2560c:	dfc00815 	stw	ra,32(sp)
   25610:	ddc00715 	stw	r23,28(sp)
   25614:	dd000415 	stw	r20,16(sp)
   25618:	dc800215 	stw	r18,8(sp)
   2561c:	dc400115 	stw	r17,4(sp)
   25620:	dc000015 	stw	r16,0(sp)
   25624:	202b883a 	mov	r21,r4
   25628:	282d883a 	mov	r22,r5
   2562c:	0024a800 	call	24a80 <__sfp_lock_acquire>
   25630:	98002126 	beq	r19,zero,256b8 <_fwalk_reent+0xc0>
   25634:	002f883a 	mov	r23,zero
   25638:	9c800117 	ldw	r18,4(r19)
   2563c:	9c000217 	ldw	r16,8(r19)
   25640:	90bfffc4 	addi	r2,r18,-1
   25644:	10000d16 	blt	r2,zero,2567c <_fwalk_reent+0x84>
   25648:	0023883a 	mov	r17,zero
   2564c:	053fffc4 	movi	r20,-1
   25650:	8080030f 	ldh	r2,12(r16)
   25654:	8c400044 	addi	r17,r17,1
   25658:	10000626 	beq	r2,zero,25674 <_fwalk_reent+0x7c>
   2565c:	8080038f 	ldh	r2,14(r16)
   25660:	800b883a 	mov	r5,r16
   25664:	a809883a 	mov	r4,r21
   25668:	15000226 	beq	r2,r20,25674 <_fwalk_reent+0x7c>
   2566c:	b03ee83a 	callr	r22
   25670:	b8aeb03a 	or	r23,r23,r2
   25674:	84001704 	addi	r16,r16,92
   25678:	947ff51e 	bne	r18,r17,25650 <_fwalk_reent+0x58>
   2567c:	9cc00017 	ldw	r19,0(r19)
   25680:	983fed1e 	bne	r19,zero,25638 <_fwalk_reent+0x40>
   25684:	0024a840 	call	24a84 <__sfp_lock_release>
   25688:	b805883a 	mov	r2,r23
   2568c:	dfc00817 	ldw	ra,32(sp)
   25690:	ddc00717 	ldw	r23,28(sp)
   25694:	dd800617 	ldw	r22,24(sp)
   25698:	dd400517 	ldw	r21,20(sp)
   2569c:	dd000417 	ldw	r20,16(sp)
   256a0:	dcc00317 	ldw	r19,12(sp)
   256a4:	dc800217 	ldw	r18,8(sp)
   256a8:	dc400117 	ldw	r17,4(sp)
   256ac:	dc000017 	ldw	r16,0(sp)
   256b0:	dec00904 	addi	sp,sp,36
   256b4:	f800283a 	ret
   256b8:	002f883a 	mov	r23,zero
   256bc:	003ff106 	br	25684 <_fwalk_reent+0x8c>

000256c0 <_fwalk>:
   256c0:	defff804 	addi	sp,sp,-32
   256c4:	dcc00315 	stw	r19,12(sp)
   256c8:	24c0b804 	addi	r19,r4,736
   256cc:	dd400515 	stw	r21,20(sp)
   256d0:	dfc00715 	stw	ra,28(sp)
   256d4:	dd800615 	stw	r22,24(sp)
   256d8:	dd000415 	stw	r20,16(sp)
   256dc:	dc800215 	stw	r18,8(sp)
   256e0:	dc400115 	stw	r17,4(sp)
   256e4:	dc000015 	stw	r16,0(sp)
   256e8:	282b883a 	mov	r21,r5
   256ec:	0024a800 	call	24a80 <__sfp_lock_acquire>
   256f0:	98001f26 	beq	r19,zero,25770 <_fwalk+0xb0>
   256f4:	002d883a 	mov	r22,zero
   256f8:	9c800117 	ldw	r18,4(r19)
   256fc:	9c000217 	ldw	r16,8(r19)
   25700:	90bfffc4 	addi	r2,r18,-1
   25704:	10000c16 	blt	r2,zero,25738 <_fwalk+0x78>
   25708:	0023883a 	mov	r17,zero
   2570c:	053fffc4 	movi	r20,-1
   25710:	8080030f 	ldh	r2,12(r16)
   25714:	8c400044 	addi	r17,r17,1
   25718:	10000526 	beq	r2,zero,25730 <_fwalk+0x70>
   2571c:	8080038f 	ldh	r2,14(r16)
   25720:	8009883a 	mov	r4,r16
   25724:	15000226 	beq	r2,r20,25730 <_fwalk+0x70>
   25728:	a83ee83a 	callr	r21
   2572c:	b0acb03a 	or	r22,r22,r2
   25730:	84001704 	addi	r16,r16,92
   25734:	947ff61e 	bne	r18,r17,25710 <_fwalk+0x50>
   25738:	9cc00017 	ldw	r19,0(r19)
   2573c:	983fee1e 	bne	r19,zero,256f8 <_fwalk+0x38>
   25740:	0024a840 	call	24a84 <__sfp_lock_release>
   25744:	b005883a 	mov	r2,r22
   25748:	dfc00717 	ldw	ra,28(sp)
   2574c:	dd800617 	ldw	r22,24(sp)
   25750:	dd400517 	ldw	r21,20(sp)
   25754:	dd000417 	ldw	r20,16(sp)
   25758:	dcc00317 	ldw	r19,12(sp)
   2575c:	dc800217 	ldw	r18,8(sp)
   25760:	dc400117 	ldw	r17,4(sp)
   25764:	dc000017 	ldw	r16,0(sp)
   25768:	dec00804 	addi	sp,sp,32
   2576c:	f800283a 	ret
   25770:	002d883a 	mov	r22,zero
   25774:	003ff206 	br	25740 <_fwalk+0x80>

00025778 <__locale_charset>:
   25778:	d0a00517 	ldw	r2,-32748(gp)
   2577c:	f800283a 	ret

00025780 <_localeconv_r>:
   25780:	008000f4 	movhi	r2,3
   25784:	10b5e904 	addi	r2,r2,-10332
   25788:	f800283a 	ret

0002578c <localeconv>:
   2578c:	008000f4 	movhi	r2,3
   25790:	10bd1d04 	addi	r2,r2,-2956
   25794:	11000017 	ldw	r4,0(r2)
   25798:	00257801 	jmpi	25780 <_localeconv_r>

0002579c <_setlocale_r>:
   2579c:	defffc04 	addi	sp,sp,-16
   257a0:	00c000f4 	movhi	r3,3
   257a4:	18f5c004 	addi	r3,r3,-10496
   257a8:	dc800215 	stw	r18,8(sp)
   257ac:	dc400115 	stw	r17,4(sp)
   257b0:	dc000015 	stw	r16,0(sp)
   257b4:	2023883a 	mov	r17,r4
   257b8:	2825883a 	mov	r18,r5
   257bc:	dfc00315 	stw	ra,12(sp)
   257c0:	3021883a 	mov	r16,r6
   257c4:	3009883a 	mov	r4,r6
   257c8:	180b883a 	mov	r5,r3
   257cc:	30000926 	beq	r6,zero,257f4 <_setlocale_r+0x58>
   257d0:	0027cb80 	call	27cb8 <strcmp>
   257d4:	8009883a 	mov	r4,r16
   257d8:	014000f4 	movhi	r5,3
   257dc:	2975d004 	addi	r5,r5,-10432
   257e0:	10000b1e 	bne	r2,zero,25810 <_setlocale_r+0x74>
   257e4:	8c000d15 	stw	r16,52(r17)
   257e8:	8c800c15 	stw	r18,48(r17)
   257ec:	00c000f4 	movhi	r3,3
   257f0:	18f5c004 	addi	r3,r3,-10496
   257f4:	1805883a 	mov	r2,r3
   257f8:	dfc00317 	ldw	ra,12(sp)
   257fc:	dc800217 	ldw	r18,8(sp)
   25800:	dc400117 	ldw	r17,4(sp)
   25804:	dc000017 	ldw	r16,0(sp)
   25808:	dec00404 	addi	sp,sp,16
   2580c:	f800283a 	ret
   25810:	0027cb80 	call	27cb8 <strcmp>
   25814:	0007883a 	mov	r3,zero
   25818:	103ff226 	beq	r2,zero,257e4 <_setlocale_r+0x48>
   2581c:	003ff506 	br	257f4 <_setlocale_r+0x58>

00025820 <setlocale>:
   25820:	018000f4 	movhi	r6,3
   25824:	31bd1d04 	addi	r6,r6,-2956
   25828:	2007883a 	mov	r3,r4
   2582c:	31000017 	ldw	r4,0(r6)
   25830:	280d883a 	mov	r6,r5
   25834:	180b883a 	mov	r5,r3
   25838:	002579c1 	jmpi	2579c <_setlocale_r>

0002583c <__smakebuf_r>:
   2583c:	2880030b 	ldhu	r2,12(r5)
   25840:	deffed04 	addi	sp,sp,-76
   25844:	dc401015 	stw	r17,64(sp)
   25848:	1080008c 	andi	r2,r2,2
   2584c:	dc000f15 	stw	r16,60(sp)
   25850:	dfc01215 	stw	ra,72(sp)
   25854:	dc801115 	stw	r18,68(sp)
   25858:	2821883a 	mov	r16,r5
   2585c:	2023883a 	mov	r17,r4
   25860:	10000b26 	beq	r2,zero,25890 <__smakebuf_r+0x54>
   25864:	28c010c4 	addi	r3,r5,67
   25868:	00800044 	movi	r2,1
   2586c:	28800515 	stw	r2,20(r5)
   25870:	28c00415 	stw	r3,16(r5)
   25874:	28c00015 	stw	r3,0(r5)
   25878:	dfc01217 	ldw	ra,72(sp)
   2587c:	dc801117 	ldw	r18,68(sp)
   25880:	dc401017 	ldw	r17,64(sp)
   25884:	dc000f17 	ldw	r16,60(sp)
   25888:	dec01304 	addi	sp,sp,76
   2588c:	f800283a 	ret
   25890:	2940038f 	ldh	r5,14(r5)
   25894:	28002116 	blt	r5,zero,2591c <__smakebuf_r+0xe0>
   25898:	d80d883a 	mov	r6,sp
   2589c:	00280bc0 	call	280bc <_fstat_r>
   258a0:	10001e16 	blt	r2,zero,2591c <__smakebuf_r+0xe0>
   258a4:	d8800117 	ldw	r2,4(sp)
   258a8:	00e00014 	movui	r3,32768
   258ac:	113c000c 	andi	r4,r2,61440
   258b0:	20c03126 	beq	r4,r3,25978 <__smakebuf_r+0x13c>
   258b4:	8080030b 	ldhu	r2,12(r16)
   258b8:	00c80004 	movi	r3,8192
   258bc:	10820014 	ori	r2,r2,2048
   258c0:	8080030d 	sth	r2,12(r16)
   258c4:	20c01e26 	beq	r4,r3,25940 <__smakebuf_r+0x104>
   258c8:	04810004 	movi	r18,1024
   258cc:	8809883a 	mov	r4,r17
   258d0:	900b883a 	mov	r5,r18
   258d4:	00259d00 	call	259d0 <_malloc_r>
   258d8:	1009883a 	mov	r4,r2
   258dc:	10003126 	beq	r2,zero,259a4 <__smakebuf_r+0x168>
   258e0:	80c0030b 	ldhu	r3,12(r16)
   258e4:	008000b4 	movhi	r2,2
   258e8:	1092dd04 	addi	r2,r2,19316
   258ec:	88800f15 	stw	r2,60(r17)
   258f0:	18c02014 	ori	r3,r3,128
   258f4:	84800515 	stw	r18,20(r16)
   258f8:	80c0030d 	sth	r3,12(r16)
   258fc:	81000415 	stw	r4,16(r16)
   25900:	81000015 	stw	r4,0(r16)
   25904:	dfc01217 	ldw	ra,72(sp)
   25908:	dc801117 	ldw	r18,68(sp)
   2590c:	dc401017 	ldw	r17,64(sp)
   25910:	dc000f17 	ldw	r16,60(sp)
   25914:	dec01304 	addi	sp,sp,76
   25918:	f800283a 	ret
   2591c:	80c0030b 	ldhu	r3,12(r16)
   25920:	1880200c 	andi	r2,r3,128
   25924:	10000426 	beq	r2,zero,25938 <__smakebuf_r+0xfc>
   25928:	04801004 	movi	r18,64
   2592c:	18820014 	ori	r2,r3,2048
   25930:	8080030d 	sth	r2,12(r16)
   25934:	003fe506 	br	258cc <__smakebuf_r+0x90>
   25938:	04810004 	movi	r18,1024
   2593c:	003ffb06 	br	2592c <__smakebuf_r+0xf0>
   25940:	8140038f 	ldh	r5,14(r16)
   25944:	8809883a 	mov	r4,r17
   25948:	00281300 	call	28130 <_isatty_r>
   2594c:	103fde26 	beq	r2,zero,258c8 <__smakebuf_r+0x8c>
   25950:	8080030b 	ldhu	r2,12(r16)
   25954:	80c010c4 	addi	r3,r16,67
   25958:	04810004 	movi	r18,1024
   2595c:	10800054 	ori	r2,r2,1
   25960:	8080030d 	sth	r2,12(r16)
   25964:	00800044 	movi	r2,1
   25968:	80c00415 	stw	r3,16(r16)
   2596c:	80800515 	stw	r2,20(r16)
   25970:	80c00015 	stw	r3,0(r16)
   25974:	003fd506 	br	258cc <__smakebuf_r+0x90>
   25978:	80c00a17 	ldw	r3,40(r16)
   2597c:	008000b4 	movhi	r2,2
   25980:	109edd04 	addi	r2,r2,31604
   25984:	18bfcb1e 	bne	r3,r2,258b4 <__smakebuf_r+0x78>
   25988:	8080030b 	ldhu	r2,12(r16)
   2598c:	00c10004 	movi	r3,1024
   25990:	1825883a 	mov	r18,r3
   25994:	10c4b03a 	or	r2,r2,r3
   25998:	8080030d 	sth	r2,12(r16)
   2599c:	80c01315 	stw	r3,76(r16)
   259a0:	003fca06 	br	258cc <__smakebuf_r+0x90>
   259a4:	8100030b 	ldhu	r4,12(r16)
   259a8:	2080800c 	andi	r2,r4,512
   259ac:	103fb21e 	bne	r2,zero,25878 <__smakebuf_r+0x3c>
   259b0:	80c010c4 	addi	r3,r16,67
   259b4:	21000094 	ori	r4,r4,2
   259b8:	00800044 	movi	r2,1
   259bc:	80800515 	stw	r2,20(r16)
   259c0:	8100030d 	sth	r4,12(r16)
   259c4:	80c00415 	stw	r3,16(r16)
   259c8:	80c00015 	stw	r3,0(r16)
   259cc:	003faa06 	br	25878 <__smakebuf_r+0x3c>

000259d0 <_malloc_r>:
   259d0:	defff604 	addi	sp,sp,-40
   259d4:	28c002c4 	addi	r3,r5,11
   259d8:	00800584 	movi	r2,22
   259dc:	dc800215 	stw	r18,8(sp)
   259e0:	dfc00915 	stw	ra,36(sp)
   259e4:	df000815 	stw	fp,32(sp)
   259e8:	ddc00715 	stw	r23,28(sp)
   259ec:	dd800615 	stw	r22,24(sp)
   259f0:	dd400515 	stw	r21,20(sp)
   259f4:	dd000415 	stw	r20,16(sp)
   259f8:	dcc00315 	stw	r19,12(sp)
   259fc:	dc400115 	stw	r17,4(sp)
   25a00:	dc000015 	stw	r16,0(sp)
   25a04:	2025883a 	mov	r18,r4
   25a08:	10c01236 	bltu	r2,r3,25a54 <_malloc_r+0x84>
   25a0c:	04400404 	movi	r17,16
   25a10:	8940142e 	bgeu	r17,r5,25a64 <_malloc_r+0x94>
   25a14:	00800304 	movi	r2,12
   25a18:	0007883a 	mov	r3,zero
   25a1c:	90800015 	stw	r2,0(r18)
   25a20:	1805883a 	mov	r2,r3
   25a24:	dfc00917 	ldw	ra,36(sp)
   25a28:	df000817 	ldw	fp,32(sp)
   25a2c:	ddc00717 	ldw	r23,28(sp)
   25a30:	dd800617 	ldw	r22,24(sp)
   25a34:	dd400517 	ldw	r21,20(sp)
   25a38:	dd000417 	ldw	r20,16(sp)
   25a3c:	dcc00317 	ldw	r19,12(sp)
   25a40:	dc800217 	ldw	r18,8(sp)
   25a44:	dc400117 	ldw	r17,4(sp)
   25a48:	dc000017 	ldw	r16,0(sp)
   25a4c:	dec00a04 	addi	sp,sp,40
   25a50:	f800283a 	ret
   25a54:	00bffe04 	movi	r2,-8
   25a58:	18a2703a 	and	r17,r3,r2
   25a5c:	883fed16 	blt	r17,zero,25a14 <_malloc_r+0x44>
   25a60:	897fec36 	bltu	r17,r5,25a14 <_malloc_r+0x44>
   25a64:	9009883a 	mov	r4,r18
   25a68:	002b2240 	call	2b224 <__malloc_lock>
   25a6c:	00807dc4 	movi	r2,503
   25a70:	14402b2e 	bgeu	r2,r17,25b20 <_malloc_r+0x150>
   25a74:	8806d27a 	srli	r3,r17,9
   25a78:	18003f1e 	bne	r3,zero,25b78 <_malloc_r+0x1a8>
   25a7c:	880cd0fa 	srli	r6,r17,3
   25a80:	300490fa 	slli	r2,r6,3
   25a84:	02c000f4 	movhi	r11,3
   25a88:	5af79704 	addi	r11,r11,-8612
   25a8c:	12cb883a 	add	r5,r2,r11
   25a90:	2c000317 	ldw	r16,12(r5)
   25a94:	580f883a 	mov	r7,r11
   25a98:	2c00041e 	bne	r5,r16,25aac <_malloc_r+0xdc>
   25a9c:	00000a06 	br	25ac8 <_malloc_r+0xf8>
   25aa0:	1800860e 	bge	r3,zero,25cbc <_malloc_r+0x2ec>
   25aa4:	84000317 	ldw	r16,12(r16)
   25aa8:	2c000726 	beq	r5,r16,25ac8 <_malloc_r+0xf8>
   25aac:	80800117 	ldw	r2,4(r16)
   25ab0:	00ffff04 	movi	r3,-4
   25ab4:	10c8703a 	and	r4,r2,r3
   25ab8:	2447c83a 	sub	r3,r4,r17
   25abc:	008003c4 	movi	r2,15
   25ac0:	10fff70e 	bge	r2,r3,25aa0 <_malloc_r+0xd0>
   25ac4:	31bfffc4 	addi	r6,r6,-1
   25ac8:	32400044 	addi	r9,r6,1
   25acc:	028000f4 	movhi	r10,3
   25ad0:	52b79904 	addi	r10,r10,-8604
   25ad4:	54000217 	ldw	r16,8(r10)
   25ad8:	8280a026 	beq	r16,r10,25d5c <_malloc_r+0x38c>
   25adc:	80800117 	ldw	r2,4(r16)
   25ae0:	00ffff04 	movi	r3,-4
   25ae4:	10ca703a 	and	r5,r2,r3
   25ae8:	2c4dc83a 	sub	r6,r5,r17
   25aec:	008003c4 	movi	r2,15
   25af0:	11808316 	blt	r2,r6,25d00 <_malloc_r+0x330>
   25af4:	52800315 	stw	r10,12(r10)
   25af8:	52800215 	stw	r10,8(r10)
   25afc:	30002916 	blt	r6,zero,25ba4 <_malloc_r+0x1d4>
   25b00:	8147883a 	add	r3,r16,r5
   25b04:	18800117 	ldw	r2,4(r3)
   25b08:	9009883a 	mov	r4,r18
   25b0c:	10800054 	ori	r2,r2,1
   25b10:	18800115 	stw	r2,4(r3)
   25b14:	002b2440 	call	2b244 <__malloc_unlock>
   25b18:	80c00204 	addi	r3,r16,8
   25b1c:	003fc006 	br	25a20 <_malloc_r+0x50>
   25b20:	02c000f4 	movhi	r11,3
   25b24:	5af79704 	addi	r11,r11,-8612
   25b28:	8ac5883a 	add	r2,r17,r11
   25b2c:	14000317 	ldw	r16,12(r2)
   25b30:	580f883a 	mov	r7,r11
   25b34:	8806d0fa 	srli	r3,r17,3
   25b38:	14006c26 	beq	r2,r16,25cec <_malloc_r+0x31c>
   25b3c:	80c00117 	ldw	r3,4(r16)
   25b40:	00bfff04 	movi	r2,-4
   25b44:	81800317 	ldw	r6,12(r16)
   25b48:	1886703a 	and	r3,r3,r2
   25b4c:	80c7883a 	add	r3,r16,r3
   25b50:	18800117 	ldw	r2,4(r3)
   25b54:	81400217 	ldw	r5,8(r16)
   25b58:	9009883a 	mov	r4,r18
   25b5c:	10800054 	ori	r2,r2,1
   25b60:	18800115 	stw	r2,4(r3)
   25b64:	31400215 	stw	r5,8(r6)
   25b68:	29800315 	stw	r6,12(r5)
   25b6c:	002b2440 	call	2b244 <__malloc_unlock>
   25b70:	80c00204 	addi	r3,r16,8
   25b74:	003faa06 	br	25a20 <_malloc_r+0x50>
   25b78:	00800104 	movi	r2,4
   25b7c:	10c0052e 	bgeu	r2,r3,25b94 <_malloc_r+0x1c4>
   25b80:	00800504 	movi	r2,20
   25b84:	10c07836 	bltu	r2,r3,25d68 <_malloc_r+0x398>
   25b88:	198016c4 	addi	r6,r3,91
   25b8c:	300490fa 	slli	r2,r6,3
   25b90:	003fbc06 	br	25a84 <_malloc_r+0xb4>
   25b94:	8804d1ba 	srli	r2,r17,6
   25b98:	11800e04 	addi	r6,r2,56
   25b9c:	300490fa 	slli	r2,r6,3
   25ba0:	003fb806 	br	25a84 <_malloc_r+0xb4>
   25ba4:	00807fc4 	movi	r2,511
   25ba8:	1140bb36 	bltu	r2,r5,25e98 <_malloc_r+0x4c8>
   25bac:	2806d0fa 	srli	r3,r5,3
   25bb0:	573ffe04 	addi	fp,r10,-8
   25bb4:	00800044 	movi	r2,1
   25bb8:	180890fa 	slli	r4,r3,3
   25bbc:	1807d0ba 	srai	r3,r3,2
   25bc0:	e1c00117 	ldw	r7,4(fp)
   25bc4:	5909883a 	add	r4,r11,r4
   25bc8:	21400217 	ldw	r5,8(r4)
   25bcc:	10c4983a 	sll	r2,r2,r3
   25bd0:	81000315 	stw	r4,12(r16)
   25bd4:	81400215 	stw	r5,8(r16)
   25bd8:	388eb03a 	or	r7,r7,r2
   25bdc:	2c000315 	stw	r16,12(r5)
   25be0:	24000215 	stw	r16,8(r4)
   25be4:	e1c00115 	stw	r7,4(fp)
   25be8:	4807883a 	mov	r3,r9
   25bec:	4800cd16 	blt	r9,zero,25f24 <_malloc_r+0x554>
   25bf0:	1807d0ba 	srai	r3,r3,2
   25bf4:	00800044 	movi	r2,1
   25bf8:	10c8983a 	sll	r4,r2,r3
   25bfc:	39004436 	bltu	r7,r4,25d10 <_malloc_r+0x340>
   25c00:	21c4703a 	and	r2,r4,r7
   25c04:	10000a1e 	bne	r2,zero,25c30 <_malloc_r+0x260>
   25c08:	2109883a 	add	r4,r4,r4
   25c0c:	00bfff04 	movi	r2,-4
   25c10:	4884703a 	and	r2,r9,r2
   25c14:	3906703a 	and	r3,r7,r4
   25c18:	12400104 	addi	r9,r2,4
   25c1c:	1800041e 	bne	r3,zero,25c30 <_malloc_r+0x260>
   25c20:	2109883a 	add	r4,r4,r4
   25c24:	3904703a 	and	r2,r7,r4
   25c28:	4a400104 	addi	r9,r9,4
   25c2c:	103ffc26 	beq	r2,zero,25c20 <_malloc_r+0x250>
   25c30:	480490fa 	slli	r2,r9,3
   25c34:	4819883a 	mov	r12,r9
   25c38:	023fff04 	movi	r8,-4
   25c3c:	589b883a 	add	r13,r11,r2
   25c40:	6807883a 	mov	r3,r13
   25c44:	014003c4 	movi	r5,15
   25c48:	1c000317 	ldw	r16,12(r3)
   25c4c:	1c00041e 	bne	r3,r16,25c60 <_malloc_r+0x290>
   25c50:	0000a706 	br	25ef0 <_malloc_r+0x520>
   25c54:	3000ab0e 	bge	r6,zero,25f04 <_malloc_r+0x534>
   25c58:	84000317 	ldw	r16,12(r16)
   25c5c:	1c00a426 	beq	r3,r16,25ef0 <_malloc_r+0x520>
   25c60:	80800117 	ldw	r2,4(r16)
   25c64:	1204703a 	and	r2,r2,r8
   25c68:	144dc83a 	sub	r6,r2,r17
   25c6c:	29bff90e 	bge	r5,r6,25c54 <_malloc_r+0x284>
   25c70:	81000317 	ldw	r4,12(r16)
   25c74:	80c00217 	ldw	r3,8(r16)
   25c78:	89400054 	ori	r5,r17,1
   25c7c:	8445883a 	add	r2,r16,r17
   25c80:	20c00215 	stw	r3,8(r4)
   25c84:	19000315 	stw	r4,12(r3)
   25c88:	81400115 	stw	r5,4(r16)
   25c8c:	1187883a 	add	r3,r2,r6
   25c90:	31000054 	ori	r4,r6,1
   25c94:	50800315 	stw	r2,12(r10)
   25c98:	50800215 	stw	r2,8(r10)
   25c9c:	19800015 	stw	r6,0(r3)
   25ca0:	11000115 	stw	r4,4(r2)
   25ca4:	12800215 	stw	r10,8(r2)
   25ca8:	12800315 	stw	r10,12(r2)
   25cac:	9009883a 	mov	r4,r18
   25cb0:	002b2440 	call	2b244 <__malloc_unlock>
   25cb4:	80c00204 	addi	r3,r16,8
   25cb8:	003f5906 	br	25a20 <_malloc_r+0x50>
   25cbc:	8109883a 	add	r4,r16,r4
   25cc0:	20800117 	ldw	r2,4(r4)
   25cc4:	80c00217 	ldw	r3,8(r16)
   25cc8:	81400317 	ldw	r5,12(r16)
   25ccc:	10800054 	ori	r2,r2,1
   25cd0:	20800115 	stw	r2,4(r4)
   25cd4:	28c00215 	stw	r3,8(r5)
   25cd8:	19400315 	stw	r5,12(r3)
   25cdc:	9009883a 	mov	r4,r18
   25ce0:	002b2440 	call	2b244 <__malloc_unlock>
   25ce4:	80c00204 	addi	r3,r16,8
   25ce8:	003f4d06 	br	25a20 <_malloc_r+0x50>
   25cec:	80800204 	addi	r2,r16,8
   25cf0:	14000317 	ldw	r16,12(r2)
   25cf4:	143f911e 	bne	r2,r16,25b3c <_malloc_r+0x16c>
   25cf8:	1a400084 	addi	r9,r3,2
   25cfc:	003f7306 	br	25acc <_malloc_r+0xfc>
   25d00:	88c00054 	ori	r3,r17,1
   25d04:	8445883a 	add	r2,r16,r17
   25d08:	80c00115 	stw	r3,4(r16)
   25d0c:	003fdf06 	br	25c8c <_malloc_r+0x2bc>
   25d10:	e4000217 	ldw	r16,8(fp)
   25d14:	00bfff04 	movi	r2,-4
   25d18:	80c00117 	ldw	r3,4(r16)
   25d1c:	802d883a 	mov	r22,r16
   25d20:	18aa703a 	and	r21,r3,r2
   25d24:	ac401636 	bltu	r21,r17,25d80 <_malloc_r+0x3b0>
   25d28:	ac49c83a 	sub	r4,r21,r17
   25d2c:	008003c4 	movi	r2,15
   25d30:	1100130e 	bge	r2,r4,25d80 <_malloc_r+0x3b0>
   25d34:	88800054 	ori	r2,r17,1
   25d38:	8447883a 	add	r3,r16,r17
   25d3c:	80800115 	stw	r2,4(r16)
   25d40:	20800054 	ori	r2,r4,1
   25d44:	18800115 	stw	r2,4(r3)
   25d48:	e0c00215 	stw	r3,8(fp)
   25d4c:	9009883a 	mov	r4,r18
   25d50:	002b2440 	call	2b244 <__malloc_unlock>
   25d54:	80c00204 	addi	r3,r16,8
   25d58:	003f3106 	br	25a20 <_malloc_r+0x50>
   25d5c:	39c00117 	ldw	r7,4(r7)
   25d60:	573ffe04 	addi	fp,r10,-8
   25d64:	003fa006 	br	25be8 <_malloc_r+0x218>
   25d68:	00801504 	movi	r2,84
   25d6c:	10c06736 	bltu	r2,r3,25f0c <_malloc_r+0x53c>
   25d70:	8804d33a 	srli	r2,r17,12
   25d74:	11801b84 	addi	r6,r2,110
   25d78:	300490fa 	slli	r2,r6,3
   25d7c:	003f4106 	br	25a84 <_malloc_r+0xb4>
   25d80:	d0a6af17 	ldw	r2,-25924(gp)
   25d84:	d0e00717 	ldw	r3,-32740(gp)
   25d88:	053fffc4 	movi	r20,-1
   25d8c:	10800404 	addi	r2,r2,16
   25d90:	88a7883a 	add	r19,r17,r2
   25d94:	1d000326 	beq	r3,r20,25da4 <_malloc_r+0x3d4>
   25d98:	98c3ffc4 	addi	r3,r19,4095
   25d9c:	00bc0004 	movi	r2,-4096
   25da0:	18a6703a 	and	r19,r3,r2
   25da4:	9009883a 	mov	r4,r18
   25da8:	980b883a 	mov	r5,r19
   25dac:	0027afc0 	call	27afc <_sbrk_r>
   25db0:	1009883a 	mov	r4,r2
   25db4:	15000426 	beq	r2,r20,25dc8 <_malloc_r+0x3f8>
   25db8:	854b883a 	add	r5,r16,r21
   25dbc:	1029883a 	mov	r20,r2
   25dc0:	11405a2e 	bgeu	r2,r5,25f2c <_malloc_r+0x55c>
   25dc4:	87000c26 	beq	r16,fp,25df8 <_malloc_r+0x428>
   25dc8:	e4000217 	ldw	r16,8(fp)
   25dcc:	80c00117 	ldw	r3,4(r16)
   25dd0:	00bfff04 	movi	r2,-4
   25dd4:	1884703a 	and	r2,r3,r2
   25dd8:	14400336 	bltu	r2,r17,25de8 <_malloc_r+0x418>
   25ddc:	1449c83a 	sub	r4,r2,r17
   25de0:	008003c4 	movi	r2,15
   25de4:	113fd316 	blt	r2,r4,25d34 <_malloc_r+0x364>
   25de8:	9009883a 	mov	r4,r18
   25dec:	002b2440 	call	2b244 <__malloc_unlock>
   25df0:	0007883a 	mov	r3,zero
   25df4:	003f0a06 	br	25a20 <_malloc_r+0x50>
   25df8:	05c000f4 	movhi	r23,3
   25dfc:	bdc3d404 	addi	r23,r23,3920
   25e00:	b8800017 	ldw	r2,0(r23)
   25e04:	988d883a 	add	r6,r19,r2
   25e08:	b9800015 	stw	r6,0(r23)
   25e0c:	d0e00717 	ldw	r3,-32740(gp)
   25e10:	00bfffc4 	movi	r2,-1
   25e14:	18808e26 	beq	r3,r2,26050 <_malloc_r+0x680>
   25e18:	2145c83a 	sub	r2,r4,r5
   25e1c:	3085883a 	add	r2,r6,r2
   25e20:	b8800015 	stw	r2,0(r23)
   25e24:	20c001cc 	andi	r3,r4,7
   25e28:	18005f1e 	bne	r3,zero,25fa8 <_malloc_r+0x5d8>
   25e2c:	000b883a 	mov	r5,zero
   25e30:	a4c5883a 	add	r2,r20,r19
   25e34:	1083ffcc 	andi	r2,r2,4095
   25e38:	00c40004 	movi	r3,4096
   25e3c:	1887c83a 	sub	r3,r3,r2
   25e40:	28e7883a 	add	r19,r5,r3
   25e44:	9009883a 	mov	r4,r18
   25e48:	980b883a 	mov	r5,r19
   25e4c:	0027afc0 	call	27afc <_sbrk_r>
   25e50:	1007883a 	mov	r3,r2
   25e54:	00bfffc4 	movi	r2,-1
   25e58:	18807a26 	beq	r3,r2,26044 <_malloc_r+0x674>
   25e5c:	1d05c83a 	sub	r2,r3,r20
   25e60:	9885883a 	add	r2,r19,r2
   25e64:	10c00054 	ori	r3,r2,1
   25e68:	b8800017 	ldw	r2,0(r23)
   25e6c:	a021883a 	mov	r16,r20
   25e70:	a0c00115 	stw	r3,4(r20)
   25e74:	9885883a 	add	r2,r19,r2
   25e78:	b8800015 	stw	r2,0(r23)
   25e7c:	e5000215 	stw	r20,8(fp)
   25e80:	b7003626 	beq	r22,fp,25f5c <_malloc_r+0x58c>
   25e84:	018003c4 	movi	r6,15
   25e88:	35404b36 	bltu	r6,r21,25fb8 <_malloc_r+0x5e8>
   25e8c:	00800044 	movi	r2,1
   25e90:	a0800115 	stw	r2,4(r20)
   25e94:	003fcd06 	br	25dcc <_malloc_r+0x3fc>
   25e98:	2808d27a 	srli	r4,r5,9
   25e9c:	2000371e 	bne	r4,zero,25f7c <_malloc_r+0x5ac>
   25ea0:	2808d0fa 	srli	r4,r5,3
   25ea4:	200690fa 	slli	r3,r4,3
   25ea8:	1ad1883a 	add	r8,r3,r11
   25eac:	41800217 	ldw	r6,8(r8)
   25eb0:	41805b26 	beq	r8,r6,26020 <_malloc_r+0x650>
   25eb4:	30800117 	ldw	r2,4(r6)
   25eb8:	00ffff04 	movi	r3,-4
   25ebc:	10c4703a 	and	r2,r2,r3
   25ec0:	2880022e 	bgeu	r5,r2,25ecc <_malloc_r+0x4fc>
   25ec4:	31800217 	ldw	r6,8(r6)
   25ec8:	41bffa1e 	bne	r8,r6,25eb4 <_malloc_r+0x4e4>
   25ecc:	32000317 	ldw	r8,12(r6)
   25ed0:	39c00117 	ldw	r7,4(r7)
   25ed4:	82000315 	stw	r8,12(r16)
   25ed8:	81800215 	stw	r6,8(r16)
   25edc:	070000f4 	movhi	fp,3
   25ee0:	e7379704 	addi	fp,fp,-8612
   25ee4:	34000315 	stw	r16,12(r6)
   25ee8:	44000215 	stw	r16,8(r8)
   25eec:	003f3e06 	br	25be8 <_malloc_r+0x218>
   25ef0:	63000044 	addi	r12,r12,1
   25ef4:	608000cc 	andi	r2,r12,3
   25ef8:	10005d26 	beq	r2,zero,26070 <_malloc_r+0x6a0>
   25efc:	18c00204 	addi	r3,r3,8
   25f00:	003f5106 	br	25c48 <_malloc_r+0x278>
   25f04:	8089883a 	add	r4,r16,r2
   25f08:	003f6d06 	br	25cc0 <_malloc_r+0x2f0>
   25f0c:	00805504 	movi	r2,340
   25f10:	10c02036 	bltu	r2,r3,25f94 <_malloc_r+0x5c4>
   25f14:	8804d3fa 	srli	r2,r17,15
   25f18:	11801dc4 	addi	r6,r2,119
   25f1c:	300490fa 	slli	r2,r6,3
   25f20:	003ed806 	br	25a84 <_malloc_r+0xb4>
   25f24:	48c000c4 	addi	r3,r9,3
   25f28:	003f3106 	br	25bf0 <_malloc_r+0x220>
   25f2c:	05c000f4 	movhi	r23,3
   25f30:	bdc3d404 	addi	r23,r23,3920
   25f34:	b8800017 	ldw	r2,0(r23)
   25f38:	988d883a 	add	r6,r19,r2
   25f3c:	b9800015 	stw	r6,0(r23)
   25f40:	293fb21e 	bne	r5,r4,25e0c <_malloc_r+0x43c>
   25f44:	2083ffcc 	andi	r2,r4,4095
   25f48:	103fb01e 	bne	r2,zero,25e0c <_malloc_r+0x43c>
   25f4c:	e4000217 	ldw	r16,8(fp)
   25f50:	9d45883a 	add	r2,r19,r21
   25f54:	10800054 	ori	r2,r2,1
   25f58:	80800115 	stw	r2,4(r16)
   25f5c:	b8c00017 	ldw	r3,0(r23)
   25f60:	d0a6b017 	ldw	r2,-25920(gp)
   25f64:	10c0012e 	bgeu	r2,r3,25f6c <_malloc_r+0x59c>
   25f68:	d0e6b015 	stw	r3,-25920(gp)
   25f6c:	d0a6b117 	ldw	r2,-25916(gp)
   25f70:	10ff962e 	bgeu	r2,r3,25dcc <_malloc_r+0x3fc>
   25f74:	d0e6b115 	stw	r3,-25916(gp)
   25f78:	003f9406 	br	25dcc <_malloc_r+0x3fc>
   25f7c:	00800104 	movi	r2,4
   25f80:	11001e36 	bltu	r2,r4,25ffc <_malloc_r+0x62c>
   25f84:	2804d1ba 	srli	r2,r5,6
   25f88:	11000e04 	addi	r4,r2,56
   25f8c:	200690fa 	slli	r3,r4,3
   25f90:	003fc506 	br	25ea8 <_malloc_r+0x4d8>
   25f94:	00815504 	movi	r2,1364
   25f98:	10c01d2e 	bgeu	r2,r3,26010 <_malloc_r+0x640>
   25f9c:	01801f84 	movi	r6,126
   25fa0:	0080fc04 	movi	r2,1008
   25fa4:	003eb706 	br	25a84 <_malloc_r+0xb4>
   25fa8:	00800204 	movi	r2,8
   25fac:	10cbc83a 	sub	r5,r2,r3
   25fb0:	2169883a 	add	r20,r4,r5
   25fb4:	003f9e06 	br	25e30 <_malloc_r+0x460>
   25fb8:	00bffe04 	movi	r2,-8
   25fbc:	a93ffd04 	addi	r4,r21,-12
   25fc0:	2088703a 	and	r4,r4,r2
   25fc4:	b10b883a 	add	r5,r22,r4
   25fc8:	00c00144 	movi	r3,5
   25fcc:	28c00215 	stw	r3,8(r5)
   25fd0:	28c00115 	stw	r3,4(r5)
   25fd4:	b0800117 	ldw	r2,4(r22)
   25fd8:	1080004c 	andi	r2,r2,1
   25fdc:	2084b03a 	or	r2,r4,r2
   25fe0:	b0800115 	stw	r2,4(r22)
   25fe4:	313fdd2e 	bgeu	r6,r4,25f5c <_malloc_r+0x58c>
   25fe8:	b1400204 	addi	r5,r22,8
   25fec:	9009883a 	mov	r4,r18
   25ff0:	0024e480 	call	24e48 <_free_r>
   25ff4:	e4000217 	ldw	r16,8(fp)
   25ff8:	003fd806 	br	25f5c <_malloc_r+0x58c>
   25ffc:	00800504 	movi	r2,20
   26000:	11001536 	bltu	r2,r4,26058 <_malloc_r+0x688>
   26004:	210016c4 	addi	r4,r4,91
   26008:	200690fa 	slli	r3,r4,3
   2600c:	003fa606 	br	25ea8 <_malloc_r+0x4d8>
   26010:	8804d4ba 	srli	r2,r17,18
   26014:	11801f04 	addi	r6,r2,124
   26018:	300490fa 	slli	r2,r6,3
   2601c:	003e9906 	br	25a84 <_malloc_r+0xb4>
   26020:	2009d0ba 	srai	r4,r4,2
   26024:	014000f4 	movhi	r5,3
   26028:	29779704 	addi	r5,r5,-8612
   2602c:	00c00044 	movi	r3,1
   26030:	28800117 	ldw	r2,4(r5)
   26034:	1906983a 	sll	r3,r3,r4
   26038:	10c4b03a 	or	r2,r2,r3
   2603c:	28800115 	stw	r2,4(r5)
   26040:	003fa306 	br	25ed0 <_malloc_r+0x500>
   26044:	0027883a 	mov	r19,zero
   26048:	00c00044 	movi	r3,1
   2604c:	003f8606 	br	25e68 <_malloc_r+0x498>
   26050:	d1200715 	stw	r4,-32740(gp)
   26054:	003f7306 	br	25e24 <_malloc_r+0x454>
   26058:	00801504 	movi	r2,84
   2605c:	11001936 	bltu	r2,r4,260c4 <_malloc_r+0x6f4>
   26060:	2804d33a 	srli	r2,r5,12
   26064:	11001b84 	addi	r4,r2,110
   26068:	200690fa 	slli	r3,r4,3
   2606c:	003f8e06 	br	25ea8 <_malloc_r+0x4d8>
   26070:	480b883a 	mov	r5,r9
   26074:	6807883a 	mov	r3,r13
   26078:	288000cc 	andi	r2,r5,3
   2607c:	18fffe04 	addi	r3,r3,-8
   26080:	297fffc4 	addi	r5,r5,-1
   26084:	10001526 	beq	r2,zero,260dc <_malloc_r+0x70c>
   26088:	18800217 	ldw	r2,8(r3)
   2608c:	10fffa26 	beq	r2,r3,26078 <_malloc_r+0x6a8>
   26090:	2109883a 	add	r4,r4,r4
   26094:	393f1e36 	bltu	r7,r4,25d10 <_malloc_r+0x340>
   26098:	203f1d26 	beq	r4,zero,25d10 <_malloc_r+0x340>
   2609c:	21c4703a 	and	r2,r4,r7
   260a0:	10000226 	beq	r2,zero,260ac <_malloc_r+0x6dc>
   260a4:	6013883a 	mov	r9,r12
   260a8:	003ee106 	br	25c30 <_malloc_r+0x260>
   260ac:	2109883a 	add	r4,r4,r4
   260b0:	3904703a 	and	r2,r7,r4
   260b4:	63000104 	addi	r12,r12,4
   260b8:	103ffc26 	beq	r2,zero,260ac <_malloc_r+0x6dc>
   260bc:	6013883a 	mov	r9,r12
   260c0:	003edb06 	br	25c30 <_malloc_r+0x260>
   260c4:	00805504 	movi	r2,340
   260c8:	11000836 	bltu	r2,r4,260ec <_malloc_r+0x71c>
   260cc:	2804d3fa 	srli	r2,r5,15
   260d0:	11001dc4 	addi	r4,r2,119
   260d4:	200690fa 	slli	r3,r4,3
   260d8:	003f7306 	br	25ea8 <_malloc_r+0x4d8>
   260dc:	0104303a 	nor	r2,zero,r4
   260e0:	388e703a 	and	r7,r7,r2
   260e4:	e1c00115 	stw	r7,4(fp)
   260e8:	003fe906 	br	26090 <_malloc_r+0x6c0>
   260ec:	00815504 	movi	r2,1364
   260f0:	1100032e 	bgeu	r2,r4,26100 <_malloc_r+0x730>
   260f4:	01001f84 	movi	r4,126
   260f8:	00c0fc04 	movi	r3,1008
   260fc:	003f6a06 	br	25ea8 <_malloc_r+0x4d8>
   26100:	2804d4ba 	srli	r2,r5,18
   26104:	11001f04 	addi	r4,r2,124
   26108:	200690fa 	slli	r3,r4,3
   2610c:	003f6606 	br	25ea8 <_malloc_r+0x4d8>

00026110 <memchr>:
   26110:	008000c4 	movi	r2,3
   26114:	29403fcc 	andi	r5,r5,255
   26118:	2007883a 	mov	r3,r4
   2611c:	1180022e 	bgeu	r2,r6,26128 <memchr+0x18>
   26120:	2084703a 	and	r2,r4,r2
   26124:	10000b26 	beq	r2,zero,26154 <memchr+0x44>
   26128:	313fffc4 	addi	r4,r6,-1
   2612c:	3000051e 	bne	r6,zero,26144 <memchr+0x34>
   26130:	00002c06 	br	261e4 <memchr+0xd4>
   26134:	213fffc4 	addi	r4,r4,-1
   26138:	00bfffc4 	movi	r2,-1
   2613c:	18c00044 	addi	r3,r3,1
   26140:	20802826 	beq	r4,r2,261e4 <memchr+0xd4>
   26144:	18800003 	ldbu	r2,0(r3)
   26148:	28bffa1e 	bne	r5,r2,26134 <memchr+0x24>
   2614c:	1805883a 	mov	r2,r3
   26150:	f800283a 	ret
   26154:	0011883a 	mov	r8,zero
   26158:	0007883a 	mov	r3,zero
   2615c:	01c00104 	movi	r7,4
   26160:	4004923a 	slli	r2,r8,8
   26164:	18c00044 	addi	r3,r3,1
   26168:	1151883a 	add	r8,r2,r5
   2616c:	19fffc1e 	bne	r3,r7,26160 <memchr+0x50>
   26170:	02bfbff4 	movhi	r10,65279
   26174:	52bfbfc4 	addi	r10,r10,-257
   26178:	02602074 	movhi	r9,32897
   2617c:	4a602004 	addi	r9,r9,-32640
   26180:	02c000c4 	movi	r11,3
   26184:	20800017 	ldw	r2,0(r4)
   26188:	31bfff04 	addi	r6,r6,-4
   2618c:	200f883a 	mov	r7,r4
   26190:	1204f03a 	xor	r2,r2,r8
   26194:	1287883a 	add	r3,r2,r10
   26198:	1a46703a 	and	r3,r3,r9
   2619c:	0084303a 	nor	r2,zero,r2
   261a0:	10c4703a 	and	r2,r2,r3
   261a4:	10000b26 	beq	r2,zero,261d4 <memchr+0xc4>
   261a8:	20800003 	ldbu	r2,0(r4)
   261ac:	28800f26 	beq	r5,r2,261ec <memchr+0xdc>
   261b0:	20800043 	ldbu	r2,1(r4)
   261b4:	21c00044 	addi	r7,r4,1
   261b8:	28800c26 	beq	r5,r2,261ec <memchr+0xdc>
   261bc:	20800083 	ldbu	r2,2(r4)
   261c0:	21c00084 	addi	r7,r4,2
   261c4:	28800926 	beq	r5,r2,261ec <memchr+0xdc>
   261c8:	208000c3 	ldbu	r2,3(r4)
   261cc:	21c000c4 	addi	r7,r4,3
   261d0:	28800626 	beq	r5,r2,261ec <memchr+0xdc>
   261d4:	21000104 	addi	r4,r4,4
   261d8:	59bfea36 	bltu	r11,r6,26184 <memchr+0x74>
   261dc:	2007883a 	mov	r3,r4
   261e0:	003fd106 	br	26128 <memchr+0x18>
   261e4:	0005883a 	mov	r2,zero
   261e8:	f800283a 	ret
   261ec:	3805883a 	mov	r2,r7
   261f0:	f800283a 	ret

000261f4 <memcpy>:
   261f4:	01c003c4 	movi	r7,15
   261f8:	2007883a 	mov	r3,r4
   261fc:	3980032e 	bgeu	r7,r6,2620c <memcpy+0x18>
   26200:	2904b03a 	or	r2,r5,r4
   26204:	108000cc 	andi	r2,r2,3
   26208:	10000926 	beq	r2,zero,26230 <memcpy+0x3c>
   2620c:	30000626 	beq	r6,zero,26228 <memcpy+0x34>
   26210:	30cd883a 	add	r6,r6,r3
   26214:	28800003 	ldbu	r2,0(r5)
   26218:	29400044 	addi	r5,r5,1
   2621c:	18800005 	stb	r2,0(r3)
   26220:	18c00044 	addi	r3,r3,1
   26224:	30fffb1e 	bne	r6,r3,26214 <memcpy+0x20>
   26228:	2005883a 	mov	r2,r4
   2622c:	f800283a 	ret
   26230:	3811883a 	mov	r8,r7
   26234:	200f883a 	mov	r7,r4
   26238:	28c00017 	ldw	r3,0(r5)
   2623c:	31bffc04 	addi	r6,r6,-16
   26240:	38c00015 	stw	r3,0(r7)
   26244:	28800117 	ldw	r2,4(r5)
   26248:	38800115 	stw	r2,4(r7)
   2624c:	28c00217 	ldw	r3,8(r5)
   26250:	38c00215 	stw	r3,8(r7)
   26254:	28800317 	ldw	r2,12(r5)
   26258:	29400404 	addi	r5,r5,16
   2625c:	38800315 	stw	r2,12(r7)
   26260:	39c00404 	addi	r7,r7,16
   26264:	41bff436 	bltu	r8,r6,26238 <memcpy+0x44>
   26268:	008000c4 	movi	r2,3
   2626c:	1180072e 	bgeu	r2,r6,2628c <memcpy+0x98>
   26270:	1007883a 	mov	r3,r2
   26274:	28800017 	ldw	r2,0(r5)
   26278:	31bfff04 	addi	r6,r6,-4
   2627c:	29400104 	addi	r5,r5,4
   26280:	38800015 	stw	r2,0(r7)
   26284:	39c00104 	addi	r7,r7,4
   26288:	19bffa36 	bltu	r3,r6,26274 <memcpy+0x80>
   2628c:	3807883a 	mov	r3,r7
   26290:	003fde06 	br	2620c <memcpy+0x18>

00026294 <memmove>:
   26294:	2807883a 	mov	r3,r5
   26298:	2011883a 	mov	r8,r4
   2629c:	29000c2e 	bgeu	r5,r4,262d0 <memmove+0x3c>
   262a0:	298f883a 	add	r7,r5,r6
   262a4:	21c00a2e 	bgeu	r4,r7,262d0 <memmove+0x3c>
   262a8:	30000726 	beq	r6,zero,262c8 <memmove+0x34>
   262ac:	2187883a 	add	r3,r4,r6
   262b0:	198dc83a 	sub	r6,r3,r6
   262b4:	39ffffc4 	addi	r7,r7,-1
   262b8:	38800003 	ldbu	r2,0(r7)
   262bc:	18ffffc4 	addi	r3,r3,-1
   262c0:	18800005 	stb	r2,0(r3)
   262c4:	19bffb1e 	bne	r3,r6,262b4 <memmove+0x20>
   262c8:	2005883a 	mov	r2,r4
   262cc:	f800283a 	ret
   262d0:	01c003c4 	movi	r7,15
   262d4:	39800a36 	bltu	r7,r6,26300 <memmove+0x6c>
   262d8:	303ffb26 	beq	r6,zero,262c8 <memmove+0x34>
   262dc:	400f883a 	mov	r7,r8
   262e0:	320d883a 	add	r6,r6,r8
   262e4:	28800003 	ldbu	r2,0(r5)
   262e8:	29400044 	addi	r5,r5,1
   262ec:	38800005 	stb	r2,0(r7)
   262f0:	39c00044 	addi	r7,r7,1
   262f4:	39bffb1e 	bne	r7,r6,262e4 <memmove+0x50>
   262f8:	2005883a 	mov	r2,r4
   262fc:	f800283a 	ret
   26300:	1904b03a 	or	r2,r3,r4
   26304:	108000cc 	andi	r2,r2,3
   26308:	103ff31e 	bne	r2,zero,262d8 <memmove+0x44>
   2630c:	3811883a 	mov	r8,r7
   26310:	180b883a 	mov	r5,r3
   26314:	200f883a 	mov	r7,r4
   26318:	28c00017 	ldw	r3,0(r5)
   2631c:	31bffc04 	addi	r6,r6,-16
   26320:	38c00015 	stw	r3,0(r7)
   26324:	28800117 	ldw	r2,4(r5)
   26328:	38800115 	stw	r2,4(r7)
   2632c:	28c00217 	ldw	r3,8(r5)
   26330:	38c00215 	stw	r3,8(r7)
   26334:	28800317 	ldw	r2,12(r5)
   26338:	29400404 	addi	r5,r5,16
   2633c:	38800315 	stw	r2,12(r7)
   26340:	39c00404 	addi	r7,r7,16
   26344:	41bff436 	bltu	r8,r6,26318 <memmove+0x84>
   26348:	008000c4 	movi	r2,3
   2634c:	1180072e 	bgeu	r2,r6,2636c <memmove+0xd8>
   26350:	1007883a 	mov	r3,r2
   26354:	28800017 	ldw	r2,0(r5)
   26358:	31bfff04 	addi	r6,r6,-4
   2635c:	29400104 	addi	r5,r5,4
   26360:	38800015 	stw	r2,0(r7)
   26364:	39c00104 	addi	r7,r7,4
   26368:	19bffa36 	bltu	r3,r6,26354 <memmove+0xc0>
   2636c:	3811883a 	mov	r8,r7
   26370:	003fd906 	br	262d8 <memmove+0x44>

00026374 <memset>:
   26374:	008000c4 	movi	r2,3
   26378:	29403fcc 	andi	r5,r5,255
   2637c:	2007883a 	mov	r3,r4
   26380:	1180022e 	bgeu	r2,r6,2638c <memset+0x18>
   26384:	2084703a 	and	r2,r4,r2
   26388:	10000826 	beq	r2,zero,263ac <memset+0x38>
   2638c:	30000526 	beq	r6,zero,263a4 <memset+0x30>
   26390:	2805883a 	mov	r2,r5
   26394:	30cd883a 	add	r6,r6,r3
   26398:	18800005 	stb	r2,0(r3)
   2639c:	18c00044 	addi	r3,r3,1
   263a0:	19bffd1e 	bne	r3,r6,26398 <memset+0x24>
   263a4:	2005883a 	mov	r2,r4
   263a8:	f800283a 	ret
   263ac:	2804923a 	slli	r2,r5,8
   263b0:	020003c4 	movi	r8,15
   263b4:	200f883a 	mov	r7,r4
   263b8:	2884b03a 	or	r2,r5,r2
   263bc:	1006943a 	slli	r3,r2,16
   263c0:	10c6b03a 	or	r3,r2,r3
   263c4:	41800a2e 	bgeu	r8,r6,263f0 <memset+0x7c>
   263c8:	4005883a 	mov	r2,r8
   263cc:	31bffc04 	addi	r6,r6,-16
   263d0:	38c00015 	stw	r3,0(r7)
   263d4:	38c00115 	stw	r3,4(r7)
   263d8:	38c00215 	stw	r3,8(r7)
   263dc:	38c00315 	stw	r3,12(r7)
   263e0:	39c00404 	addi	r7,r7,16
   263e4:	11bff936 	bltu	r2,r6,263cc <memset+0x58>
   263e8:	008000c4 	movi	r2,3
   263ec:	1180052e 	bgeu	r2,r6,26404 <memset+0x90>
   263f0:	31bfff04 	addi	r6,r6,-4
   263f4:	008000c4 	movi	r2,3
   263f8:	38c00015 	stw	r3,0(r7)
   263fc:	39c00104 	addi	r7,r7,4
   26400:	11bffb36 	bltu	r2,r6,263f0 <memset+0x7c>
   26404:	3807883a 	mov	r3,r7
   26408:	003fe006 	br	2638c <memset+0x18>

0002640c <_Bfree>:
   2640c:	28000826 	beq	r5,zero,26430 <_Bfree+0x24>
   26410:	28800117 	ldw	r2,4(r5)
   26414:	21001317 	ldw	r4,76(r4)
   26418:	1085883a 	add	r2,r2,r2
   2641c:	1085883a 	add	r2,r2,r2
   26420:	1105883a 	add	r2,r2,r4
   26424:	10c00017 	ldw	r3,0(r2)
   26428:	28c00015 	stw	r3,0(r5)
   2642c:	11400015 	stw	r5,0(r2)
   26430:	f800283a 	ret

00026434 <__hi0bits>:
   26434:	20bfffec 	andhi	r2,r4,65535
   26438:	10001426 	beq	r2,zero,2648c <__hi0bits+0x58>
   2643c:	0007883a 	mov	r3,zero
   26440:	20bfc02c 	andhi	r2,r4,65280
   26444:	1000021e 	bne	r2,zero,26450 <__hi0bits+0x1c>
   26448:	2008923a 	slli	r4,r4,8
   2644c:	18c00204 	addi	r3,r3,8
   26450:	20bc002c 	andhi	r2,r4,61440
   26454:	1000021e 	bne	r2,zero,26460 <__hi0bits+0x2c>
   26458:	2008913a 	slli	r4,r4,4
   2645c:	18c00104 	addi	r3,r3,4
   26460:	20b0002c 	andhi	r2,r4,49152
   26464:	1000031e 	bne	r2,zero,26474 <__hi0bits+0x40>
   26468:	2105883a 	add	r2,r4,r4
   2646c:	18c00084 	addi	r3,r3,2
   26470:	1089883a 	add	r4,r2,r2
   26474:	20000316 	blt	r4,zero,26484 <__hi0bits+0x50>
   26478:	2090002c 	andhi	r2,r4,16384
   2647c:	10000626 	beq	r2,zero,26498 <__hi0bits+0x64>
   26480:	18c00044 	addi	r3,r3,1
   26484:	1805883a 	mov	r2,r3
   26488:	f800283a 	ret
   2648c:	2008943a 	slli	r4,r4,16
   26490:	00c00404 	movi	r3,16
   26494:	003fea06 	br	26440 <__hi0bits+0xc>
   26498:	00c00804 	movi	r3,32
   2649c:	1805883a 	mov	r2,r3
   264a0:	f800283a 	ret

000264a4 <__lo0bits>:
   264a4:	20c00017 	ldw	r3,0(r4)
   264a8:	188001cc 	andi	r2,r3,7
   264ac:	10000a26 	beq	r2,zero,264d8 <__lo0bits+0x34>
   264b0:	1880004c 	andi	r2,r3,1
   264b4:	1005003a 	cmpeq	r2,r2,zero
   264b8:	10002126 	beq	r2,zero,26540 <__lo0bits+0x9c>
   264bc:	1880008c 	andi	r2,r3,2
   264c0:	1000251e 	bne	r2,zero,26558 <__lo0bits+0xb4>
   264c4:	1804d0ba 	srli	r2,r3,2
   264c8:	01400084 	movi	r5,2
   264cc:	20800015 	stw	r2,0(r4)
   264d0:	2805883a 	mov	r2,r5
   264d4:	f800283a 	ret
   264d8:	18bfffcc 	andi	r2,r3,65535
   264dc:	10001526 	beq	r2,zero,26534 <__lo0bits+0x90>
   264e0:	000b883a 	mov	r5,zero
   264e4:	18803fcc 	andi	r2,r3,255
   264e8:	1000021e 	bne	r2,zero,264f4 <__lo0bits+0x50>
   264ec:	1806d23a 	srli	r3,r3,8
   264f0:	29400204 	addi	r5,r5,8
   264f4:	188003cc 	andi	r2,r3,15
   264f8:	1000021e 	bne	r2,zero,26504 <__lo0bits+0x60>
   264fc:	1806d13a 	srli	r3,r3,4
   26500:	29400104 	addi	r5,r5,4
   26504:	188000cc 	andi	r2,r3,3
   26508:	1000021e 	bne	r2,zero,26514 <__lo0bits+0x70>
   2650c:	1806d0ba 	srli	r3,r3,2
   26510:	29400084 	addi	r5,r5,2
   26514:	1880004c 	andi	r2,r3,1
   26518:	1000031e 	bne	r2,zero,26528 <__lo0bits+0x84>
   2651c:	1806d07a 	srli	r3,r3,1
   26520:	18000a26 	beq	r3,zero,2654c <__lo0bits+0xa8>
   26524:	29400044 	addi	r5,r5,1
   26528:	2805883a 	mov	r2,r5
   2652c:	20c00015 	stw	r3,0(r4)
   26530:	f800283a 	ret
   26534:	1806d43a 	srli	r3,r3,16
   26538:	01400404 	movi	r5,16
   2653c:	003fe906 	br	264e4 <__lo0bits+0x40>
   26540:	000b883a 	mov	r5,zero
   26544:	2805883a 	mov	r2,r5
   26548:	f800283a 	ret
   2654c:	01400804 	movi	r5,32
   26550:	2805883a 	mov	r2,r5
   26554:	f800283a 	ret
   26558:	1804d07a 	srli	r2,r3,1
   2655c:	01400044 	movi	r5,1
   26560:	20800015 	stw	r2,0(r4)
   26564:	003fda06 	br	264d0 <__lo0bits+0x2c>

00026568 <__mcmp>:
   26568:	20800417 	ldw	r2,16(r4)
   2656c:	28c00417 	ldw	r3,16(r5)
   26570:	10cfc83a 	sub	r7,r2,r3
   26574:	38000c1e 	bne	r7,zero,265a8 <__mcmp+0x40>
   26578:	18c5883a 	add	r2,r3,r3
   2657c:	1085883a 	add	r2,r2,r2
   26580:	10c00504 	addi	r3,r2,20
   26584:	21000504 	addi	r4,r4,20
   26588:	28cb883a 	add	r5,r5,r3
   2658c:	2085883a 	add	r2,r4,r2
   26590:	10bfff04 	addi	r2,r2,-4
   26594:	297fff04 	addi	r5,r5,-4
   26598:	11800017 	ldw	r6,0(r2)
   2659c:	28c00017 	ldw	r3,0(r5)
   265a0:	30c0031e 	bne	r6,r3,265b0 <__mcmp+0x48>
   265a4:	20bffa36 	bltu	r4,r2,26590 <__mcmp+0x28>
   265a8:	3805883a 	mov	r2,r7
   265ac:	f800283a 	ret
   265b0:	30c00336 	bltu	r6,r3,265c0 <__mcmp+0x58>
   265b4:	01c00044 	movi	r7,1
   265b8:	3805883a 	mov	r2,r7
   265bc:	f800283a 	ret
   265c0:	01ffffc4 	movi	r7,-1
   265c4:	003ff806 	br	265a8 <__mcmp+0x40>

000265c8 <__ulp>:
   265c8:	295ffc2c 	andhi	r5,r5,32752
   265cc:	013f3034 	movhi	r4,64704
   265d0:	290b883a 	add	r5,r5,r4
   265d4:	0145c83a 	sub	r2,zero,r5
   265d8:	1007d53a 	srai	r3,r2,20
   265dc:	000d883a 	mov	r6,zero
   265e0:	0140040e 	bge	zero,r5,265f4 <__ulp+0x2c>
   265e4:	280f883a 	mov	r7,r5
   265e8:	3807883a 	mov	r3,r7
   265ec:	3005883a 	mov	r2,r6
   265f0:	f800283a 	ret
   265f4:	008004c4 	movi	r2,19
   265f8:	193ffb04 	addi	r4,r3,-20
   265fc:	10c00c0e 	bge	r2,r3,26630 <__ulp+0x68>
   26600:	008007c4 	movi	r2,31
   26604:	1107c83a 	sub	r3,r2,r4
   26608:	00800784 	movi	r2,30
   2660c:	01400044 	movi	r5,1
   26610:	11000216 	blt	r2,r4,2661c <__ulp+0x54>
   26614:	00800044 	movi	r2,1
   26618:	10ca983a 	sll	r5,r2,r3
   2661c:	000f883a 	mov	r7,zero
   26620:	280d883a 	mov	r6,r5
   26624:	3807883a 	mov	r3,r7
   26628:	3005883a 	mov	r2,r6
   2662c:	f800283a 	ret
   26630:	00800234 	movhi	r2,8
   26634:	10cfd83a 	sra	r7,r2,r3
   26638:	000d883a 	mov	r6,zero
   2663c:	3005883a 	mov	r2,r6
   26640:	3807883a 	mov	r3,r7
   26644:	f800283a 	ret

00026648 <__b2d>:
   26648:	20800417 	ldw	r2,16(r4)
   2664c:	defff904 	addi	sp,sp,-28
   26650:	dd000415 	stw	r20,16(sp)
   26654:	1085883a 	add	r2,r2,r2
   26658:	25000504 	addi	r20,r4,20
   2665c:	1085883a 	add	r2,r2,r2
   26660:	dc000015 	stw	r16,0(sp)
   26664:	a0a1883a 	add	r16,r20,r2
   26668:	dd400515 	stw	r21,20(sp)
   2666c:	857fff17 	ldw	r21,-4(r16)
   26670:	dc400115 	stw	r17,4(sp)
   26674:	dfc00615 	stw	ra,24(sp)
   26678:	a809883a 	mov	r4,r21
   2667c:	2823883a 	mov	r17,r5
   26680:	dcc00315 	stw	r19,12(sp)
   26684:	dc800215 	stw	r18,8(sp)
   26688:	00264340 	call	26434 <__hi0bits>
   2668c:	100b883a 	mov	r5,r2
   26690:	00800804 	movi	r2,32
   26694:	1145c83a 	sub	r2,r2,r5
   26698:	88800015 	stw	r2,0(r17)
   2669c:	00800284 	movi	r2,10
   266a0:	80ffff04 	addi	r3,r16,-4
   266a4:	11401416 	blt	r2,r5,266f8 <__b2d+0xb0>
   266a8:	008002c4 	movi	r2,11
   266ac:	1149c83a 	sub	r4,r2,r5
   266b0:	a0c02736 	bltu	r20,r3,26750 <__b2d+0x108>
   266b4:	000d883a 	mov	r6,zero
   266b8:	28800544 	addi	r2,r5,21
   266bc:	a906d83a 	srl	r3,r21,r4
   266c0:	a884983a 	sll	r2,r21,r2
   266c4:	1ccffc34 	orhi	r19,r3,16368
   266c8:	11a4b03a 	or	r18,r2,r6
   266cc:	9005883a 	mov	r2,r18
   266d0:	9807883a 	mov	r3,r19
   266d4:	dfc00617 	ldw	ra,24(sp)
   266d8:	dd400517 	ldw	r21,20(sp)
   266dc:	dd000417 	ldw	r20,16(sp)
   266e0:	dcc00317 	ldw	r19,12(sp)
   266e4:	dc800217 	ldw	r18,8(sp)
   266e8:	dc400117 	ldw	r17,4(sp)
   266ec:	dc000017 	ldw	r16,0(sp)
   266f0:	dec00704 	addi	sp,sp,28
   266f4:	f800283a 	ret
   266f8:	a0c00e36 	bltu	r20,r3,26734 <__b2d+0xec>
   266fc:	293ffd44 	addi	r4,r5,-11
   26700:	000d883a 	mov	r6,zero
   26704:	20000f26 	beq	r4,zero,26744 <__b2d+0xfc>
   26708:	00800804 	movi	r2,32
   2670c:	110bc83a 	sub	r5,r2,r4
   26710:	a0c01236 	bltu	r20,r3,2675c <__b2d+0x114>
   26714:	000f883a 	mov	r7,zero
   26718:	a904983a 	sll	r2,r21,r4
   2671c:	3146d83a 	srl	r3,r6,r5
   26720:	3108983a 	sll	r4,r6,r4
   26724:	108ffc34 	orhi	r2,r2,16368
   26728:	18a6b03a 	or	r19,r3,r2
   2672c:	3924b03a 	or	r18,r7,r4
   26730:	003fe606 	br	266cc <__b2d+0x84>
   26734:	293ffd44 	addi	r4,r5,-11
   26738:	81bffe17 	ldw	r6,-8(r16)
   2673c:	80fffe04 	addi	r3,r16,-8
   26740:	203ff11e 	bne	r4,zero,26708 <__b2d+0xc0>
   26744:	accffc34 	orhi	r19,r21,16368
   26748:	3025883a 	mov	r18,r6
   2674c:	003fdf06 	br	266cc <__b2d+0x84>
   26750:	18bfff17 	ldw	r2,-4(r3)
   26754:	110cd83a 	srl	r6,r2,r4
   26758:	003fd706 	br	266b8 <__b2d+0x70>
   2675c:	18bfff17 	ldw	r2,-4(r3)
   26760:	114ed83a 	srl	r7,r2,r5
   26764:	003fec06 	br	26718 <__b2d+0xd0>

00026768 <__ratio>:
   26768:	defff904 	addi	sp,sp,-28
   2676c:	dc400215 	stw	r17,8(sp)
   26770:	2823883a 	mov	r17,r5
   26774:	d80b883a 	mov	r5,sp
   26778:	dfc00615 	stw	ra,24(sp)
   2677c:	dd000515 	stw	r20,20(sp)
   26780:	dcc00415 	stw	r19,16(sp)
   26784:	dc800315 	stw	r18,12(sp)
   26788:	2025883a 	mov	r18,r4
   2678c:	00266480 	call	26648 <__b2d>
   26790:	8809883a 	mov	r4,r17
   26794:	d9400104 	addi	r5,sp,4
   26798:	1027883a 	mov	r19,r2
   2679c:	1829883a 	mov	r20,r3
   267a0:	00266480 	call	26648 <__b2d>
   267a4:	89000417 	ldw	r4,16(r17)
   267a8:	91c00417 	ldw	r7,16(r18)
   267ac:	d9800117 	ldw	r6,4(sp)
   267b0:	180b883a 	mov	r5,r3
   267b4:	390fc83a 	sub	r7,r7,r4
   267b8:	1009883a 	mov	r4,r2
   267bc:	d8800017 	ldw	r2,0(sp)
   267c0:	380e917a 	slli	r7,r7,5
   267c4:	2011883a 	mov	r8,r4
   267c8:	1185c83a 	sub	r2,r2,r6
   267cc:	11c5883a 	add	r2,r2,r7
   267d0:	1006953a 	slli	r3,r2,20
   267d4:	2813883a 	mov	r9,r5
   267d8:	00800d0e 	bge	zero,r2,26810 <__ratio+0xa8>
   267dc:	1d29883a 	add	r20,r3,r20
   267e0:	a00b883a 	mov	r5,r20
   267e4:	480f883a 	mov	r7,r9
   267e8:	9809883a 	mov	r4,r19
   267ec:	400d883a 	mov	r6,r8
   267f0:	00298240 	call	29824 <__divdf3>
   267f4:	dfc00617 	ldw	ra,24(sp)
   267f8:	dd000517 	ldw	r20,20(sp)
   267fc:	dcc00417 	ldw	r19,16(sp)
   26800:	dc800317 	ldw	r18,12(sp)
   26804:	dc400217 	ldw	r17,8(sp)
   26808:	dec00704 	addi	sp,sp,28
   2680c:	f800283a 	ret
   26810:	28d3c83a 	sub	r9,r5,r3
   26814:	003ff206 	br	267e0 <__ratio+0x78>

00026818 <_mprec_log10>:
   26818:	defffe04 	addi	sp,sp,-8
   2681c:	008005c4 	movi	r2,23
   26820:	dc000015 	stw	r16,0(sp)
   26824:	dfc00115 	stw	ra,4(sp)
   26828:	2021883a 	mov	r16,r4
   2682c:	11000c16 	blt	r2,r4,26860 <_mprec_log10+0x48>
   26830:	200490fa 	slli	r2,r4,3
   26834:	00c000f4 	movhi	r3,3
   26838:	18f5f504 	addi	r3,r3,-10284
   2683c:	10c5883a 	add	r2,r2,r3
   26840:	12400117 	ldw	r9,4(r2)
   26844:	12000017 	ldw	r8,0(r2)
   26848:	4807883a 	mov	r3,r9
   2684c:	4005883a 	mov	r2,r8
   26850:	dfc00117 	ldw	ra,4(sp)
   26854:	dc000017 	ldw	r16,0(sp)
   26858:	dec00204 	addi	sp,sp,8
   2685c:	f800283a 	ret
   26860:	0011883a 	mov	r8,zero
   26864:	024ffc34 	movhi	r9,16368
   26868:	0005883a 	mov	r2,zero
   2686c:	00d00934 	movhi	r3,16420
   26870:	480b883a 	mov	r5,r9
   26874:	4009883a 	mov	r4,r8
   26878:	180f883a 	mov	r7,r3
   2687c:	100d883a 	mov	r6,r2
   26880:	00294600 	call	29460 <__muldf3>
   26884:	843fffc4 	addi	r16,r16,-1
   26888:	1011883a 	mov	r8,r2
   2688c:	1813883a 	mov	r9,r3
   26890:	803ff51e 	bne	r16,zero,26868 <_mprec_log10+0x50>
   26894:	4005883a 	mov	r2,r8
   26898:	4807883a 	mov	r3,r9
   2689c:	dfc00117 	ldw	ra,4(sp)
   268a0:	dc000017 	ldw	r16,0(sp)
   268a4:	dec00204 	addi	sp,sp,8
   268a8:	f800283a 	ret

000268ac <__copybits>:
   268ac:	297fffc4 	addi	r5,r5,-1
   268b0:	30800417 	ldw	r2,16(r6)
   268b4:	280bd17a 	srai	r5,r5,5
   268b8:	31800504 	addi	r6,r6,20
   268bc:	1085883a 	add	r2,r2,r2
   268c0:	294b883a 	add	r5,r5,r5
   268c4:	294b883a 	add	r5,r5,r5
   268c8:	1085883a 	add	r2,r2,r2
   268cc:	290b883a 	add	r5,r5,r4
   268d0:	3087883a 	add	r3,r6,r2
   268d4:	29400104 	addi	r5,r5,4
   268d8:	30c0052e 	bgeu	r6,r3,268f0 <__copybits+0x44>
   268dc:	30800017 	ldw	r2,0(r6)
   268e0:	31800104 	addi	r6,r6,4
   268e4:	20800015 	stw	r2,0(r4)
   268e8:	21000104 	addi	r4,r4,4
   268ec:	30fffb36 	bltu	r6,r3,268dc <__copybits+0x30>
   268f0:	2140032e 	bgeu	r4,r5,26900 <__copybits+0x54>
   268f4:	20000015 	stw	zero,0(r4)
   268f8:	21000104 	addi	r4,r4,4
   268fc:	217ffd36 	bltu	r4,r5,268f4 <__copybits+0x48>
   26900:	f800283a 	ret

00026904 <__any_on>:
   26904:	20800417 	ldw	r2,16(r4)
   26908:	2807d17a 	srai	r3,r5,5
   2690c:	21000504 	addi	r4,r4,20
   26910:	10c00d0e 	bge	r2,r3,26948 <__any_on+0x44>
   26914:	1085883a 	add	r2,r2,r2
   26918:	1085883a 	add	r2,r2,r2
   2691c:	208d883a 	add	r6,r4,r2
   26920:	2180182e 	bgeu	r4,r6,26984 <__any_on+0x80>
   26924:	30bfff17 	ldw	r2,-4(r6)
   26928:	30ffff04 	addi	r3,r6,-4
   2692c:	1000041e 	bne	r2,zero,26940 <__any_on+0x3c>
   26930:	20c0142e 	bgeu	r4,r3,26984 <__any_on+0x80>
   26934:	18ffff04 	addi	r3,r3,-4
   26938:	18800017 	ldw	r2,0(r3)
   2693c:	103ffc26 	beq	r2,zero,26930 <__any_on+0x2c>
   26940:	00800044 	movi	r2,1
   26944:	f800283a 	ret
   26948:	18800a0e 	bge	r3,r2,26974 <__any_on+0x70>
   2694c:	294007cc 	andi	r5,r5,31
   26950:	28000826 	beq	r5,zero,26974 <__any_on+0x70>
   26954:	18c5883a 	add	r2,r3,r3
   26958:	1085883a 	add	r2,r2,r2
   2695c:	208d883a 	add	r6,r4,r2
   26960:	30c00017 	ldw	r3,0(r6)
   26964:	1944d83a 	srl	r2,r3,r5
   26968:	1144983a 	sll	r2,r2,r5
   2696c:	18bff41e 	bne	r3,r2,26940 <__any_on+0x3c>
   26970:	003feb06 	br	26920 <__any_on+0x1c>
   26974:	18c5883a 	add	r2,r3,r3
   26978:	1085883a 	add	r2,r2,r2
   2697c:	208d883a 	add	r6,r4,r2
   26980:	003fe706 	br	26920 <__any_on+0x1c>
   26984:	0005883a 	mov	r2,zero
   26988:	f800283a 	ret

0002698c <_Balloc>:
   2698c:	20c01317 	ldw	r3,76(r4)
   26990:	defffb04 	addi	sp,sp,-20
   26994:	dcc00315 	stw	r19,12(sp)
   26998:	dc800215 	stw	r18,8(sp)
   2699c:	dfc00415 	stw	ra,16(sp)
   269a0:	2825883a 	mov	r18,r5
   269a4:	dc400115 	stw	r17,4(sp)
   269a8:	dc000015 	stw	r16,0(sp)
   269ac:	2027883a 	mov	r19,r4
   269b0:	01800404 	movi	r6,16
   269b4:	01400104 	movi	r5,4
   269b8:	18001726 	beq	r3,zero,26a18 <_Balloc+0x8c>
   269bc:	01400044 	movi	r5,1
   269c0:	9485883a 	add	r2,r18,r18
   269c4:	2ca2983a 	sll	r17,r5,r18
   269c8:	1085883a 	add	r2,r2,r2
   269cc:	10c7883a 	add	r3,r2,r3
   269d0:	1c000017 	ldw	r16,0(r3)
   269d4:	8c4d883a 	add	r6,r17,r17
   269d8:	318d883a 	add	r6,r6,r6
   269dc:	9809883a 	mov	r4,r19
   269e0:	31800504 	addi	r6,r6,20
   269e4:	80001226 	beq	r16,zero,26a30 <_Balloc+0xa4>
   269e8:	80800017 	ldw	r2,0(r16)
   269ec:	18800015 	stw	r2,0(r3)
   269f0:	80000415 	stw	zero,16(r16)
   269f4:	80000315 	stw	zero,12(r16)
   269f8:	8005883a 	mov	r2,r16
   269fc:	dfc00417 	ldw	ra,16(sp)
   26a00:	dcc00317 	ldw	r19,12(sp)
   26a04:	dc800217 	ldw	r18,8(sp)
   26a08:	dc400117 	ldw	r17,4(sp)
   26a0c:	dc000017 	ldw	r16,0(sp)
   26a10:	dec00504 	addi	sp,sp,20
   26a14:	f800283a 	ret
   26a18:	0027e600 	call	27e60 <_calloc_r>
   26a1c:	1007883a 	mov	r3,r2
   26a20:	0021883a 	mov	r16,zero
   26a24:	98801315 	stw	r2,76(r19)
   26a28:	103fe41e 	bne	r2,zero,269bc <_Balloc+0x30>
   26a2c:	003ff206 	br	269f8 <_Balloc+0x6c>
   26a30:	0027e600 	call	27e60 <_calloc_r>
   26a34:	103ff026 	beq	r2,zero,269f8 <_Balloc+0x6c>
   26a38:	1021883a 	mov	r16,r2
   26a3c:	14800115 	stw	r18,4(r2)
   26a40:	14400215 	stw	r17,8(r2)
   26a44:	003fea06 	br	269f0 <_Balloc+0x64>

00026a48 <__d2b>:
   26a48:	defff504 	addi	sp,sp,-44
   26a4c:	dcc00515 	stw	r19,20(sp)
   26a50:	04c00044 	movi	r19,1
   26a54:	dc000215 	stw	r16,8(sp)
   26a58:	2821883a 	mov	r16,r5
   26a5c:	980b883a 	mov	r5,r19
   26a60:	ddc00915 	stw	r23,36(sp)
   26a64:	dd800815 	stw	r22,32(sp)
   26a68:	dd400715 	stw	r21,28(sp)
   26a6c:	dd000615 	stw	r20,24(sp)
   26a70:	dc800415 	stw	r18,16(sp)
   26a74:	dc400315 	stw	r17,12(sp)
   26a78:	dfc00a15 	stw	ra,40(sp)
   26a7c:	3023883a 	mov	r17,r6
   26a80:	382d883a 	mov	r22,r7
   26a84:	ddc00b17 	ldw	r23,44(sp)
   26a88:	002698c0 	call	2698c <_Balloc>
   26a8c:	1025883a 	mov	r18,r2
   26a90:	00a00034 	movhi	r2,32768
   26a94:	10bfffc4 	addi	r2,r2,-1
   26a98:	8888703a 	and	r4,r17,r2
   26a9c:	202ad53a 	srli	r21,r4,20
   26aa0:	00800434 	movhi	r2,16
   26aa4:	10bfffc4 	addi	r2,r2,-1
   26aa8:	8886703a 	and	r3,r17,r2
   26aac:	a829003a 	cmpeq	r20,r21,zero
   26ab0:	800b883a 	mov	r5,r16
   26ab4:	d8c00115 	stw	r3,4(sp)
   26ab8:	94000504 	addi	r16,r18,20
   26abc:	a000021e 	bne	r20,zero,26ac8 <__d2b+0x80>
   26ac0:	18c00434 	orhi	r3,r3,16
   26ac4:	d8c00115 	stw	r3,4(sp)
   26ac8:	28002726 	beq	r5,zero,26b68 <__d2b+0x120>
   26acc:	d809883a 	mov	r4,sp
   26ad0:	d9400015 	stw	r5,0(sp)
   26ad4:	00264a40 	call	264a4 <__lo0bits>
   26ad8:	100d883a 	mov	r6,r2
   26adc:	10003526 	beq	r2,zero,26bb4 <__d2b+0x16c>
   26ae0:	d8c00117 	ldw	r3,4(sp)
   26ae4:	00800804 	movi	r2,32
   26ae8:	1185c83a 	sub	r2,r2,r6
   26aec:	d9000017 	ldw	r4,0(sp)
   26af0:	1886983a 	sll	r3,r3,r2
   26af4:	1906b03a 	or	r3,r3,r4
   26af8:	90c00515 	stw	r3,20(r18)
   26afc:	d8c00117 	ldw	r3,4(sp)
   26b00:	1986d83a 	srl	r3,r3,r6
   26b04:	d8c00115 	stw	r3,4(sp)
   26b08:	180b003a 	cmpeq	r5,r3,zero
   26b0c:	00800084 	movi	r2,2
   26b10:	114bc83a 	sub	r5,r2,r5
   26b14:	80c00115 	stw	r3,4(r16)
   26b18:	91400415 	stw	r5,16(r18)
   26b1c:	a0001a1e 	bne	r20,zero,26b88 <__d2b+0x140>
   26b20:	3545883a 	add	r2,r6,r21
   26b24:	10bef344 	addi	r2,r2,-1075
   26b28:	00c00d44 	movi	r3,53
   26b2c:	b0800015 	stw	r2,0(r22)
   26b30:	1987c83a 	sub	r3,r3,r6
   26b34:	b8c00015 	stw	r3,0(r23)
   26b38:	9005883a 	mov	r2,r18
   26b3c:	dfc00a17 	ldw	ra,40(sp)
   26b40:	ddc00917 	ldw	r23,36(sp)
   26b44:	dd800817 	ldw	r22,32(sp)
   26b48:	dd400717 	ldw	r21,28(sp)
   26b4c:	dd000617 	ldw	r20,24(sp)
   26b50:	dcc00517 	ldw	r19,20(sp)
   26b54:	dc800417 	ldw	r18,16(sp)
   26b58:	dc400317 	ldw	r17,12(sp)
   26b5c:	dc000217 	ldw	r16,8(sp)
   26b60:	dec00b04 	addi	sp,sp,44
   26b64:	f800283a 	ret
   26b68:	d9000104 	addi	r4,sp,4
   26b6c:	00264a40 	call	264a4 <__lo0bits>
   26b70:	11800804 	addi	r6,r2,32
   26b74:	d8800117 	ldw	r2,4(sp)
   26b78:	94c00415 	stw	r19,16(r18)
   26b7c:	980b883a 	mov	r5,r19
   26b80:	90800515 	stw	r2,20(r18)
   26b84:	a03fe626 	beq	r20,zero,26b20 <__d2b+0xd8>
   26b88:	2945883a 	add	r2,r5,r5
   26b8c:	1085883a 	add	r2,r2,r2
   26b90:	1405883a 	add	r2,r2,r16
   26b94:	113fff17 	ldw	r4,-4(r2)
   26b98:	30fef384 	addi	r3,r6,-1074
   26b9c:	2820917a 	slli	r16,r5,5
   26ba0:	b0c00015 	stw	r3,0(r22)
   26ba4:	00264340 	call	26434 <__hi0bits>
   26ba8:	80a1c83a 	sub	r16,r16,r2
   26bac:	bc000015 	stw	r16,0(r23)
   26bb0:	003fe106 	br	26b38 <__d2b+0xf0>
   26bb4:	d8800017 	ldw	r2,0(sp)
   26bb8:	90800515 	stw	r2,20(r18)
   26bbc:	d8c00117 	ldw	r3,4(sp)
   26bc0:	003fd106 	br	26b08 <__d2b+0xc0>

00026bc4 <__mdiff>:
   26bc4:	defffb04 	addi	sp,sp,-20
   26bc8:	dc000015 	stw	r16,0(sp)
   26bcc:	2821883a 	mov	r16,r5
   26bd0:	dc800215 	stw	r18,8(sp)
   26bd4:	300b883a 	mov	r5,r6
   26bd8:	2025883a 	mov	r18,r4
   26bdc:	8009883a 	mov	r4,r16
   26be0:	dc400115 	stw	r17,4(sp)
   26be4:	dfc00415 	stw	ra,16(sp)
   26be8:	dcc00315 	stw	r19,12(sp)
   26bec:	3023883a 	mov	r17,r6
   26bf0:	00265680 	call	26568 <__mcmp>
   26bf4:	10004226 	beq	r2,zero,26d00 <__mdiff+0x13c>
   26bf8:	10005016 	blt	r2,zero,26d3c <__mdiff+0x178>
   26bfc:	0027883a 	mov	r19,zero
   26c00:	81400117 	ldw	r5,4(r16)
   26c04:	9009883a 	mov	r4,r18
   26c08:	002698c0 	call	2698c <_Balloc>
   26c0c:	1019883a 	mov	r12,r2
   26c10:	82800417 	ldw	r10,16(r16)
   26c14:	88800417 	ldw	r2,16(r17)
   26c18:	81800504 	addi	r6,r16,20
   26c1c:	5287883a 	add	r3,r10,r10
   26c20:	1085883a 	add	r2,r2,r2
   26c24:	18c7883a 	add	r3,r3,r3
   26c28:	1085883a 	add	r2,r2,r2
   26c2c:	8a000504 	addi	r8,r17,20
   26c30:	64c00315 	stw	r19,12(r12)
   26c34:	30db883a 	add	r13,r6,r3
   26c38:	4097883a 	add	r11,r8,r2
   26c3c:	61c00504 	addi	r7,r12,20
   26c40:	0013883a 	mov	r9,zero
   26c44:	31000017 	ldw	r4,0(r6)
   26c48:	41400017 	ldw	r5,0(r8)
   26c4c:	42000104 	addi	r8,r8,4
   26c50:	20bfffcc 	andi	r2,r4,65535
   26c54:	28ffffcc 	andi	r3,r5,65535
   26c58:	10c5c83a 	sub	r2,r2,r3
   26c5c:	1245883a 	add	r2,r2,r9
   26c60:	2008d43a 	srli	r4,r4,16
   26c64:	280ad43a 	srli	r5,r5,16
   26c68:	1007d43a 	srai	r3,r2,16
   26c6c:	3880000d 	sth	r2,0(r7)
   26c70:	2149c83a 	sub	r4,r4,r5
   26c74:	20c9883a 	add	r4,r4,r3
   26c78:	3900008d 	sth	r4,2(r7)
   26c7c:	31800104 	addi	r6,r6,4
   26c80:	39c00104 	addi	r7,r7,4
   26c84:	2013d43a 	srai	r9,r4,16
   26c88:	42ffee36 	bltu	r8,r11,26c44 <__mdiff+0x80>
   26c8c:	33400c2e 	bgeu	r6,r13,26cc0 <__mdiff+0xfc>
   26c90:	30800017 	ldw	r2,0(r6)
   26c94:	31800104 	addi	r6,r6,4
   26c98:	10ffffcc 	andi	r3,r2,65535
   26c9c:	1a47883a 	add	r3,r3,r9
   26ca0:	1004d43a 	srli	r2,r2,16
   26ca4:	1809d43a 	srai	r4,r3,16
   26ca8:	38c0000d 	sth	r3,0(r7)
   26cac:	1105883a 	add	r2,r2,r4
   26cb0:	3880008d 	sth	r2,2(r7)
   26cb4:	1013d43a 	srai	r9,r2,16
   26cb8:	39c00104 	addi	r7,r7,4
   26cbc:	337ff436 	bltu	r6,r13,26c90 <__mdiff+0xcc>
   26cc0:	38bfff17 	ldw	r2,-4(r7)
   26cc4:	38ffff04 	addi	r3,r7,-4
   26cc8:	1000041e 	bne	r2,zero,26cdc <__mdiff+0x118>
   26ccc:	18ffff04 	addi	r3,r3,-4
   26cd0:	18800017 	ldw	r2,0(r3)
   26cd4:	52bfffc4 	addi	r10,r10,-1
   26cd8:	103ffc26 	beq	r2,zero,26ccc <__mdiff+0x108>
   26cdc:	6005883a 	mov	r2,r12
   26ce0:	62800415 	stw	r10,16(r12)
   26ce4:	dfc00417 	ldw	ra,16(sp)
   26ce8:	dcc00317 	ldw	r19,12(sp)
   26cec:	dc800217 	ldw	r18,8(sp)
   26cf0:	dc400117 	ldw	r17,4(sp)
   26cf4:	dc000017 	ldw	r16,0(sp)
   26cf8:	dec00504 	addi	sp,sp,20
   26cfc:	f800283a 	ret
   26d00:	9009883a 	mov	r4,r18
   26d04:	000b883a 	mov	r5,zero
   26d08:	002698c0 	call	2698c <_Balloc>
   26d0c:	1019883a 	mov	r12,r2
   26d10:	00800044 	movi	r2,1
   26d14:	60800415 	stw	r2,16(r12)
   26d18:	6005883a 	mov	r2,r12
   26d1c:	60000515 	stw	zero,20(r12)
   26d20:	dfc00417 	ldw	ra,16(sp)
   26d24:	dcc00317 	ldw	r19,12(sp)
   26d28:	dc800217 	ldw	r18,8(sp)
   26d2c:	dc400117 	ldw	r17,4(sp)
   26d30:	dc000017 	ldw	r16,0(sp)
   26d34:	dec00504 	addi	sp,sp,20
   26d38:	f800283a 	ret
   26d3c:	880d883a 	mov	r6,r17
   26d40:	04c00044 	movi	r19,1
   26d44:	8023883a 	mov	r17,r16
   26d48:	3021883a 	mov	r16,r6
   26d4c:	003fac06 	br	26c00 <__mdiff+0x3c>

00026d50 <__lshift>:
   26d50:	defff904 	addi	sp,sp,-28
   26d54:	28800417 	ldw	r2,16(r5)
   26d58:	dc000015 	stw	r16,0(sp)
   26d5c:	3021d17a 	srai	r16,r6,5
   26d60:	28c00217 	ldw	r3,8(r5)
   26d64:	10800044 	addi	r2,r2,1
   26d68:	dc400115 	stw	r17,4(sp)
   26d6c:	80a3883a 	add	r17,r16,r2
   26d70:	dd400515 	stw	r21,20(sp)
   26d74:	dd000415 	stw	r20,16(sp)
   26d78:	dc800215 	stw	r18,8(sp)
   26d7c:	dfc00615 	stw	ra,24(sp)
   26d80:	2825883a 	mov	r18,r5
   26d84:	dcc00315 	stw	r19,12(sp)
   26d88:	3029883a 	mov	r20,r6
   26d8c:	202b883a 	mov	r21,r4
   26d90:	29400117 	ldw	r5,4(r5)
   26d94:	1c40030e 	bge	r3,r17,26da4 <__lshift+0x54>
   26d98:	18c7883a 	add	r3,r3,r3
   26d9c:	29400044 	addi	r5,r5,1
   26da0:	1c7ffd16 	blt	r3,r17,26d98 <__lshift+0x48>
   26da4:	a809883a 	mov	r4,r21
   26da8:	002698c0 	call	2698c <_Balloc>
   26dac:	1027883a 	mov	r19,r2
   26db0:	11400504 	addi	r5,r2,20
   26db4:	0400090e 	bge	zero,r16,26ddc <__lshift+0x8c>
   26db8:	2805883a 	mov	r2,r5
   26dbc:	0007883a 	mov	r3,zero
   26dc0:	18c00044 	addi	r3,r3,1
   26dc4:	10000015 	stw	zero,0(r2)
   26dc8:	10800104 	addi	r2,r2,4
   26dcc:	80fffc1e 	bne	r16,r3,26dc0 <__lshift+0x70>
   26dd0:	8405883a 	add	r2,r16,r16
   26dd4:	1085883a 	add	r2,r2,r2
   26dd8:	288b883a 	add	r5,r5,r2
   26ddc:	90800417 	ldw	r2,16(r18)
   26de0:	91000504 	addi	r4,r18,20
   26de4:	a18007cc 	andi	r6,r20,31
   26de8:	1085883a 	add	r2,r2,r2
   26dec:	1085883a 	add	r2,r2,r2
   26df0:	208f883a 	add	r7,r4,r2
   26df4:	30001e26 	beq	r6,zero,26e70 <__lshift+0x120>
   26df8:	00800804 	movi	r2,32
   26dfc:	1191c83a 	sub	r8,r2,r6
   26e00:	0007883a 	mov	r3,zero
   26e04:	20800017 	ldw	r2,0(r4)
   26e08:	1184983a 	sll	r2,r2,r6
   26e0c:	1884b03a 	or	r2,r3,r2
   26e10:	28800015 	stw	r2,0(r5)
   26e14:	20c00017 	ldw	r3,0(r4)
   26e18:	21000104 	addi	r4,r4,4
   26e1c:	29400104 	addi	r5,r5,4
   26e20:	1a06d83a 	srl	r3,r3,r8
   26e24:	21fff736 	bltu	r4,r7,26e04 <__lshift+0xb4>
   26e28:	28c00015 	stw	r3,0(r5)
   26e2c:	18000126 	beq	r3,zero,26e34 <__lshift+0xe4>
   26e30:	8c400044 	addi	r17,r17,1
   26e34:	88bfffc4 	addi	r2,r17,-1
   26e38:	98800415 	stw	r2,16(r19)
   26e3c:	a809883a 	mov	r4,r21
   26e40:	900b883a 	mov	r5,r18
   26e44:	002640c0 	call	2640c <_Bfree>
   26e48:	9805883a 	mov	r2,r19
   26e4c:	dfc00617 	ldw	ra,24(sp)
   26e50:	dd400517 	ldw	r21,20(sp)
   26e54:	dd000417 	ldw	r20,16(sp)
   26e58:	dcc00317 	ldw	r19,12(sp)
   26e5c:	dc800217 	ldw	r18,8(sp)
   26e60:	dc400117 	ldw	r17,4(sp)
   26e64:	dc000017 	ldw	r16,0(sp)
   26e68:	dec00704 	addi	sp,sp,28
   26e6c:	f800283a 	ret
   26e70:	20800017 	ldw	r2,0(r4)
   26e74:	21000104 	addi	r4,r4,4
   26e78:	28800015 	stw	r2,0(r5)
   26e7c:	29400104 	addi	r5,r5,4
   26e80:	21ffec2e 	bgeu	r4,r7,26e34 <__lshift+0xe4>
   26e84:	20800017 	ldw	r2,0(r4)
   26e88:	21000104 	addi	r4,r4,4
   26e8c:	28800015 	stw	r2,0(r5)
   26e90:	29400104 	addi	r5,r5,4
   26e94:	21fff636 	bltu	r4,r7,26e70 <__lshift+0x120>
   26e98:	003fe606 	br	26e34 <__lshift+0xe4>

00026e9c <__multiply>:
   26e9c:	defff004 	addi	sp,sp,-64
   26ea0:	dc800815 	stw	r18,32(sp)
   26ea4:	dc400715 	stw	r17,28(sp)
   26ea8:	2c800417 	ldw	r18,16(r5)
   26eac:	34400417 	ldw	r17,16(r6)
   26eb0:	dcc00915 	stw	r19,36(sp)
   26eb4:	dc000615 	stw	r16,24(sp)
   26eb8:	dfc00f15 	stw	ra,60(sp)
   26ebc:	df000e15 	stw	fp,56(sp)
   26ec0:	ddc00d15 	stw	r23,52(sp)
   26ec4:	dd800c15 	stw	r22,48(sp)
   26ec8:	dd400b15 	stw	r21,44(sp)
   26ecc:	dd000a15 	stw	r20,40(sp)
   26ed0:	2821883a 	mov	r16,r5
   26ed4:	3027883a 	mov	r19,r6
   26ed8:	9440040e 	bge	r18,r17,26eec <__multiply+0x50>
   26edc:	8825883a 	mov	r18,r17
   26ee0:	2c400417 	ldw	r17,16(r5)
   26ee4:	2827883a 	mov	r19,r5
   26ee8:	3021883a 	mov	r16,r6
   26eec:	80800217 	ldw	r2,8(r16)
   26ef0:	9447883a 	add	r3,r18,r17
   26ef4:	d8c00415 	stw	r3,16(sp)
   26ef8:	81400117 	ldw	r5,4(r16)
   26efc:	10c0010e 	bge	r2,r3,26f04 <__multiply+0x68>
   26f00:	29400044 	addi	r5,r5,1
   26f04:	002698c0 	call	2698c <_Balloc>
   26f08:	d8800515 	stw	r2,20(sp)
   26f0c:	d9000417 	ldw	r4,16(sp)
   26f10:	d8c00517 	ldw	r3,20(sp)
   26f14:	2105883a 	add	r2,r4,r4
   26f18:	1085883a 	add	r2,r2,r2
   26f1c:	19000504 	addi	r4,r3,20
   26f20:	2085883a 	add	r2,r4,r2
   26f24:	d8800315 	stw	r2,12(sp)
   26f28:	2080052e 	bgeu	r4,r2,26f40 <__multiply+0xa4>
   26f2c:	2005883a 	mov	r2,r4
   26f30:	d8c00317 	ldw	r3,12(sp)
   26f34:	10000015 	stw	zero,0(r2)
   26f38:	10800104 	addi	r2,r2,4
   26f3c:	10fffc36 	bltu	r2,r3,26f30 <__multiply+0x94>
   26f40:	8c45883a 	add	r2,r17,r17
   26f44:	9487883a 	add	r3,r18,r18
   26f48:	9dc00504 	addi	r23,r19,20
   26f4c:	1085883a 	add	r2,r2,r2
   26f50:	84000504 	addi	r16,r16,20
   26f54:	18c7883a 	add	r3,r3,r3
   26f58:	b885883a 	add	r2,r23,r2
   26f5c:	dc000015 	stw	r16,0(sp)
   26f60:	d8800215 	stw	r2,8(sp)
   26f64:	80f9883a 	add	fp,r16,r3
   26f68:	b880432e 	bgeu	r23,r2,27078 <__multiply+0x1dc>
   26f6c:	d9000115 	stw	r4,4(sp)
   26f70:	b9000017 	ldw	r4,0(r23)
   26f74:	253fffcc 	andi	r20,r4,65535
   26f78:	a0001a26 	beq	r20,zero,26fe4 <__multiply+0x148>
   26f7c:	dcc00017 	ldw	r19,0(sp)
   26f80:	dc800117 	ldw	r18,4(sp)
   26f84:	002b883a 	mov	r21,zero
   26f88:	9c400017 	ldw	r17,0(r19)
   26f8c:	94000017 	ldw	r16,0(r18)
   26f90:	a009883a 	mov	r4,r20
   26f94:	897fffcc 	andi	r5,r17,65535
   26f98:	002a1d40 	call	2a1d4 <__mulsi3>
   26f9c:	880ad43a 	srli	r5,r17,16
   26fa0:	80ffffcc 	andi	r3,r16,65535
   26fa4:	a8c7883a 	add	r3,r21,r3
   26fa8:	a009883a 	mov	r4,r20
   26fac:	10e3883a 	add	r17,r2,r3
   26fb0:	8020d43a 	srli	r16,r16,16
   26fb4:	002a1d40 	call	2a1d4 <__mulsi3>
   26fb8:	8806d43a 	srli	r3,r17,16
   26fbc:	1405883a 	add	r2,r2,r16
   26fc0:	9cc00104 	addi	r19,r19,4
   26fc4:	1887883a 	add	r3,r3,r2
   26fc8:	90c0008d 	sth	r3,2(r18)
   26fcc:	9440000d 	sth	r17,0(r18)
   26fd0:	182ad43a 	srli	r21,r3,16
   26fd4:	94800104 	addi	r18,r18,4
   26fd8:	9f3feb36 	bltu	r19,fp,26f88 <__multiply+0xec>
   26fdc:	95400015 	stw	r21,0(r18)
   26fe0:	b9000017 	ldw	r4,0(r23)
   26fe4:	202ad43a 	srli	r21,r4,16
   26fe8:	a8001c26 	beq	r21,zero,2705c <__multiply+0x1c0>
   26fec:	d9000117 	ldw	r4,4(sp)
   26ff0:	dd000017 	ldw	r20,0(sp)
   26ff4:	002d883a 	mov	r22,zero
   26ff8:	24c00017 	ldw	r19,0(r4)
   26ffc:	2025883a 	mov	r18,r4
   27000:	9823883a 	mov	r17,r19
   27004:	a4000017 	ldw	r16,0(r20)
   27008:	a809883a 	mov	r4,r21
   2700c:	a5000104 	addi	r20,r20,4
   27010:	817fffcc 	andi	r5,r16,65535
   27014:	002a1d40 	call	2a1d4 <__mulsi3>
   27018:	8806d43a 	srli	r3,r17,16
   2701c:	800ad43a 	srli	r5,r16,16
   27020:	94c0000d 	sth	r19,0(r18)
   27024:	b0c7883a 	add	r3,r22,r3
   27028:	10e1883a 	add	r16,r2,r3
   2702c:	9400008d 	sth	r16,2(r18)
   27030:	a809883a 	mov	r4,r21
   27034:	94800104 	addi	r18,r18,4
   27038:	002a1d40 	call	2a1d4 <__mulsi3>
   2703c:	94400017 	ldw	r17,0(r18)
   27040:	8020d43a 	srli	r16,r16,16
   27044:	88ffffcc 	andi	r3,r17,65535
   27048:	10c5883a 	add	r2,r2,r3
   2704c:	80a7883a 	add	r19,r16,r2
   27050:	982cd43a 	srli	r22,r19,16
   27054:	a73feb36 	bltu	r20,fp,27004 <__multiply+0x168>
   27058:	94c00015 	stw	r19,0(r18)
   2705c:	d8800217 	ldw	r2,8(sp)
   27060:	bdc00104 	addi	r23,r23,4
   27064:	b880042e 	bgeu	r23,r2,27078 <__multiply+0x1dc>
   27068:	d8c00117 	ldw	r3,4(sp)
   2706c:	18c00104 	addi	r3,r3,4
   27070:	d8c00115 	stw	r3,4(sp)
   27074:	003fbe06 	br	26f70 <__multiply+0xd4>
   27078:	d9000417 	ldw	r4,16(sp)
   2707c:	01000c0e 	bge	zero,r4,270b0 <__multiply+0x214>
   27080:	d8c00317 	ldw	r3,12(sp)
   27084:	18bfff17 	ldw	r2,-4(r3)
   27088:	18ffff04 	addi	r3,r3,-4
   2708c:	10000326 	beq	r2,zero,2709c <__multiply+0x200>
   27090:	00000706 	br	270b0 <__multiply+0x214>
   27094:	18800017 	ldw	r2,0(r3)
   27098:	1000051e 	bne	r2,zero,270b0 <__multiply+0x214>
   2709c:	d9000417 	ldw	r4,16(sp)
   270a0:	18ffff04 	addi	r3,r3,-4
   270a4:	213fffc4 	addi	r4,r4,-1
   270a8:	d9000415 	stw	r4,16(sp)
   270ac:	203ff91e 	bne	r4,zero,27094 <__multiply+0x1f8>
   270b0:	d8800417 	ldw	r2,16(sp)
   270b4:	d8c00517 	ldw	r3,20(sp)
   270b8:	18800415 	stw	r2,16(r3)
   270bc:	1805883a 	mov	r2,r3
   270c0:	dfc00f17 	ldw	ra,60(sp)
   270c4:	df000e17 	ldw	fp,56(sp)
   270c8:	ddc00d17 	ldw	r23,52(sp)
   270cc:	dd800c17 	ldw	r22,48(sp)
   270d0:	dd400b17 	ldw	r21,44(sp)
   270d4:	dd000a17 	ldw	r20,40(sp)
   270d8:	dcc00917 	ldw	r19,36(sp)
   270dc:	dc800817 	ldw	r18,32(sp)
   270e0:	dc400717 	ldw	r17,28(sp)
   270e4:	dc000617 	ldw	r16,24(sp)
   270e8:	dec01004 	addi	sp,sp,64
   270ec:	f800283a 	ret

000270f0 <__i2b>:
   270f0:	defffd04 	addi	sp,sp,-12
   270f4:	dc000015 	stw	r16,0(sp)
   270f8:	04000044 	movi	r16,1
   270fc:	dc800115 	stw	r18,4(sp)
   27100:	2825883a 	mov	r18,r5
   27104:	800b883a 	mov	r5,r16
   27108:	dfc00215 	stw	ra,8(sp)
   2710c:	002698c0 	call	2698c <_Balloc>
   27110:	14000415 	stw	r16,16(r2)
   27114:	14800515 	stw	r18,20(r2)
   27118:	dfc00217 	ldw	ra,8(sp)
   2711c:	dc800117 	ldw	r18,4(sp)
   27120:	dc000017 	ldw	r16,0(sp)
   27124:	dec00304 	addi	sp,sp,12
   27128:	f800283a 	ret

0002712c <__multadd>:
   2712c:	defff604 	addi	sp,sp,-40
   27130:	dd800615 	stw	r22,24(sp)
   27134:	2d800417 	ldw	r22,16(r5)
   27138:	df000815 	stw	fp,32(sp)
   2713c:	ddc00715 	stw	r23,28(sp)
   27140:	dd400515 	stw	r21,20(sp)
   27144:	dd000415 	stw	r20,16(sp)
   27148:	dcc00315 	stw	r19,12(sp)
   2714c:	dc800215 	stw	r18,8(sp)
   27150:	dfc00915 	stw	ra,36(sp)
   27154:	dc400115 	stw	r17,4(sp)
   27158:	dc000015 	stw	r16,0(sp)
   2715c:	282f883a 	mov	r23,r5
   27160:	2039883a 	mov	fp,r4
   27164:	302b883a 	mov	r21,r6
   27168:	3829883a 	mov	r20,r7
   2716c:	2c800504 	addi	r18,r5,20
   27170:	0027883a 	mov	r19,zero
   27174:	94400017 	ldw	r17,0(r18)
   27178:	a80b883a 	mov	r5,r21
   2717c:	9cc00044 	addi	r19,r19,1
   27180:	893fffcc 	andi	r4,r17,65535
   27184:	002a1d40 	call	2a1d4 <__mulsi3>
   27188:	8808d43a 	srli	r4,r17,16
   2718c:	1521883a 	add	r16,r2,r20
   27190:	a80b883a 	mov	r5,r21
   27194:	002a1d40 	call	2a1d4 <__mulsi3>
   27198:	8008d43a 	srli	r4,r16,16
   2719c:	843fffcc 	andi	r16,r16,65535
   271a0:	1105883a 	add	r2,r2,r4
   271a4:	1006943a 	slli	r3,r2,16
   271a8:	1028d43a 	srli	r20,r2,16
   271ac:	1c07883a 	add	r3,r3,r16
   271b0:	90c00015 	stw	r3,0(r18)
   271b4:	94800104 	addi	r18,r18,4
   271b8:	9dbfee16 	blt	r19,r22,27174 <__multadd+0x48>
   271bc:	a0000826 	beq	r20,zero,271e0 <__multadd+0xb4>
   271c0:	b8800217 	ldw	r2,8(r23)
   271c4:	b080130e 	bge	r22,r2,27214 <__multadd+0xe8>
   271c8:	b585883a 	add	r2,r22,r22
   271cc:	1085883a 	add	r2,r2,r2
   271d0:	15c5883a 	add	r2,r2,r23
   271d4:	b0c00044 	addi	r3,r22,1
   271d8:	15000515 	stw	r20,20(r2)
   271dc:	b8c00415 	stw	r3,16(r23)
   271e0:	b805883a 	mov	r2,r23
   271e4:	dfc00917 	ldw	ra,36(sp)
   271e8:	df000817 	ldw	fp,32(sp)
   271ec:	ddc00717 	ldw	r23,28(sp)
   271f0:	dd800617 	ldw	r22,24(sp)
   271f4:	dd400517 	ldw	r21,20(sp)
   271f8:	dd000417 	ldw	r20,16(sp)
   271fc:	dcc00317 	ldw	r19,12(sp)
   27200:	dc800217 	ldw	r18,8(sp)
   27204:	dc400117 	ldw	r17,4(sp)
   27208:	dc000017 	ldw	r16,0(sp)
   2720c:	dec00a04 	addi	sp,sp,40
   27210:	f800283a 	ret
   27214:	b9400117 	ldw	r5,4(r23)
   27218:	e009883a 	mov	r4,fp
   2721c:	29400044 	addi	r5,r5,1
   27220:	002698c0 	call	2698c <_Balloc>
   27224:	b9800417 	ldw	r6,16(r23)
   27228:	b9400304 	addi	r5,r23,12
   2722c:	11000304 	addi	r4,r2,12
   27230:	318d883a 	add	r6,r6,r6
   27234:	318d883a 	add	r6,r6,r6
   27238:	31800204 	addi	r6,r6,8
   2723c:	1023883a 	mov	r17,r2
   27240:	00261f40 	call	261f4 <memcpy>
   27244:	b80b883a 	mov	r5,r23
   27248:	e009883a 	mov	r4,fp
   2724c:	002640c0 	call	2640c <_Bfree>
   27250:	882f883a 	mov	r23,r17
   27254:	003fdc06 	br	271c8 <__multadd+0x9c>

00027258 <__pow5mult>:
   27258:	defffa04 	addi	sp,sp,-24
   2725c:	308000cc 	andi	r2,r6,3
   27260:	dd000415 	stw	r20,16(sp)
   27264:	dcc00315 	stw	r19,12(sp)
   27268:	dc000015 	stw	r16,0(sp)
   2726c:	dfc00515 	stw	ra,20(sp)
   27270:	dc800215 	stw	r18,8(sp)
   27274:	dc400115 	stw	r17,4(sp)
   27278:	3021883a 	mov	r16,r6
   2727c:	2027883a 	mov	r19,r4
   27280:	2829883a 	mov	r20,r5
   27284:	10002b1e 	bne	r2,zero,27334 <__pow5mult+0xdc>
   27288:	8025d0ba 	srai	r18,r16,2
   2728c:	90001b26 	beq	r18,zero,272fc <__pow5mult+0xa4>
   27290:	9c001217 	ldw	r16,72(r19)
   27294:	8000081e 	bne	r16,zero,272b8 <__pow5mult+0x60>
   27298:	00003006 	br	2735c <__pow5mult+0x104>
   2729c:	800b883a 	mov	r5,r16
   272a0:	800d883a 	mov	r6,r16
   272a4:	9809883a 	mov	r4,r19
   272a8:	90001426 	beq	r18,zero,272fc <__pow5mult+0xa4>
   272ac:	80800017 	ldw	r2,0(r16)
   272b0:	10001b26 	beq	r2,zero,27320 <__pow5mult+0xc8>
   272b4:	1021883a 	mov	r16,r2
   272b8:	9080004c 	andi	r2,r18,1
   272bc:	1005003a 	cmpeq	r2,r2,zero
   272c0:	9025d07a 	srai	r18,r18,1
   272c4:	800d883a 	mov	r6,r16
   272c8:	9809883a 	mov	r4,r19
   272cc:	a00b883a 	mov	r5,r20
   272d0:	103ff21e 	bne	r2,zero,2729c <__pow5mult+0x44>
   272d4:	0026e9c0 	call	26e9c <__multiply>
   272d8:	a00b883a 	mov	r5,r20
   272dc:	9809883a 	mov	r4,r19
   272e0:	1023883a 	mov	r17,r2
   272e4:	002640c0 	call	2640c <_Bfree>
   272e8:	8829883a 	mov	r20,r17
   272ec:	800b883a 	mov	r5,r16
   272f0:	800d883a 	mov	r6,r16
   272f4:	9809883a 	mov	r4,r19
   272f8:	903fec1e 	bne	r18,zero,272ac <__pow5mult+0x54>
   272fc:	a005883a 	mov	r2,r20
   27300:	dfc00517 	ldw	ra,20(sp)
   27304:	dd000417 	ldw	r20,16(sp)
   27308:	dcc00317 	ldw	r19,12(sp)
   2730c:	dc800217 	ldw	r18,8(sp)
   27310:	dc400117 	ldw	r17,4(sp)
   27314:	dc000017 	ldw	r16,0(sp)
   27318:	dec00604 	addi	sp,sp,24
   2731c:	f800283a 	ret
   27320:	0026e9c0 	call	26e9c <__multiply>
   27324:	80800015 	stw	r2,0(r16)
   27328:	1021883a 	mov	r16,r2
   2732c:	10000015 	stw	zero,0(r2)
   27330:	003fe106 	br	272b8 <__pow5mult+0x60>
   27334:	1085883a 	add	r2,r2,r2
   27338:	00c000f4 	movhi	r3,3
   2733c:	18f63b04 	addi	r3,r3,-10004
   27340:	1085883a 	add	r2,r2,r2
   27344:	10c5883a 	add	r2,r2,r3
   27348:	11bfff17 	ldw	r6,-4(r2)
   2734c:	000f883a 	mov	r7,zero
   27350:	002712c0 	call	2712c <__multadd>
   27354:	1029883a 	mov	r20,r2
   27358:	003fcb06 	br	27288 <__pow5mult+0x30>
   2735c:	9809883a 	mov	r4,r19
   27360:	01409c44 	movi	r5,625
   27364:	00270f00 	call	270f0 <__i2b>
   27368:	98801215 	stw	r2,72(r19)
   2736c:	1021883a 	mov	r16,r2
   27370:	10000015 	stw	zero,0(r2)
   27374:	003fd006 	br	272b8 <__pow5mult+0x60>

00027378 <__s2b>:
   27378:	defff904 	addi	sp,sp,-28
   2737c:	dcc00315 	stw	r19,12(sp)
   27380:	dc800215 	stw	r18,8(sp)
   27384:	2827883a 	mov	r19,r5
   27388:	2025883a 	mov	r18,r4
   2738c:	01400244 	movi	r5,9
   27390:	39000204 	addi	r4,r7,8
   27394:	dd000415 	stw	r20,16(sp)
   27398:	dc400115 	stw	r17,4(sp)
   2739c:	dfc00615 	stw	ra,24(sp)
   273a0:	dd400515 	stw	r21,20(sp)
   273a4:	dc000015 	stw	r16,0(sp)
   273a8:	3829883a 	mov	r20,r7
   273ac:	3023883a 	mov	r17,r6
   273b0:	002a1040 	call	2a104 <__divsi3>
   273b4:	00c00044 	movi	r3,1
   273b8:	1880350e 	bge	r3,r2,27490 <__s2b+0x118>
   273bc:	000b883a 	mov	r5,zero
   273c0:	18c7883a 	add	r3,r3,r3
   273c4:	29400044 	addi	r5,r5,1
   273c8:	18bffd16 	blt	r3,r2,273c0 <__s2b+0x48>
   273cc:	9009883a 	mov	r4,r18
   273d0:	002698c0 	call	2698c <_Balloc>
   273d4:	1011883a 	mov	r8,r2
   273d8:	d8800717 	ldw	r2,28(sp)
   273dc:	00c00044 	movi	r3,1
   273e0:	01800244 	movi	r6,9
   273e4:	40800515 	stw	r2,20(r8)
   273e8:	40c00415 	stw	r3,16(r8)
   273ec:	3440260e 	bge	r6,r17,27488 <__s2b+0x110>
   273f0:	3021883a 	mov	r16,r6
   273f4:	99ab883a 	add	r21,r19,r6
   273f8:	9c05883a 	add	r2,r19,r16
   273fc:	11c00007 	ldb	r7,0(r2)
   27400:	400b883a 	mov	r5,r8
   27404:	9009883a 	mov	r4,r18
   27408:	39fff404 	addi	r7,r7,-48
   2740c:	01800284 	movi	r6,10
   27410:	002712c0 	call	2712c <__multadd>
   27414:	84000044 	addi	r16,r16,1
   27418:	1011883a 	mov	r8,r2
   2741c:	8c3ff61e 	bne	r17,r16,273f8 <__s2b+0x80>
   27420:	ac45883a 	add	r2,r21,r17
   27424:	117ffe04 	addi	r5,r2,-8
   27428:	880d883a 	mov	r6,r17
   2742c:	35000c0e 	bge	r6,r20,27460 <__s2b+0xe8>
   27430:	a185c83a 	sub	r2,r20,r6
   27434:	2821883a 	mov	r16,r5
   27438:	28a3883a 	add	r17,r5,r2
   2743c:	81c00007 	ldb	r7,0(r16)
   27440:	400b883a 	mov	r5,r8
   27444:	9009883a 	mov	r4,r18
   27448:	39fff404 	addi	r7,r7,-48
   2744c:	01800284 	movi	r6,10
   27450:	002712c0 	call	2712c <__multadd>
   27454:	84000044 	addi	r16,r16,1
   27458:	1011883a 	mov	r8,r2
   2745c:	847ff71e 	bne	r16,r17,2743c <__s2b+0xc4>
   27460:	4005883a 	mov	r2,r8
   27464:	dfc00617 	ldw	ra,24(sp)
   27468:	dd400517 	ldw	r21,20(sp)
   2746c:	dd000417 	ldw	r20,16(sp)
   27470:	dcc00317 	ldw	r19,12(sp)
   27474:	dc800217 	ldw	r18,8(sp)
   27478:	dc400117 	ldw	r17,4(sp)
   2747c:	dc000017 	ldw	r16,0(sp)
   27480:	dec00704 	addi	sp,sp,28
   27484:	f800283a 	ret
   27488:	99400284 	addi	r5,r19,10
   2748c:	003fe706 	br	2742c <__s2b+0xb4>
   27490:	000b883a 	mov	r5,zero
   27494:	003fcd06 	br	273cc <__s2b+0x54>

00027498 <_realloc_r>:
   27498:	defff404 	addi	sp,sp,-48
   2749c:	dd800815 	stw	r22,32(sp)
   274a0:	dc800415 	stw	r18,16(sp)
   274a4:	dc400315 	stw	r17,12(sp)
   274a8:	dfc00b15 	stw	ra,44(sp)
   274ac:	df000a15 	stw	fp,40(sp)
   274b0:	ddc00915 	stw	r23,36(sp)
   274b4:	dd400715 	stw	r21,28(sp)
   274b8:	dd000615 	stw	r20,24(sp)
   274bc:	dcc00515 	stw	r19,20(sp)
   274c0:	dc000215 	stw	r16,8(sp)
   274c4:	2825883a 	mov	r18,r5
   274c8:	3023883a 	mov	r17,r6
   274cc:	202d883a 	mov	r22,r4
   274d0:	2800c926 	beq	r5,zero,277f8 <_realloc_r+0x360>
   274d4:	002b2240 	call	2b224 <__malloc_lock>
   274d8:	943ffe04 	addi	r16,r18,-8
   274dc:	88c002c4 	addi	r3,r17,11
   274e0:	00800584 	movi	r2,22
   274e4:	82000117 	ldw	r8,4(r16)
   274e8:	10c01b2e 	bgeu	r2,r3,27558 <_realloc_r+0xc0>
   274ec:	00bffe04 	movi	r2,-8
   274f0:	188e703a 	and	r7,r3,r2
   274f4:	3839883a 	mov	fp,r7
   274f8:	38001a16 	blt	r7,zero,27564 <_realloc_r+0xcc>
   274fc:	e4401936 	bltu	fp,r17,27564 <_realloc_r+0xcc>
   27500:	013fff04 	movi	r4,-4
   27504:	4126703a 	and	r19,r8,r4
   27508:	99c02616 	blt	r19,r7,275a4 <_realloc_r+0x10c>
   2750c:	802b883a 	mov	r21,r16
   27510:	9829883a 	mov	r20,r19
   27514:	84000204 	addi	r16,r16,8
   27518:	a80f883a 	mov	r7,r21
   2751c:	a70dc83a 	sub	r6,r20,fp
   27520:	008003c4 	movi	r2,15
   27524:	1180c136 	bltu	r2,r6,2782c <_realloc_r+0x394>
   27528:	38800117 	ldw	r2,4(r7)
   2752c:	a549883a 	add	r4,r20,r21
   27530:	1080004c 	andi	r2,r2,1
   27534:	a084b03a 	or	r2,r20,r2
   27538:	38800115 	stw	r2,4(r7)
   2753c:	20c00117 	ldw	r3,4(r4)
   27540:	18c00054 	ori	r3,r3,1
   27544:	20c00115 	stw	r3,4(r4)
   27548:	b009883a 	mov	r4,r22
   2754c:	002b2440 	call	2b244 <__malloc_unlock>
   27550:	8023883a 	mov	r17,r16
   27554:	00000606 	br	27570 <_realloc_r+0xd8>
   27558:	01c00404 	movi	r7,16
   2755c:	3839883a 	mov	fp,r7
   27560:	e47fe72e 	bgeu	fp,r17,27500 <_realloc_r+0x68>
   27564:	00800304 	movi	r2,12
   27568:	0023883a 	mov	r17,zero
   2756c:	b0800015 	stw	r2,0(r22)
   27570:	8805883a 	mov	r2,r17
   27574:	dfc00b17 	ldw	ra,44(sp)
   27578:	df000a17 	ldw	fp,40(sp)
   2757c:	ddc00917 	ldw	r23,36(sp)
   27580:	dd800817 	ldw	r22,32(sp)
   27584:	dd400717 	ldw	r21,28(sp)
   27588:	dd000617 	ldw	r20,24(sp)
   2758c:	dcc00517 	ldw	r19,20(sp)
   27590:	dc800417 	ldw	r18,16(sp)
   27594:	dc400317 	ldw	r17,12(sp)
   27598:	dc000217 	ldw	r16,8(sp)
   2759c:	dec00c04 	addi	sp,sp,48
   275a0:	f800283a 	ret
   275a4:	008000f4 	movhi	r2,3
   275a8:	10b79704 	addi	r2,r2,-8612
   275ac:	12400217 	ldw	r9,8(r2)
   275b0:	84cd883a 	add	r6,r16,r19
   275b4:	802b883a 	mov	r21,r16
   275b8:	3240b926 	beq	r6,r9,278a0 <_realloc_r+0x408>
   275bc:	31400117 	ldw	r5,4(r6)
   275c0:	00bfff84 	movi	r2,-2
   275c4:	2884703a 	and	r2,r5,r2
   275c8:	1185883a 	add	r2,r2,r6
   275cc:	10c00117 	ldw	r3,4(r2)
   275d0:	18c0004c 	andi	r3,r3,1
   275d4:	1807003a 	cmpeq	r3,r3,zero
   275d8:	1800a326 	beq	r3,zero,27868 <_realloc_r+0x3d0>
   275dc:	2908703a 	and	r4,r5,r4
   275e0:	9929883a 	add	r20,r19,r4
   275e4:	a1c0a30e 	bge	r20,r7,27874 <_realloc_r+0x3dc>
   275e8:	4080004c 	andi	r2,r8,1
   275ec:	1000551e 	bne	r2,zero,27744 <_realloc_r+0x2ac>
   275f0:	80800017 	ldw	r2,0(r16)
   275f4:	80afc83a 	sub	r23,r16,r2
   275f8:	b8c00117 	ldw	r3,4(r23)
   275fc:	00bfff04 	movi	r2,-4
   27600:	1884703a 	and	r2,r3,r2
   27604:	30002e26 	beq	r6,zero,276c0 <_realloc_r+0x228>
   27608:	3240b926 	beq	r6,r9,278f0 <_realloc_r+0x458>
   2760c:	98a9883a 	add	r20,r19,r2
   27610:	2509883a 	add	r4,r4,r20
   27614:	d9000015 	stw	r4,0(sp)
   27618:	21c02a16 	blt	r4,r7,276c4 <_realloc_r+0x22c>
   2761c:	30800317 	ldw	r2,12(r6)
   27620:	30c00217 	ldw	r3,8(r6)
   27624:	01400904 	movi	r5,36
   27628:	99bfff04 	addi	r6,r19,-4
   2762c:	18800315 	stw	r2,12(r3)
   27630:	10c00215 	stw	r3,8(r2)
   27634:	b9000317 	ldw	r4,12(r23)
   27638:	b8800217 	ldw	r2,8(r23)
   2763c:	b82b883a 	mov	r21,r23
   27640:	bc000204 	addi	r16,r23,8
   27644:	20800215 	stw	r2,8(r4)
   27648:	11000315 	stw	r4,12(r2)
   2764c:	2980e436 	bltu	r5,r6,279e0 <_realloc_r+0x548>
   27650:	008004c4 	movi	r2,19
   27654:	9009883a 	mov	r4,r18
   27658:	8011883a 	mov	r8,r16
   2765c:	11800f2e 	bgeu	r2,r6,2769c <_realloc_r+0x204>
   27660:	90800017 	ldw	r2,0(r18)
   27664:	ba000404 	addi	r8,r23,16
   27668:	91000204 	addi	r4,r18,8
   2766c:	b8800215 	stw	r2,8(r23)
   27670:	90c00117 	ldw	r3,4(r18)
   27674:	008006c4 	movi	r2,27
   27678:	b8c00315 	stw	r3,12(r23)
   2767c:	1180072e 	bgeu	r2,r6,2769c <_realloc_r+0x204>
   27680:	90c00217 	ldw	r3,8(r18)
   27684:	ba000604 	addi	r8,r23,24
   27688:	91000404 	addi	r4,r18,16
   2768c:	b8c00415 	stw	r3,16(r23)
   27690:	90800317 	ldw	r2,12(r18)
   27694:	b8800515 	stw	r2,20(r23)
   27698:	3140e726 	beq	r6,r5,27a38 <_realloc_r+0x5a0>
   2769c:	20800017 	ldw	r2,0(r4)
   276a0:	dd000017 	ldw	r20,0(sp)
   276a4:	b80f883a 	mov	r7,r23
   276a8:	40800015 	stw	r2,0(r8)
   276ac:	20c00117 	ldw	r3,4(r4)
   276b0:	40c00115 	stw	r3,4(r8)
   276b4:	20800217 	ldw	r2,8(r4)
   276b8:	40800215 	stw	r2,8(r8)
   276bc:	003f9706 	br	2751c <_realloc_r+0x84>
   276c0:	98a9883a 	add	r20,r19,r2
   276c4:	a1c01f16 	blt	r20,r7,27744 <_realloc_r+0x2ac>
   276c8:	b8c00317 	ldw	r3,12(r23)
   276cc:	b8800217 	ldw	r2,8(r23)
   276d0:	99bfff04 	addi	r6,r19,-4
   276d4:	01400904 	movi	r5,36
   276d8:	b82b883a 	mov	r21,r23
   276dc:	18800215 	stw	r2,8(r3)
   276e0:	10c00315 	stw	r3,12(r2)
   276e4:	bc000204 	addi	r16,r23,8
   276e8:	2980c336 	bltu	r5,r6,279f8 <_realloc_r+0x560>
   276ec:	008004c4 	movi	r2,19
   276f0:	9009883a 	mov	r4,r18
   276f4:	8011883a 	mov	r8,r16
   276f8:	11800f2e 	bgeu	r2,r6,27738 <_realloc_r+0x2a0>
   276fc:	90800017 	ldw	r2,0(r18)
   27700:	ba000404 	addi	r8,r23,16
   27704:	91000204 	addi	r4,r18,8
   27708:	b8800215 	stw	r2,8(r23)
   2770c:	90c00117 	ldw	r3,4(r18)
   27710:	008006c4 	movi	r2,27
   27714:	b8c00315 	stw	r3,12(r23)
   27718:	1180072e 	bgeu	r2,r6,27738 <_realloc_r+0x2a0>
   2771c:	90c00217 	ldw	r3,8(r18)
   27720:	ba000604 	addi	r8,r23,24
   27724:	91000404 	addi	r4,r18,16
   27728:	b8c00415 	stw	r3,16(r23)
   2772c:	90800317 	ldw	r2,12(r18)
   27730:	b8800515 	stw	r2,20(r23)
   27734:	3140c726 	beq	r6,r5,27a54 <_realloc_r+0x5bc>
   27738:	20800017 	ldw	r2,0(r4)
   2773c:	b80f883a 	mov	r7,r23
   27740:	003fd906 	br	276a8 <_realloc_r+0x210>
   27744:	880b883a 	mov	r5,r17
   27748:	b009883a 	mov	r4,r22
   2774c:	00259d00 	call	259d0 <_malloc_r>
   27750:	1023883a 	mov	r17,r2
   27754:	10002526 	beq	r2,zero,277ec <_realloc_r+0x354>
   27758:	80800117 	ldw	r2,4(r16)
   2775c:	00ffff84 	movi	r3,-2
   27760:	893ffe04 	addi	r4,r17,-8
   27764:	10c4703a 	and	r2,r2,r3
   27768:	8085883a 	add	r2,r16,r2
   2776c:	20809526 	beq	r4,r2,279c4 <_realloc_r+0x52c>
   27770:	99bfff04 	addi	r6,r19,-4
   27774:	01c00904 	movi	r7,36
   27778:	39804536 	bltu	r7,r6,27890 <_realloc_r+0x3f8>
   2777c:	008004c4 	movi	r2,19
   27780:	9009883a 	mov	r4,r18
   27784:	880b883a 	mov	r5,r17
   27788:	11800f2e 	bgeu	r2,r6,277c8 <_realloc_r+0x330>
   2778c:	90800017 	ldw	r2,0(r18)
   27790:	89400204 	addi	r5,r17,8
   27794:	91000204 	addi	r4,r18,8
   27798:	88800015 	stw	r2,0(r17)
   2779c:	90c00117 	ldw	r3,4(r18)
   277a0:	008006c4 	movi	r2,27
   277a4:	88c00115 	stw	r3,4(r17)
   277a8:	1180072e 	bgeu	r2,r6,277c8 <_realloc_r+0x330>
   277ac:	90c00217 	ldw	r3,8(r18)
   277b0:	89400404 	addi	r5,r17,16
   277b4:	91000404 	addi	r4,r18,16
   277b8:	88c00215 	stw	r3,8(r17)
   277bc:	90800317 	ldw	r2,12(r18)
   277c0:	88800315 	stw	r2,12(r17)
   277c4:	31c09126 	beq	r6,r7,27a0c <_realloc_r+0x574>
   277c8:	20800017 	ldw	r2,0(r4)
   277cc:	28800015 	stw	r2,0(r5)
   277d0:	20c00117 	ldw	r3,4(r4)
   277d4:	28c00115 	stw	r3,4(r5)
   277d8:	20800217 	ldw	r2,8(r4)
   277dc:	28800215 	stw	r2,8(r5)
   277e0:	900b883a 	mov	r5,r18
   277e4:	b009883a 	mov	r4,r22
   277e8:	0024e480 	call	24e48 <_free_r>
   277ec:	b009883a 	mov	r4,r22
   277f0:	002b2440 	call	2b244 <__malloc_unlock>
   277f4:	003f5e06 	br	27570 <_realloc_r+0xd8>
   277f8:	300b883a 	mov	r5,r6
   277fc:	dfc00b17 	ldw	ra,44(sp)
   27800:	df000a17 	ldw	fp,40(sp)
   27804:	ddc00917 	ldw	r23,36(sp)
   27808:	dd800817 	ldw	r22,32(sp)
   2780c:	dd400717 	ldw	r21,28(sp)
   27810:	dd000617 	ldw	r20,24(sp)
   27814:	dcc00517 	ldw	r19,20(sp)
   27818:	dc800417 	ldw	r18,16(sp)
   2781c:	dc400317 	ldw	r17,12(sp)
   27820:	dc000217 	ldw	r16,8(sp)
   27824:	dec00c04 	addi	sp,sp,48
   27828:	00259d01 	jmpi	259d0 <_malloc_r>
   2782c:	38800117 	ldw	r2,4(r7)
   27830:	e54b883a 	add	r5,fp,r21
   27834:	31000054 	ori	r4,r6,1
   27838:	1080004c 	andi	r2,r2,1
   2783c:	1704b03a 	or	r2,r2,fp
   27840:	38800115 	stw	r2,4(r7)
   27844:	29000115 	stw	r4,4(r5)
   27848:	2987883a 	add	r3,r5,r6
   2784c:	18800117 	ldw	r2,4(r3)
   27850:	29400204 	addi	r5,r5,8
   27854:	b009883a 	mov	r4,r22
   27858:	10800054 	ori	r2,r2,1
   2785c:	18800115 	stw	r2,4(r3)
   27860:	0024e480 	call	24e48 <_free_r>
   27864:	003f3806 	br	27548 <_realloc_r+0xb0>
   27868:	000d883a 	mov	r6,zero
   2786c:	0009883a 	mov	r4,zero
   27870:	003f5d06 	br	275e8 <_realloc_r+0x150>
   27874:	30c00217 	ldw	r3,8(r6)
   27878:	30800317 	ldw	r2,12(r6)
   2787c:	800f883a 	mov	r7,r16
   27880:	84000204 	addi	r16,r16,8
   27884:	10c00215 	stw	r3,8(r2)
   27888:	18800315 	stw	r2,12(r3)
   2788c:	003f2306 	br	2751c <_realloc_r+0x84>
   27890:	8809883a 	mov	r4,r17
   27894:	900b883a 	mov	r5,r18
   27898:	00262940 	call	26294 <memmove>
   2789c:	003fd006 	br	277e0 <_realloc_r+0x348>
   278a0:	30800117 	ldw	r2,4(r6)
   278a4:	e0c00404 	addi	r3,fp,16
   278a8:	1108703a 	and	r4,r2,r4
   278ac:	9905883a 	add	r2,r19,r4
   278b0:	10ff4d16 	blt	r2,r3,275e8 <_realloc_r+0x150>
   278b4:	1705c83a 	sub	r2,r2,fp
   278b8:	870b883a 	add	r5,r16,fp
   278bc:	10800054 	ori	r2,r2,1
   278c0:	28800115 	stw	r2,4(r5)
   278c4:	80c00117 	ldw	r3,4(r16)
   278c8:	008000f4 	movhi	r2,3
   278cc:	10b79704 	addi	r2,r2,-8612
   278d0:	b009883a 	mov	r4,r22
   278d4:	18c0004c 	andi	r3,r3,1
   278d8:	e0c6b03a 	or	r3,fp,r3
   278dc:	11400215 	stw	r5,8(r2)
   278e0:	80c00115 	stw	r3,4(r16)
   278e4:	002b2440 	call	2b244 <__malloc_unlock>
   278e8:	84400204 	addi	r17,r16,8
   278ec:	003f2006 	br	27570 <_realloc_r+0xd8>
   278f0:	98a9883a 	add	r20,r19,r2
   278f4:	2509883a 	add	r4,r4,r20
   278f8:	e0800404 	addi	r2,fp,16
   278fc:	d9000115 	stw	r4,4(sp)
   27900:	20bf7016 	blt	r4,r2,276c4 <_realloc_r+0x22c>
   27904:	b8c00317 	ldw	r3,12(r23)
   27908:	b8800217 	ldw	r2,8(r23)
   2790c:	99bfff04 	addi	r6,r19,-4
   27910:	01400904 	movi	r5,36
   27914:	18800215 	stw	r2,8(r3)
   27918:	10c00315 	stw	r3,12(r2)
   2791c:	bc400204 	addi	r17,r23,8
   27920:	29804136 	bltu	r5,r6,27a28 <_realloc_r+0x590>
   27924:	008004c4 	movi	r2,19
   27928:	9009883a 	mov	r4,r18
   2792c:	880f883a 	mov	r7,r17
   27930:	11800f2e 	bgeu	r2,r6,27970 <_realloc_r+0x4d8>
   27934:	90800017 	ldw	r2,0(r18)
   27938:	b9c00404 	addi	r7,r23,16
   2793c:	91000204 	addi	r4,r18,8
   27940:	b8800215 	stw	r2,8(r23)
   27944:	90c00117 	ldw	r3,4(r18)
   27948:	008006c4 	movi	r2,27
   2794c:	b8c00315 	stw	r3,12(r23)
   27950:	1180072e 	bgeu	r2,r6,27970 <_realloc_r+0x4d8>
   27954:	90c00217 	ldw	r3,8(r18)
   27958:	b9c00604 	addi	r7,r23,24
   2795c:	91000404 	addi	r4,r18,16
   27960:	b8c00415 	stw	r3,16(r23)
   27964:	90800317 	ldw	r2,12(r18)
   27968:	b8800515 	stw	r2,20(r23)
   2796c:	31404026 	beq	r6,r5,27a70 <_realloc_r+0x5d8>
   27970:	20800017 	ldw	r2,0(r4)
   27974:	38800015 	stw	r2,0(r7)
   27978:	20c00117 	ldw	r3,4(r4)
   2797c:	38c00115 	stw	r3,4(r7)
   27980:	20800217 	ldw	r2,8(r4)
   27984:	38800215 	stw	r2,8(r7)
   27988:	d8c00117 	ldw	r3,4(sp)
   2798c:	bf0b883a 	add	r5,r23,fp
   27990:	b009883a 	mov	r4,r22
   27994:	1f05c83a 	sub	r2,r3,fp
   27998:	10800054 	ori	r2,r2,1
   2799c:	28800115 	stw	r2,4(r5)
   279a0:	b8c00117 	ldw	r3,4(r23)
   279a4:	008000f4 	movhi	r2,3
   279a8:	10b79704 	addi	r2,r2,-8612
   279ac:	11400215 	stw	r5,8(r2)
   279b0:	18c0004c 	andi	r3,r3,1
   279b4:	e0c6b03a 	or	r3,fp,r3
   279b8:	b8c00115 	stw	r3,4(r23)
   279bc:	002b2440 	call	2b244 <__malloc_unlock>
   279c0:	003eeb06 	br	27570 <_realloc_r+0xd8>
   279c4:	20800117 	ldw	r2,4(r4)
   279c8:	00ffff04 	movi	r3,-4
   279cc:	800f883a 	mov	r7,r16
   279d0:	10c4703a 	and	r2,r2,r3
   279d4:	98a9883a 	add	r20,r19,r2
   279d8:	84000204 	addi	r16,r16,8
   279dc:	003ecf06 	br	2751c <_realloc_r+0x84>
   279e0:	900b883a 	mov	r5,r18
   279e4:	8009883a 	mov	r4,r16
   279e8:	00262940 	call	26294 <memmove>
   279ec:	dd000017 	ldw	r20,0(sp)
   279f0:	b80f883a 	mov	r7,r23
   279f4:	003ec906 	br	2751c <_realloc_r+0x84>
   279f8:	900b883a 	mov	r5,r18
   279fc:	8009883a 	mov	r4,r16
   27a00:	00262940 	call	26294 <memmove>
   27a04:	b80f883a 	mov	r7,r23
   27a08:	003ec406 	br	2751c <_realloc_r+0x84>
   27a0c:	90c00417 	ldw	r3,16(r18)
   27a10:	89400604 	addi	r5,r17,24
   27a14:	91000604 	addi	r4,r18,24
   27a18:	88c00415 	stw	r3,16(r17)
   27a1c:	90800517 	ldw	r2,20(r18)
   27a20:	88800515 	stw	r2,20(r17)
   27a24:	003f6806 	br	277c8 <_realloc_r+0x330>
   27a28:	900b883a 	mov	r5,r18
   27a2c:	8809883a 	mov	r4,r17
   27a30:	00262940 	call	26294 <memmove>
   27a34:	003fd406 	br	27988 <_realloc_r+0x4f0>
   27a38:	90c00417 	ldw	r3,16(r18)
   27a3c:	91000604 	addi	r4,r18,24
   27a40:	ba000804 	addi	r8,r23,32
   27a44:	b8c00615 	stw	r3,24(r23)
   27a48:	90800517 	ldw	r2,20(r18)
   27a4c:	b8800715 	stw	r2,28(r23)
   27a50:	003f1206 	br	2769c <_realloc_r+0x204>
   27a54:	90c00417 	ldw	r3,16(r18)
   27a58:	91000604 	addi	r4,r18,24
   27a5c:	ba000804 	addi	r8,r23,32
   27a60:	b8c00615 	stw	r3,24(r23)
   27a64:	90800517 	ldw	r2,20(r18)
   27a68:	b8800715 	stw	r2,28(r23)
   27a6c:	003f3206 	br	27738 <_realloc_r+0x2a0>
   27a70:	90c00417 	ldw	r3,16(r18)
   27a74:	91000604 	addi	r4,r18,24
   27a78:	b9c00804 	addi	r7,r23,32
   27a7c:	b8c00615 	stw	r3,24(r23)
   27a80:	90800517 	ldw	r2,20(r18)
   27a84:	b8800715 	stw	r2,28(r23)
   27a88:	003fb906 	br	27970 <_realloc_r+0x4d8>

00027a8c <__isinfd>:
   27a8c:	200d883a 	mov	r6,r4
   27a90:	0109c83a 	sub	r4,zero,r4
   27a94:	2188b03a 	or	r4,r4,r6
   27a98:	2008d7fa 	srli	r4,r4,31
   27a9c:	00a00034 	movhi	r2,32768
   27aa0:	10bfffc4 	addi	r2,r2,-1
   27aa4:	1144703a 	and	r2,r2,r5
   27aa8:	2088b03a 	or	r4,r4,r2
   27aac:	009ffc34 	movhi	r2,32752
   27ab0:	1105c83a 	sub	r2,r2,r4
   27ab4:	0087c83a 	sub	r3,zero,r2
   27ab8:	10c4b03a 	or	r2,r2,r3
   27abc:	1004d7fa 	srli	r2,r2,31
   27ac0:	00c00044 	movi	r3,1
   27ac4:	1885c83a 	sub	r2,r3,r2
   27ac8:	f800283a 	ret

00027acc <__isnand>:
   27acc:	200d883a 	mov	r6,r4
   27ad0:	0109c83a 	sub	r4,zero,r4
   27ad4:	2188b03a 	or	r4,r4,r6
   27ad8:	2008d7fa 	srli	r4,r4,31
   27adc:	00a00034 	movhi	r2,32768
   27ae0:	10bfffc4 	addi	r2,r2,-1
   27ae4:	1144703a 	and	r2,r2,r5
   27ae8:	2088b03a 	or	r4,r4,r2
   27aec:	009ffc34 	movhi	r2,32752
   27af0:	1105c83a 	sub	r2,r2,r4
   27af4:	1004d7fa 	srli	r2,r2,31
   27af8:	f800283a 	ret

00027afc <_sbrk_r>:
   27afc:	defffd04 	addi	sp,sp,-12
   27b00:	dc000015 	stw	r16,0(sp)
   27b04:	040000f4 	movhi	r16,3
   27b08:	8403cd04 	addi	r16,r16,3892
   27b0c:	dc400115 	stw	r17,4(sp)
   27b10:	80000015 	stw	zero,0(r16)
   27b14:	2023883a 	mov	r17,r4
   27b18:	2809883a 	mov	r4,r5
   27b1c:	dfc00215 	stw	ra,8(sp)
   27b20:	002b4600 	call	2b460 <sbrk>
   27b24:	1007883a 	mov	r3,r2
   27b28:	00bfffc4 	movi	r2,-1
   27b2c:	18800626 	beq	r3,r2,27b48 <_sbrk_r+0x4c>
   27b30:	1805883a 	mov	r2,r3
   27b34:	dfc00217 	ldw	ra,8(sp)
   27b38:	dc400117 	ldw	r17,4(sp)
   27b3c:	dc000017 	ldw	r16,0(sp)
   27b40:	dec00304 	addi	sp,sp,12
   27b44:	f800283a 	ret
   27b48:	80800017 	ldw	r2,0(r16)
   27b4c:	103ff826 	beq	r2,zero,27b30 <_sbrk_r+0x34>
   27b50:	88800015 	stw	r2,0(r17)
   27b54:	1805883a 	mov	r2,r3
   27b58:	dfc00217 	ldw	ra,8(sp)
   27b5c:	dc400117 	ldw	r17,4(sp)
   27b60:	dc000017 	ldw	r16,0(sp)
   27b64:	dec00304 	addi	sp,sp,12
   27b68:	f800283a 	ret

00027b6c <__sclose>:
   27b6c:	2940038f 	ldh	r5,14(r5)
   27b70:	0027f281 	jmpi	27f28 <_close_r>

00027b74 <__sseek>:
   27b74:	defffe04 	addi	sp,sp,-8
   27b78:	dc000015 	stw	r16,0(sp)
   27b7c:	2821883a 	mov	r16,r5
   27b80:	2940038f 	ldh	r5,14(r5)
   27b84:	dfc00115 	stw	ra,4(sp)
   27b88:	00281a00 	call	281a0 <_lseek_r>
   27b8c:	1007883a 	mov	r3,r2
   27b90:	00bfffc4 	movi	r2,-1
   27b94:	18800926 	beq	r3,r2,27bbc <__sseek+0x48>
   27b98:	8080030b 	ldhu	r2,12(r16)
   27b9c:	80c01415 	stw	r3,80(r16)
   27ba0:	10840014 	ori	r2,r2,4096
   27ba4:	8080030d 	sth	r2,12(r16)
   27ba8:	1805883a 	mov	r2,r3
   27bac:	dfc00117 	ldw	ra,4(sp)
   27bb0:	dc000017 	ldw	r16,0(sp)
   27bb4:	dec00204 	addi	sp,sp,8
   27bb8:	f800283a 	ret
   27bbc:	8080030b 	ldhu	r2,12(r16)
   27bc0:	10bbffcc 	andi	r2,r2,61439
   27bc4:	8080030d 	sth	r2,12(r16)
   27bc8:	1805883a 	mov	r2,r3
   27bcc:	dfc00117 	ldw	ra,4(sp)
   27bd0:	dc000017 	ldw	r16,0(sp)
   27bd4:	dec00204 	addi	sp,sp,8
   27bd8:	f800283a 	ret

00027bdc <__swrite>:
   27bdc:	2880030b 	ldhu	r2,12(r5)
   27be0:	defffb04 	addi	sp,sp,-20
   27be4:	dcc00315 	stw	r19,12(sp)
   27be8:	1080400c 	andi	r2,r2,256
   27bec:	dc800215 	stw	r18,8(sp)
   27bf0:	dc400115 	stw	r17,4(sp)
   27bf4:	dc000015 	stw	r16,0(sp)
   27bf8:	3027883a 	mov	r19,r6
   27bfc:	3825883a 	mov	r18,r7
   27c00:	dfc00415 	stw	ra,16(sp)
   27c04:	2821883a 	mov	r16,r5
   27c08:	000d883a 	mov	r6,zero
   27c0c:	01c00084 	movi	r7,2
   27c10:	2023883a 	mov	r17,r4
   27c14:	10000226 	beq	r2,zero,27c20 <__swrite+0x44>
   27c18:	2940038f 	ldh	r5,14(r5)
   27c1c:	00281a00 	call	281a0 <_lseek_r>
   27c20:	8080030b 	ldhu	r2,12(r16)
   27c24:	8140038f 	ldh	r5,14(r16)
   27c28:	8809883a 	mov	r4,r17
   27c2c:	10bbffcc 	andi	r2,r2,61439
   27c30:	980d883a 	mov	r6,r19
   27c34:	900f883a 	mov	r7,r18
   27c38:	8080030d 	sth	r2,12(r16)
   27c3c:	dfc00417 	ldw	ra,16(sp)
   27c40:	dcc00317 	ldw	r19,12(sp)
   27c44:	dc800217 	ldw	r18,8(sp)
   27c48:	dc400117 	ldw	r17,4(sp)
   27c4c:	dc000017 	ldw	r16,0(sp)
   27c50:	dec00504 	addi	sp,sp,20
   27c54:	0027de81 	jmpi	27de8 <_write_r>

00027c58 <__sread>:
   27c58:	defffe04 	addi	sp,sp,-8
   27c5c:	dc000015 	stw	r16,0(sp)
   27c60:	2821883a 	mov	r16,r5
   27c64:	2940038f 	ldh	r5,14(r5)
   27c68:	dfc00115 	stw	ra,4(sp)
   27c6c:	00282180 	call	28218 <_read_r>
   27c70:	1007883a 	mov	r3,r2
   27c74:	10000816 	blt	r2,zero,27c98 <__sread+0x40>
   27c78:	80801417 	ldw	r2,80(r16)
   27c7c:	10c5883a 	add	r2,r2,r3
   27c80:	80801415 	stw	r2,80(r16)
   27c84:	1805883a 	mov	r2,r3
   27c88:	dfc00117 	ldw	ra,4(sp)
   27c8c:	dc000017 	ldw	r16,0(sp)
   27c90:	dec00204 	addi	sp,sp,8
   27c94:	f800283a 	ret
   27c98:	8080030b 	ldhu	r2,12(r16)
   27c9c:	10bbffcc 	andi	r2,r2,61439
   27ca0:	8080030d 	sth	r2,12(r16)
   27ca4:	1805883a 	mov	r2,r3
   27ca8:	dfc00117 	ldw	ra,4(sp)
   27cac:	dc000017 	ldw	r16,0(sp)
   27cb0:	dec00204 	addi	sp,sp,8
   27cb4:	f800283a 	ret

00027cb8 <strcmp>:
   27cb8:	2144b03a 	or	r2,r4,r5
   27cbc:	108000cc 	andi	r2,r2,3
   27cc0:	10001d1e 	bne	r2,zero,27d38 <strcmp+0x80>
   27cc4:	200f883a 	mov	r7,r4
   27cc8:	28800017 	ldw	r2,0(r5)
   27ccc:	21000017 	ldw	r4,0(r4)
   27cd0:	280d883a 	mov	r6,r5
   27cd4:	2080161e 	bne	r4,r2,27d30 <strcmp+0x78>
   27cd8:	023fbff4 	movhi	r8,65279
   27cdc:	423fbfc4 	addi	r8,r8,-257
   27ce0:	2207883a 	add	r3,r4,r8
   27ce4:	01602074 	movhi	r5,32897
   27ce8:	29602004 	addi	r5,r5,-32640
   27cec:	1946703a 	and	r3,r3,r5
   27cf0:	0104303a 	nor	r2,zero,r4
   27cf4:	10c4703a 	and	r2,r2,r3
   27cf8:	10001c1e 	bne	r2,zero,27d6c <strcmp+0xb4>
   27cfc:	4013883a 	mov	r9,r8
   27d00:	2811883a 	mov	r8,r5
   27d04:	00000106 	br	27d0c <strcmp+0x54>
   27d08:	1800181e 	bne	r3,zero,27d6c <strcmp+0xb4>
   27d0c:	39c00104 	addi	r7,r7,4
   27d10:	39000017 	ldw	r4,0(r7)
   27d14:	31800104 	addi	r6,r6,4
   27d18:	31400017 	ldw	r5,0(r6)
   27d1c:	2245883a 	add	r2,r4,r9
   27d20:	1204703a 	and	r2,r2,r8
   27d24:	0106303a 	nor	r3,zero,r4
   27d28:	1886703a 	and	r3,r3,r2
   27d2c:	217ff626 	beq	r4,r5,27d08 <strcmp+0x50>
   27d30:	3809883a 	mov	r4,r7
   27d34:	300b883a 	mov	r5,r6
   27d38:	20c00007 	ldb	r3,0(r4)
   27d3c:	1800051e 	bne	r3,zero,27d54 <strcmp+0x9c>
   27d40:	00000606 	br	27d5c <strcmp+0xa4>
   27d44:	21000044 	addi	r4,r4,1
   27d48:	20c00007 	ldb	r3,0(r4)
   27d4c:	29400044 	addi	r5,r5,1
   27d50:	18000226 	beq	r3,zero,27d5c <strcmp+0xa4>
   27d54:	28800007 	ldb	r2,0(r5)
   27d58:	18bffa26 	beq	r3,r2,27d44 <strcmp+0x8c>
   27d5c:	20c00003 	ldbu	r3,0(r4)
   27d60:	28800003 	ldbu	r2,0(r5)
   27d64:	1885c83a 	sub	r2,r3,r2
   27d68:	f800283a 	ret
   27d6c:	0005883a 	mov	r2,zero
   27d70:	f800283a 	ret

00027d74 <strlen>:
   27d74:	208000cc 	andi	r2,r4,3
   27d78:	2011883a 	mov	r8,r4
   27d7c:	1000161e 	bne	r2,zero,27dd8 <strlen+0x64>
   27d80:	20c00017 	ldw	r3,0(r4)
   27d84:	017fbff4 	movhi	r5,65279
   27d88:	297fbfc4 	addi	r5,r5,-257
   27d8c:	01e02074 	movhi	r7,32897
   27d90:	39e02004 	addi	r7,r7,-32640
   27d94:	1945883a 	add	r2,r3,r5
   27d98:	11c4703a 	and	r2,r2,r7
   27d9c:	00c6303a 	nor	r3,zero,r3
   27da0:	1886703a 	and	r3,r3,r2
   27da4:	18000c1e 	bne	r3,zero,27dd8 <strlen+0x64>
   27da8:	280d883a 	mov	r6,r5
   27dac:	380b883a 	mov	r5,r7
   27db0:	21000104 	addi	r4,r4,4
   27db4:	20800017 	ldw	r2,0(r4)
   27db8:	1187883a 	add	r3,r2,r6
   27dbc:	1946703a 	and	r3,r3,r5
   27dc0:	0084303a 	nor	r2,zero,r2
   27dc4:	10c4703a 	and	r2,r2,r3
   27dc8:	103ff926 	beq	r2,zero,27db0 <strlen+0x3c>
   27dcc:	20800007 	ldb	r2,0(r4)
   27dd0:	10000326 	beq	r2,zero,27de0 <strlen+0x6c>
   27dd4:	21000044 	addi	r4,r4,1
   27dd8:	20800007 	ldb	r2,0(r4)
   27ddc:	103ffd1e 	bne	r2,zero,27dd4 <strlen+0x60>
   27de0:	2205c83a 	sub	r2,r4,r8
   27de4:	f800283a 	ret

00027de8 <_write_r>:
   27de8:	defffd04 	addi	sp,sp,-12
   27dec:	dc000015 	stw	r16,0(sp)
   27df0:	040000f4 	movhi	r16,3
   27df4:	8403cd04 	addi	r16,r16,3892
   27df8:	dc400115 	stw	r17,4(sp)
   27dfc:	80000015 	stw	zero,0(r16)
   27e00:	2023883a 	mov	r17,r4
   27e04:	2809883a 	mov	r4,r5
   27e08:	300b883a 	mov	r5,r6
   27e0c:	380d883a 	mov	r6,r7
   27e10:	dfc00215 	stw	ra,8(sp)
   27e14:	002b51c0 	call	2b51c <write>
   27e18:	1007883a 	mov	r3,r2
   27e1c:	00bfffc4 	movi	r2,-1
   27e20:	18800626 	beq	r3,r2,27e3c <_write_r+0x54>
   27e24:	1805883a 	mov	r2,r3
   27e28:	dfc00217 	ldw	ra,8(sp)
   27e2c:	dc400117 	ldw	r17,4(sp)
   27e30:	dc000017 	ldw	r16,0(sp)
   27e34:	dec00304 	addi	sp,sp,12
   27e38:	f800283a 	ret
   27e3c:	80800017 	ldw	r2,0(r16)
   27e40:	103ff826 	beq	r2,zero,27e24 <_write_r+0x3c>
   27e44:	88800015 	stw	r2,0(r17)
   27e48:	1805883a 	mov	r2,r3
   27e4c:	dfc00217 	ldw	ra,8(sp)
   27e50:	dc400117 	ldw	r17,4(sp)
   27e54:	dc000017 	ldw	r16,0(sp)
   27e58:	dec00304 	addi	sp,sp,12
   27e5c:	f800283a 	ret

00027e60 <_calloc_r>:
   27e60:	defffe04 	addi	sp,sp,-8
   27e64:	dc400015 	stw	r17,0(sp)
   27e68:	2023883a 	mov	r17,r4
   27e6c:	2809883a 	mov	r4,r5
   27e70:	300b883a 	mov	r5,r6
   27e74:	dfc00115 	stw	ra,4(sp)
   27e78:	002a1d40 	call	2a1d4 <__mulsi3>
   27e7c:	100b883a 	mov	r5,r2
   27e80:	8809883a 	mov	r4,r17
   27e84:	00259d00 	call	259d0 <_malloc_r>
   27e88:	1023883a 	mov	r17,r2
   27e8c:	01c00904 	movi	r7,36
   27e90:	10000d26 	beq	r2,zero,27ec8 <_calloc_r+0x68>
   27e94:	10ffff17 	ldw	r3,-4(r2)
   27e98:	1009883a 	mov	r4,r2
   27e9c:	00bfff04 	movi	r2,-4
   27ea0:	1886703a 	and	r3,r3,r2
   27ea4:	1887883a 	add	r3,r3,r2
   27ea8:	180d883a 	mov	r6,r3
   27eac:	000b883a 	mov	r5,zero
   27eb0:	38c01736 	bltu	r7,r3,27f10 <_calloc_r+0xb0>
   27eb4:	008004c4 	movi	r2,19
   27eb8:	10c00836 	bltu	r2,r3,27edc <_calloc_r+0x7c>
   27ebc:	20000215 	stw	zero,8(r4)
   27ec0:	20000015 	stw	zero,0(r4)
   27ec4:	20000115 	stw	zero,4(r4)
   27ec8:	8805883a 	mov	r2,r17
   27ecc:	dfc00117 	ldw	ra,4(sp)
   27ed0:	dc400017 	ldw	r17,0(sp)
   27ed4:	dec00204 	addi	sp,sp,8
   27ed8:	f800283a 	ret
   27edc:	008006c4 	movi	r2,27
   27ee0:	88000015 	stw	zero,0(r17)
   27ee4:	88000115 	stw	zero,4(r17)
   27ee8:	89000204 	addi	r4,r17,8
   27eec:	10fff32e 	bgeu	r2,r3,27ebc <_calloc_r+0x5c>
   27ef0:	88000215 	stw	zero,8(r17)
   27ef4:	88000315 	stw	zero,12(r17)
   27ef8:	89000404 	addi	r4,r17,16
   27efc:	19ffef1e 	bne	r3,r7,27ebc <_calloc_r+0x5c>
   27f00:	89000604 	addi	r4,r17,24
   27f04:	88000415 	stw	zero,16(r17)
   27f08:	88000515 	stw	zero,20(r17)
   27f0c:	003feb06 	br	27ebc <_calloc_r+0x5c>
   27f10:	00263740 	call	26374 <memset>
   27f14:	8805883a 	mov	r2,r17
   27f18:	dfc00117 	ldw	ra,4(sp)
   27f1c:	dc400017 	ldw	r17,0(sp)
   27f20:	dec00204 	addi	sp,sp,8
   27f24:	f800283a 	ret

00027f28 <_close_r>:
   27f28:	defffd04 	addi	sp,sp,-12
   27f2c:	dc000015 	stw	r16,0(sp)
   27f30:	040000f4 	movhi	r16,3
   27f34:	8403cd04 	addi	r16,r16,3892
   27f38:	dc400115 	stw	r17,4(sp)
   27f3c:	80000015 	stw	zero,0(r16)
   27f40:	2023883a 	mov	r17,r4
   27f44:	2809883a 	mov	r4,r5
   27f48:	dfc00215 	stw	ra,8(sp)
   27f4c:	002a8c40 	call	2a8c4 <close>
   27f50:	1007883a 	mov	r3,r2
   27f54:	00bfffc4 	movi	r2,-1
   27f58:	18800626 	beq	r3,r2,27f74 <_close_r+0x4c>
   27f5c:	1805883a 	mov	r2,r3
   27f60:	dfc00217 	ldw	ra,8(sp)
   27f64:	dc400117 	ldw	r17,4(sp)
   27f68:	dc000017 	ldw	r16,0(sp)
   27f6c:	dec00304 	addi	sp,sp,12
   27f70:	f800283a 	ret
   27f74:	80800017 	ldw	r2,0(r16)
   27f78:	103ff826 	beq	r2,zero,27f5c <_close_r+0x34>
   27f7c:	88800015 	stw	r2,0(r17)
   27f80:	1805883a 	mov	r2,r3
   27f84:	dfc00217 	ldw	ra,8(sp)
   27f88:	dc400117 	ldw	r17,4(sp)
   27f8c:	dc000017 	ldw	r16,0(sp)
   27f90:	dec00304 	addi	sp,sp,12
   27f94:	f800283a 	ret

00027f98 <_fclose_r>:
   27f98:	defffc04 	addi	sp,sp,-16
   27f9c:	dc400115 	stw	r17,4(sp)
   27fa0:	dc000015 	stw	r16,0(sp)
   27fa4:	dfc00315 	stw	ra,12(sp)
   27fa8:	dc800215 	stw	r18,8(sp)
   27fac:	2821883a 	mov	r16,r5
   27fb0:	2023883a 	mov	r17,r4
   27fb4:	28002926 	beq	r5,zero,2805c <_fclose_r+0xc4>
   27fb8:	0024a800 	call	24a80 <__sfp_lock_acquire>
   27fbc:	88000226 	beq	r17,zero,27fc8 <_fclose_r+0x30>
   27fc0:	88800e17 	ldw	r2,56(r17)
   27fc4:	10002d26 	beq	r2,zero,2807c <_fclose_r+0xe4>
   27fc8:	8080030f 	ldh	r2,12(r16)
   27fcc:	10002226 	beq	r2,zero,28058 <_fclose_r+0xc0>
   27fd0:	8809883a 	mov	r4,r17
   27fd4:	800b883a 	mov	r5,r16
   27fd8:	00247f80 	call	247f8 <_fflush_r>
   27fdc:	1025883a 	mov	r18,r2
   27fe0:	80800b17 	ldw	r2,44(r16)
   27fe4:	10000426 	beq	r2,zero,27ff8 <_fclose_r+0x60>
   27fe8:	81400717 	ldw	r5,28(r16)
   27fec:	8809883a 	mov	r4,r17
   27ff0:	103ee83a 	callr	r2
   27ff4:	10002a16 	blt	r2,zero,280a0 <_fclose_r+0x108>
   27ff8:	8080030b 	ldhu	r2,12(r16)
   27ffc:	1080200c 	andi	r2,r2,128
   28000:	1000231e 	bne	r2,zero,28090 <_fclose_r+0xf8>
   28004:	81400c17 	ldw	r5,48(r16)
   28008:	28000526 	beq	r5,zero,28020 <_fclose_r+0x88>
   2800c:	80801004 	addi	r2,r16,64
   28010:	28800226 	beq	r5,r2,2801c <_fclose_r+0x84>
   28014:	8809883a 	mov	r4,r17
   28018:	0024e480 	call	24e48 <_free_r>
   2801c:	80000c15 	stw	zero,48(r16)
   28020:	81401117 	ldw	r5,68(r16)
   28024:	28000326 	beq	r5,zero,28034 <_fclose_r+0x9c>
   28028:	8809883a 	mov	r4,r17
   2802c:	0024e480 	call	24e48 <_free_r>
   28030:	80001115 	stw	zero,68(r16)
   28034:	8000030d 	sth	zero,12(r16)
   28038:	0024a840 	call	24a84 <__sfp_lock_release>
   2803c:	9005883a 	mov	r2,r18
   28040:	dfc00317 	ldw	ra,12(sp)
   28044:	dc800217 	ldw	r18,8(sp)
   28048:	dc400117 	ldw	r17,4(sp)
   2804c:	dc000017 	ldw	r16,0(sp)
   28050:	dec00404 	addi	sp,sp,16
   28054:	f800283a 	ret
   28058:	0024a840 	call	24a84 <__sfp_lock_release>
   2805c:	0025883a 	mov	r18,zero
   28060:	9005883a 	mov	r2,r18
   28064:	dfc00317 	ldw	ra,12(sp)
   28068:	dc800217 	ldw	r18,8(sp)
   2806c:	dc400117 	ldw	r17,4(sp)
   28070:	dc000017 	ldw	r16,0(sp)
   28074:	dec00404 	addi	sp,sp,16
   28078:	f800283a 	ret
   2807c:	8809883a 	mov	r4,r17
   28080:	0024a900 	call	24a90 <__sinit>
   28084:	8080030f 	ldh	r2,12(r16)
   28088:	103fd11e 	bne	r2,zero,27fd0 <_fclose_r+0x38>
   2808c:	003ff206 	br	28058 <_fclose_r+0xc0>
   28090:	81400417 	ldw	r5,16(r16)
   28094:	8809883a 	mov	r4,r17
   28098:	0024e480 	call	24e48 <_free_r>
   2809c:	003fd906 	br	28004 <_fclose_r+0x6c>
   280a0:	04bfffc4 	movi	r18,-1
   280a4:	003fd406 	br	27ff8 <_fclose_r+0x60>

000280a8 <fclose>:
   280a8:	008000f4 	movhi	r2,3
   280ac:	10bd1d04 	addi	r2,r2,-2956
   280b0:	200b883a 	mov	r5,r4
   280b4:	11000017 	ldw	r4,0(r2)
   280b8:	0027f981 	jmpi	27f98 <_fclose_r>

000280bc <_fstat_r>:
   280bc:	defffd04 	addi	sp,sp,-12
   280c0:	dc000015 	stw	r16,0(sp)
   280c4:	040000f4 	movhi	r16,3
   280c8:	8403cd04 	addi	r16,r16,3892
   280cc:	dc400115 	stw	r17,4(sp)
   280d0:	80000015 	stw	zero,0(r16)
   280d4:	2023883a 	mov	r17,r4
   280d8:	2809883a 	mov	r4,r5
   280dc:	300b883a 	mov	r5,r6
   280e0:	dfc00215 	stw	ra,8(sp)
   280e4:	002aa500 	call	2aa50 <fstat>
   280e8:	1007883a 	mov	r3,r2
   280ec:	00bfffc4 	movi	r2,-1
   280f0:	18800626 	beq	r3,r2,2810c <_fstat_r+0x50>
   280f4:	1805883a 	mov	r2,r3
   280f8:	dfc00217 	ldw	ra,8(sp)
   280fc:	dc400117 	ldw	r17,4(sp)
   28100:	dc000017 	ldw	r16,0(sp)
   28104:	dec00304 	addi	sp,sp,12
   28108:	f800283a 	ret
   2810c:	80800017 	ldw	r2,0(r16)
   28110:	103ff826 	beq	r2,zero,280f4 <_fstat_r+0x38>
   28114:	88800015 	stw	r2,0(r17)
   28118:	1805883a 	mov	r2,r3
   2811c:	dfc00217 	ldw	ra,8(sp)
   28120:	dc400117 	ldw	r17,4(sp)
   28124:	dc000017 	ldw	r16,0(sp)
   28128:	dec00304 	addi	sp,sp,12
   2812c:	f800283a 	ret

00028130 <_isatty_r>:
   28130:	defffd04 	addi	sp,sp,-12
   28134:	dc000015 	stw	r16,0(sp)
   28138:	040000f4 	movhi	r16,3
   2813c:	8403cd04 	addi	r16,r16,3892
   28140:	dc400115 	stw	r17,4(sp)
   28144:	80000015 	stw	zero,0(r16)
   28148:	2023883a 	mov	r17,r4
   2814c:	2809883a 	mov	r4,r5
   28150:	dfc00215 	stw	ra,8(sp)
   28154:	002ae540 	call	2ae54 <isatty>
   28158:	1007883a 	mov	r3,r2
   2815c:	00bfffc4 	movi	r2,-1
   28160:	18800626 	beq	r3,r2,2817c <_isatty_r+0x4c>
   28164:	1805883a 	mov	r2,r3
   28168:	dfc00217 	ldw	ra,8(sp)
   2816c:	dc400117 	ldw	r17,4(sp)
   28170:	dc000017 	ldw	r16,0(sp)
   28174:	dec00304 	addi	sp,sp,12
   28178:	f800283a 	ret
   2817c:	80800017 	ldw	r2,0(r16)
   28180:	103ff826 	beq	r2,zero,28164 <_isatty_r+0x34>
   28184:	88800015 	stw	r2,0(r17)
   28188:	1805883a 	mov	r2,r3
   2818c:	dfc00217 	ldw	ra,8(sp)
   28190:	dc400117 	ldw	r17,4(sp)
   28194:	dc000017 	ldw	r16,0(sp)
   28198:	dec00304 	addi	sp,sp,12
   2819c:	f800283a 	ret

000281a0 <_lseek_r>:
   281a0:	defffd04 	addi	sp,sp,-12
   281a4:	dc000015 	stw	r16,0(sp)
   281a8:	040000f4 	movhi	r16,3
   281ac:	8403cd04 	addi	r16,r16,3892
   281b0:	dc400115 	stw	r17,4(sp)
   281b4:	80000015 	stw	zero,0(r16)
   281b8:	2023883a 	mov	r17,r4
   281bc:	2809883a 	mov	r4,r5
   281c0:	300b883a 	mov	r5,r6
   281c4:	380d883a 	mov	r6,r7
   281c8:	dfc00215 	stw	ra,8(sp)
   281cc:	002b0640 	call	2b064 <lseek>
   281d0:	1007883a 	mov	r3,r2
   281d4:	00bfffc4 	movi	r2,-1
   281d8:	18800626 	beq	r3,r2,281f4 <_lseek_r+0x54>
   281dc:	1805883a 	mov	r2,r3
   281e0:	dfc00217 	ldw	ra,8(sp)
   281e4:	dc400117 	ldw	r17,4(sp)
   281e8:	dc000017 	ldw	r16,0(sp)
   281ec:	dec00304 	addi	sp,sp,12
   281f0:	f800283a 	ret
   281f4:	80800017 	ldw	r2,0(r16)
   281f8:	103ff826 	beq	r2,zero,281dc <_lseek_r+0x3c>
   281fc:	88800015 	stw	r2,0(r17)
   28200:	1805883a 	mov	r2,r3
   28204:	dfc00217 	ldw	ra,8(sp)
   28208:	dc400117 	ldw	r17,4(sp)
   2820c:	dc000017 	ldw	r16,0(sp)
   28210:	dec00304 	addi	sp,sp,12
   28214:	f800283a 	ret

00028218 <_read_r>:
   28218:	defffd04 	addi	sp,sp,-12
   2821c:	dc000015 	stw	r16,0(sp)
   28220:	040000f4 	movhi	r16,3
   28224:	8403cd04 	addi	r16,r16,3892
   28228:	dc400115 	stw	r17,4(sp)
   2822c:	80000015 	stw	zero,0(r16)
   28230:	2023883a 	mov	r17,r4
   28234:	2809883a 	mov	r4,r5
   28238:	300b883a 	mov	r5,r6
   2823c:	380d883a 	mov	r6,r7
   28240:	dfc00215 	stw	ra,8(sp)
   28244:	002b2640 	call	2b264 <read>
   28248:	1007883a 	mov	r3,r2
   2824c:	00bfffc4 	movi	r2,-1
   28250:	18800626 	beq	r3,r2,2826c <_read_r+0x54>
   28254:	1805883a 	mov	r2,r3
   28258:	dfc00217 	ldw	ra,8(sp)
   2825c:	dc400117 	ldw	r17,4(sp)
   28260:	dc000017 	ldw	r16,0(sp)
   28264:	dec00304 	addi	sp,sp,12
   28268:	f800283a 	ret
   2826c:	80800017 	ldw	r2,0(r16)
   28270:	103ff826 	beq	r2,zero,28254 <_read_r+0x3c>
   28274:	88800015 	stw	r2,0(r17)
   28278:	1805883a 	mov	r2,r3
   2827c:	dfc00217 	ldw	ra,8(sp)
   28280:	dc400117 	ldw	r17,4(sp)
   28284:	dc000017 	ldw	r16,0(sp)
   28288:	dec00304 	addi	sp,sp,12
   2828c:	f800283a 	ret

00028290 <__udivdi3>:
   28290:	defff104 	addi	sp,sp,-60
   28294:	0015883a 	mov	r10,zero
   28298:	2005883a 	mov	r2,r4
   2829c:	3011883a 	mov	r8,r6
   282a0:	df000d15 	stw	fp,52(sp)
   282a4:	dd400a15 	stw	r21,40(sp)
   282a8:	dcc00815 	stw	r19,32(sp)
   282ac:	dfc00e15 	stw	ra,56(sp)
   282b0:	ddc00c15 	stw	r23,48(sp)
   282b4:	dd800b15 	stw	r22,44(sp)
   282b8:	dd000915 	stw	r20,36(sp)
   282bc:	dc800715 	stw	r18,28(sp)
   282c0:	dc400615 	stw	r17,24(sp)
   282c4:	dc000515 	stw	r16,20(sp)
   282c8:	da800315 	stw	r10,12(sp)
   282cc:	4027883a 	mov	r19,r8
   282d0:	1039883a 	mov	fp,r2
   282d4:	282b883a 	mov	r21,r5
   282d8:	da800415 	stw	r10,16(sp)
   282dc:	3800401e 	bne	r7,zero,283e0 <__udivdi3+0x150>
   282e0:	2a006536 	bltu	r5,r8,28478 <__udivdi3+0x1e8>
   282e4:	4000b526 	beq	r8,zero,285bc <__udivdi3+0x32c>
   282e8:	00bfffd4 	movui	r2,65535
   282ec:	14c0ad36 	bltu	r2,r19,285a4 <__udivdi3+0x314>
   282f0:	00803fc4 	movi	r2,255
   282f4:	14c15e36 	bltu	r2,r19,28870 <__udivdi3+0x5e0>
   282f8:	000b883a 	mov	r5,zero
   282fc:	0005883a 	mov	r2,zero
   28300:	9884d83a 	srl	r2,r19,r2
   28304:	010000f4 	movhi	r4,3
   28308:	21364304 	addi	r4,r4,-9972
   2830c:	01800804 	movi	r6,32
   28310:	1105883a 	add	r2,r2,r4
   28314:	10c00003 	ldbu	r3,0(r2)
   28318:	28c7883a 	add	r3,r5,r3
   2831c:	30e9c83a 	sub	r20,r6,r3
   28320:	a0010a1e 	bne	r20,zero,2874c <__udivdi3+0x4bc>
   28324:	982ed43a 	srli	r23,r19,16
   28328:	acebc83a 	sub	r21,r21,r19
   2832c:	9dbfffcc 	andi	r22,r19,65535
   28330:	05000044 	movi	r20,1
   28334:	a809883a 	mov	r4,r21
   28338:	b80b883a 	mov	r5,r23
   2833c:	002a1c40 	call	2a1c4 <__udivsi3>
   28340:	100b883a 	mov	r5,r2
   28344:	b009883a 	mov	r4,r22
   28348:	1021883a 	mov	r16,r2
   2834c:	002a1d40 	call	2a1d4 <__mulsi3>
   28350:	a809883a 	mov	r4,r21
   28354:	b80b883a 	mov	r5,r23
   28358:	1023883a 	mov	r17,r2
   2835c:	002a1cc0 	call	2a1cc <__umodsi3>
   28360:	1004943a 	slli	r2,r2,16
   28364:	e006d43a 	srli	r3,fp,16
   28368:	10c4b03a 	or	r2,r2,r3
   2836c:	1440042e 	bgeu	r2,r17,28380 <__udivdi3+0xf0>
   28370:	14c5883a 	add	r2,r2,r19
   28374:	843fffc4 	addi	r16,r16,-1
   28378:	14c00136 	bltu	r2,r19,28380 <__udivdi3+0xf0>
   2837c:	14415c36 	bltu	r2,r17,288f0 <__udivdi3+0x660>
   28380:	1463c83a 	sub	r17,r2,r17
   28384:	8809883a 	mov	r4,r17
   28388:	b80b883a 	mov	r5,r23
   2838c:	002a1c40 	call	2a1c4 <__udivsi3>
   28390:	100b883a 	mov	r5,r2
   28394:	b009883a 	mov	r4,r22
   28398:	102b883a 	mov	r21,r2
   2839c:	002a1d40 	call	2a1d4 <__mulsi3>
   283a0:	8809883a 	mov	r4,r17
   283a4:	b80b883a 	mov	r5,r23
   283a8:	1025883a 	mov	r18,r2
   283ac:	002a1cc0 	call	2a1cc <__umodsi3>
   283b0:	1004943a 	slli	r2,r2,16
   283b4:	e0ffffcc 	andi	r3,fp,65535
   283b8:	10c4b03a 	or	r2,r2,r3
   283bc:	1480042e 	bgeu	r2,r18,283d0 <__udivdi3+0x140>
   283c0:	9885883a 	add	r2,r19,r2
   283c4:	ad7fffc4 	addi	r21,r21,-1
   283c8:	14c00136 	bltu	r2,r19,283d0 <__udivdi3+0x140>
   283cc:	14813c36 	bltu	r2,r18,288c0 <__udivdi3+0x630>
   283d0:	8004943a 	slli	r2,r16,16
   283d4:	a009883a 	mov	r4,r20
   283d8:	a884b03a 	or	r2,r21,r2
   283dc:	00001506 	br	28434 <__udivdi3+0x1a4>
   283e0:	380d883a 	mov	r6,r7
   283e4:	29c06c36 	bltu	r5,r7,28598 <__udivdi3+0x308>
   283e8:	00bfffd4 	movui	r2,65535
   283ec:	11c06436 	bltu	r2,r7,28580 <__udivdi3+0x2f0>
   283f0:	00803fc4 	movi	r2,255
   283f4:	11c11836 	bltu	r2,r7,28858 <__udivdi3+0x5c8>
   283f8:	000b883a 	mov	r5,zero
   283fc:	0005883a 	mov	r2,zero
   28400:	3084d83a 	srl	r2,r6,r2
   28404:	010000f4 	movhi	r4,3
   28408:	21364304 	addi	r4,r4,-9972
   2840c:	01c00804 	movi	r7,32
   28410:	1105883a 	add	r2,r2,r4
   28414:	10c00003 	ldbu	r3,0(r2)
   28418:	28c7883a 	add	r3,r5,r3
   2841c:	38edc83a 	sub	r22,r7,r3
   28420:	b000731e 	bne	r22,zero,285f0 <__udivdi3+0x360>
   28424:	35400136 	bltu	r6,r21,2842c <__udivdi3+0x19c>
   28428:	e4c05b36 	bltu	fp,r19,28598 <__udivdi3+0x308>
   2842c:	00800044 	movi	r2,1
   28430:	0009883a 	mov	r4,zero
   28434:	d8800315 	stw	r2,12(sp)
   28438:	d9400317 	ldw	r5,12(sp)
   2843c:	d9000415 	stw	r4,16(sp)
   28440:	2007883a 	mov	r3,r4
   28444:	2805883a 	mov	r2,r5
   28448:	dfc00e17 	ldw	ra,56(sp)
   2844c:	df000d17 	ldw	fp,52(sp)
   28450:	ddc00c17 	ldw	r23,48(sp)
   28454:	dd800b17 	ldw	r22,44(sp)
   28458:	dd400a17 	ldw	r21,40(sp)
   2845c:	dd000917 	ldw	r20,36(sp)
   28460:	dcc00817 	ldw	r19,32(sp)
   28464:	dc800717 	ldw	r18,28(sp)
   28468:	dc400617 	ldw	r17,24(sp)
   2846c:	dc000517 	ldw	r16,20(sp)
   28470:	dec00f04 	addi	sp,sp,60
   28474:	f800283a 	ret
   28478:	00bfffd4 	movui	r2,65535
   2847c:	12005636 	bltu	r2,r8,285d8 <__udivdi3+0x348>
   28480:	00803fc4 	movi	r2,255
   28484:	12010036 	bltu	r2,r8,28888 <__udivdi3+0x5f8>
   28488:	000b883a 	mov	r5,zero
   2848c:	0005883a 	mov	r2,zero
   28490:	9884d83a 	srl	r2,r19,r2
   28494:	010000f4 	movhi	r4,3
   28498:	21364304 	addi	r4,r4,-9972
   2849c:	01800804 	movi	r6,32
   284a0:	1105883a 	add	r2,r2,r4
   284a4:	10c00003 	ldbu	r3,0(r2)
   284a8:	28c7883a 	add	r3,r5,r3
   284ac:	30cbc83a 	sub	r5,r6,r3
   284b0:	28000626 	beq	r5,zero,284cc <__udivdi3+0x23c>
   284b4:	3145c83a 	sub	r2,r6,r5
   284b8:	e084d83a 	srl	r2,fp,r2
   284bc:	a946983a 	sll	r3,r21,r5
   284c0:	e178983a 	sll	fp,fp,r5
   284c4:	9966983a 	sll	r19,r19,r5
   284c8:	18aab03a 	or	r21,r3,r2
   284cc:	982ed43a 	srli	r23,r19,16
   284d0:	a809883a 	mov	r4,r21
   284d4:	9cbfffcc 	andi	r18,r19,65535
   284d8:	b80b883a 	mov	r5,r23
   284dc:	002a1c40 	call	2a1c4 <__udivsi3>
   284e0:	100b883a 	mov	r5,r2
   284e4:	9009883a 	mov	r4,r18
   284e8:	1021883a 	mov	r16,r2
   284ec:	002a1d40 	call	2a1d4 <__mulsi3>
   284f0:	a809883a 	mov	r4,r21
   284f4:	b80b883a 	mov	r5,r23
   284f8:	1023883a 	mov	r17,r2
   284fc:	002a1cc0 	call	2a1cc <__umodsi3>
   28500:	1004943a 	slli	r2,r2,16
   28504:	e006d43a 	srli	r3,fp,16
   28508:	10c4b03a 	or	r2,r2,r3
   2850c:	1440042e 	bgeu	r2,r17,28520 <__udivdi3+0x290>
   28510:	14c5883a 	add	r2,r2,r19
   28514:	843fffc4 	addi	r16,r16,-1
   28518:	14c00136 	bltu	r2,r19,28520 <__udivdi3+0x290>
   2851c:	1440ea36 	bltu	r2,r17,288c8 <__udivdi3+0x638>
   28520:	1463c83a 	sub	r17,r2,r17
   28524:	8809883a 	mov	r4,r17
   28528:	b80b883a 	mov	r5,r23
   2852c:	002a1c40 	call	2a1c4 <__udivsi3>
   28530:	100b883a 	mov	r5,r2
   28534:	9009883a 	mov	r4,r18
   28538:	102b883a 	mov	r21,r2
   2853c:	002a1d40 	call	2a1d4 <__mulsi3>
   28540:	8809883a 	mov	r4,r17
   28544:	b80b883a 	mov	r5,r23
   28548:	1025883a 	mov	r18,r2
   2854c:	002a1cc0 	call	2a1cc <__umodsi3>
   28550:	1004943a 	slli	r2,r2,16
   28554:	e0ffffcc 	andi	r3,fp,65535
   28558:	10c4b03a 	or	r2,r2,r3
   2855c:	1480042e 	bgeu	r2,r18,28570 <__udivdi3+0x2e0>
   28560:	9885883a 	add	r2,r19,r2
   28564:	ad7fffc4 	addi	r21,r21,-1
   28568:	14c00136 	bltu	r2,r19,28570 <__udivdi3+0x2e0>
   2856c:	1480d936 	bltu	r2,r18,288d4 <__udivdi3+0x644>
   28570:	8004943a 	slli	r2,r16,16
   28574:	0009883a 	mov	r4,zero
   28578:	a884b03a 	or	r2,r21,r2
   2857c:	003fad06 	br	28434 <__udivdi3+0x1a4>
   28580:	00804034 	movhi	r2,256
   28584:	10bfffc4 	addi	r2,r2,-1
   28588:	11c0b636 	bltu	r2,r7,28864 <__udivdi3+0x5d4>
   2858c:	01400404 	movi	r5,16
   28590:	2805883a 	mov	r2,r5
   28594:	003f9a06 	br	28400 <__udivdi3+0x170>
   28598:	0005883a 	mov	r2,zero
   2859c:	0009883a 	mov	r4,zero
   285a0:	003fa406 	br	28434 <__udivdi3+0x1a4>
   285a4:	00804034 	movhi	r2,256
   285a8:	10bfffc4 	addi	r2,r2,-1
   285ac:	14c0b336 	bltu	r2,r19,2887c <__udivdi3+0x5ec>
   285b0:	01400404 	movi	r5,16
   285b4:	2805883a 	mov	r2,r5
   285b8:	003f5106 	br	28300 <__udivdi3+0x70>
   285bc:	01000044 	movi	r4,1
   285c0:	000b883a 	mov	r5,zero
   285c4:	002a1c40 	call	2a1c4 <__udivsi3>
   285c8:	1027883a 	mov	r19,r2
   285cc:	00bfffd4 	movui	r2,65535
   285d0:	14fff436 	bltu	r2,r19,285a4 <__udivdi3+0x314>
   285d4:	003f4606 	br	282f0 <__udivdi3+0x60>
   285d8:	00804034 	movhi	r2,256
   285dc:	10bfffc4 	addi	r2,r2,-1
   285e0:	1200ac36 	bltu	r2,r8,28894 <__udivdi3+0x604>
   285e4:	01400404 	movi	r5,16
   285e8:	2805883a 	mov	r2,r5
   285ec:	003fa806 	br	28490 <__udivdi3+0x200>
   285f0:	3d85c83a 	sub	r2,r7,r22
   285f4:	3588983a 	sll	r4,r6,r22
   285f8:	9886d83a 	srl	r3,r19,r2
   285fc:	a8a2d83a 	srl	r17,r21,r2
   28600:	e084d83a 	srl	r2,fp,r2
   28604:	20eeb03a 	or	r23,r4,r3
   28608:	b824d43a 	srli	r18,r23,16
   2860c:	ad86983a 	sll	r3,r21,r22
   28610:	8809883a 	mov	r4,r17
   28614:	900b883a 	mov	r5,r18
   28618:	1886b03a 	or	r3,r3,r2
   2861c:	d8c00115 	stw	r3,4(sp)
   28620:	bc3fffcc 	andi	r16,r23,65535
   28624:	002a1c40 	call	2a1c4 <__udivsi3>
   28628:	100b883a 	mov	r5,r2
   2862c:	8009883a 	mov	r4,r16
   28630:	1029883a 	mov	r20,r2
   28634:	002a1d40 	call	2a1d4 <__mulsi3>
   28638:	900b883a 	mov	r5,r18
   2863c:	8809883a 	mov	r4,r17
   28640:	102b883a 	mov	r21,r2
   28644:	002a1cc0 	call	2a1cc <__umodsi3>
   28648:	d9400117 	ldw	r5,4(sp)
   2864c:	1004943a 	slli	r2,r2,16
   28650:	9da6983a 	sll	r19,r19,r22
   28654:	2806d43a 	srli	r3,r5,16
   28658:	10c4b03a 	or	r2,r2,r3
   2865c:	1540032e 	bgeu	r2,r21,2866c <__udivdi3+0x3dc>
   28660:	15c5883a 	add	r2,r2,r23
   28664:	a53fffc4 	addi	r20,r20,-1
   28668:	15c0912e 	bgeu	r2,r23,288b0 <__udivdi3+0x620>
   2866c:	1563c83a 	sub	r17,r2,r21
   28670:	8809883a 	mov	r4,r17
   28674:	900b883a 	mov	r5,r18
   28678:	002a1c40 	call	2a1c4 <__udivsi3>
   2867c:	100b883a 	mov	r5,r2
   28680:	8009883a 	mov	r4,r16
   28684:	102b883a 	mov	r21,r2
   28688:	002a1d40 	call	2a1d4 <__mulsi3>
   2868c:	8809883a 	mov	r4,r17
   28690:	900b883a 	mov	r5,r18
   28694:	1021883a 	mov	r16,r2
   28698:	002a1cc0 	call	2a1cc <__umodsi3>
   2869c:	da800117 	ldw	r10,4(sp)
   286a0:	1004943a 	slli	r2,r2,16
   286a4:	50ffffcc 	andi	r3,r10,65535
   286a8:	10c6b03a 	or	r3,r2,r3
   286ac:	1c00032e 	bgeu	r3,r16,286bc <__udivdi3+0x42c>
   286b0:	1dc7883a 	add	r3,r3,r23
   286b4:	ad7fffc4 	addi	r21,r21,-1
   286b8:	1dc0792e 	bgeu	r3,r23,288a0 <__udivdi3+0x610>
   286bc:	a004943a 	slli	r2,r20,16
   286c0:	982ed43a 	srli	r23,r19,16
   286c4:	9cffffcc 	andi	r19,r19,65535
   286c8:	a8a4b03a 	or	r18,r21,r2
   286cc:	947fffcc 	andi	r17,r18,65535
   286d0:	902ad43a 	srli	r21,r18,16
   286d4:	8809883a 	mov	r4,r17
   286d8:	980b883a 	mov	r5,r19
   286dc:	1c21c83a 	sub	r16,r3,r16
   286e0:	002a1d40 	call	2a1d4 <__mulsi3>
   286e4:	8809883a 	mov	r4,r17
   286e8:	b80b883a 	mov	r5,r23
   286ec:	1029883a 	mov	r20,r2
   286f0:	002a1d40 	call	2a1d4 <__mulsi3>
   286f4:	980b883a 	mov	r5,r19
   286f8:	a809883a 	mov	r4,r21
   286fc:	1023883a 	mov	r17,r2
   28700:	002a1d40 	call	2a1d4 <__mulsi3>
   28704:	a809883a 	mov	r4,r21
   28708:	b80b883a 	mov	r5,r23
   2870c:	1027883a 	mov	r19,r2
   28710:	002a1d40 	call	2a1d4 <__mulsi3>
   28714:	1009883a 	mov	r4,r2
   28718:	a004d43a 	srli	r2,r20,16
   2871c:	8ce3883a 	add	r17,r17,r19
   28720:	1447883a 	add	r3,r2,r17
   28724:	1cc0022e 	bgeu	r3,r19,28730 <__udivdi3+0x4a0>
   28728:	00800074 	movhi	r2,1
   2872c:	2089883a 	add	r4,r4,r2
   28730:	1804d43a 	srli	r2,r3,16
   28734:	2085883a 	add	r2,r4,r2
   28738:	80804436 	bltu	r16,r2,2884c <__udivdi3+0x5bc>
   2873c:	80803e26 	beq	r16,r2,28838 <__udivdi3+0x5a8>
   28740:	9005883a 	mov	r2,r18
   28744:	0009883a 	mov	r4,zero
   28748:	003f3a06 	br	28434 <__udivdi3+0x1a4>
   2874c:	9d26983a 	sll	r19,r19,r20
   28750:	3505c83a 	sub	r2,r6,r20
   28754:	a8a2d83a 	srl	r17,r21,r2
   28758:	982ed43a 	srli	r23,r19,16
   2875c:	e084d83a 	srl	r2,fp,r2
   28760:	ad06983a 	sll	r3,r21,r20
   28764:	8809883a 	mov	r4,r17
   28768:	b80b883a 	mov	r5,r23
   2876c:	1886b03a 	or	r3,r3,r2
   28770:	d8c00015 	stw	r3,0(sp)
   28774:	9dbfffcc 	andi	r22,r19,65535
   28778:	002a1c40 	call	2a1c4 <__udivsi3>
   2877c:	100b883a 	mov	r5,r2
   28780:	b009883a 	mov	r4,r22
   28784:	d8800215 	stw	r2,8(sp)
   28788:	002a1d40 	call	2a1d4 <__mulsi3>
   2878c:	8809883a 	mov	r4,r17
   28790:	b80b883a 	mov	r5,r23
   28794:	102b883a 	mov	r21,r2
   28798:	002a1cc0 	call	2a1cc <__umodsi3>
   2879c:	d9000017 	ldw	r4,0(sp)
   287a0:	1004943a 	slli	r2,r2,16
   287a4:	2006d43a 	srli	r3,r4,16
   287a8:	10c4b03a 	or	r2,r2,r3
   287ac:	1540052e 	bgeu	r2,r21,287c4 <__udivdi3+0x534>
   287b0:	d9400217 	ldw	r5,8(sp)
   287b4:	14c5883a 	add	r2,r2,r19
   287b8:	297fffc4 	addi	r5,r5,-1
   287bc:	d9400215 	stw	r5,8(sp)
   287c0:	14c0462e 	bgeu	r2,r19,288dc <__udivdi3+0x64c>
   287c4:	1563c83a 	sub	r17,r2,r21
   287c8:	8809883a 	mov	r4,r17
   287cc:	b80b883a 	mov	r5,r23
   287d0:	002a1c40 	call	2a1c4 <__udivsi3>
   287d4:	100b883a 	mov	r5,r2
   287d8:	b009883a 	mov	r4,r22
   287dc:	1025883a 	mov	r18,r2
   287e0:	002a1d40 	call	2a1d4 <__mulsi3>
   287e4:	8809883a 	mov	r4,r17
   287e8:	b80b883a 	mov	r5,r23
   287ec:	1021883a 	mov	r16,r2
   287f0:	002a1cc0 	call	2a1cc <__umodsi3>
   287f4:	da800017 	ldw	r10,0(sp)
   287f8:	1004943a 	slli	r2,r2,16
   287fc:	50ffffcc 	andi	r3,r10,65535
   28800:	10c6b03a 	or	r3,r2,r3
   28804:	1c00062e 	bgeu	r3,r16,28820 <__udivdi3+0x590>
   28808:	1cc7883a 	add	r3,r3,r19
   2880c:	94bfffc4 	addi	r18,r18,-1
   28810:	1cc00336 	bltu	r3,r19,28820 <__udivdi3+0x590>
   28814:	1c00022e 	bgeu	r3,r16,28820 <__udivdi3+0x590>
   28818:	94bfffc4 	addi	r18,r18,-1
   2881c:	1cc7883a 	add	r3,r3,r19
   28820:	d9000217 	ldw	r4,8(sp)
   28824:	e538983a 	sll	fp,fp,r20
   28828:	1c2bc83a 	sub	r21,r3,r16
   2882c:	2004943a 	slli	r2,r4,16
   28830:	90a8b03a 	or	r20,r18,r2
   28834:	003ebf06 	br	28334 <__udivdi3+0xa4>
   28838:	1804943a 	slli	r2,r3,16
   2883c:	e588983a 	sll	r4,fp,r22
   28840:	a0ffffcc 	andi	r3,r20,65535
   28844:	10c5883a 	add	r2,r2,r3
   28848:	20bfbd2e 	bgeu	r4,r2,28740 <__udivdi3+0x4b0>
   2884c:	90bfffc4 	addi	r2,r18,-1
   28850:	0009883a 	mov	r4,zero
   28854:	003ef706 	br	28434 <__udivdi3+0x1a4>
   28858:	01400204 	movi	r5,8
   2885c:	2805883a 	mov	r2,r5
   28860:	003ee706 	br	28400 <__udivdi3+0x170>
   28864:	01400604 	movi	r5,24
   28868:	2805883a 	mov	r2,r5
   2886c:	003ee406 	br	28400 <__udivdi3+0x170>
   28870:	01400204 	movi	r5,8
   28874:	2805883a 	mov	r2,r5
   28878:	003ea106 	br	28300 <__udivdi3+0x70>
   2887c:	01400604 	movi	r5,24
   28880:	2805883a 	mov	r2,r5
   28884:	003e9e06 	br	28300 <__udivdi3+0x70>
   28888:	01400204 	movi	r5,8
   2888c:	2805883a 	mov	r2,r5
   28890:	003eff06 	br	28490 <__udivdi3+0x200>
   28894:	01400604 	movi	r5,24
   28898:	2805883a 	mov	r2,r5
   2889c:	003efc06 	br	28490 <__udivdi3+0x200>
   288a0:	1c3f862e 	bgeu	r3,r16,286bc <__udivdi3+0x42c>
   288a4:	1dc7883a 	add	r3,r3,r23
   288a8:	ad7fffc4 	addi	r21,r21,-1
   288ac:	003f8306 	br	286bc <__udivdi3+0x42c>
   288b0:	157f6e2e 	bgeu	r2,r21,2866c <__udivdi3+0x3dc>
   288b4:	a53fffc4 	addi	r20,r20,-1
   288b8:	15c5883a 	add	r2,r2,r23
   288bc:	003f6b06 	br	2866c <__udivdi3+0x3dc>
   288c0:	ad7fffc4 	addi	r21,r21,-1
   288c4:	003ec206 	br	283d0 <__udivdi3+0x140>
   288c8:	843fffc4 	addi	r16,r16,-1
   288cc:	14c5883a 	add	r2,r2,r19
   288d0:	003f1306 	br	28520 <__udivdi3+0x290>
   288d4:	ad7fffc4 	addi	r21,r21,-1
   288d8:	003f2506 	br	28570 <__udivdi3+0x2e0>
   288dc:	157fb92e 	bgeu	r2,r21,287c4 <__udivdi3+0x534>
   288e0:	297fffc4 	addi	r5,r5,-1
   288e4:	14c5883a 	add	r2,r2,r19
   288e8:	d9400215 	stw	r5,8(sp)
   288ec:	003fb506 	br	287c4 <__udivdi3+0x534>
   288f0:	843fffc4 	addi	r16,r16,-1
   288f4:	14c5883a 	add	r2,r2,r19
   288f8:	003ea106 	br	28380 <__udivdi3+0xf0>

000288fc <__umoddi3>:
   288fc:	defff004 	addi	sp,sp,-64
   28900:	3011883a 	mov	r8,r6
   28904:	000d883a 	mov	r6,zero
   28908:	dd400b15 	stw	r21,44(sp)
   2890c:	dcc00915 	stw	r19,36(sp)
   28910:	dc000615 	stw	r16,24(sp)
   28914:	dfc00f15 	stw	ra,60(sp)
   28918:	df000e15 	stw	fp,56(sp)
   2891c:	ddc00d15 	stw	r23,52(sp)
   28920:	dd800c15 	stw	r22,48(sp)
   28924:	dd000a15 	stw	r20,40(sp)
   28928:	dc800815 	stw	r18,32(sp)
   2892c:	dc400715 	stw	r17,28(sp)
   28930:	2817883a 	mov	r11,r5
   28934:	d9800415 	stw	r6,16(sp)
   28938:	4027883a 	mov	r19,r8
   2893c:	d9800515 	stw	r6,20(sp)
   28940:	2021883a 	mov	r16,r4
   28944:	282b883a 	mov	r21,r5
   28948:	38002c1e 	bne	r7,zero,289fc <__umoddi3+0x100>
   2894c:	2a005636 	bltu	r5,r8,28aa8 <__umoddi3+0x1ac>
   28950:	40009a26 	beq	r8,zero,28bbc <__umoddi3+0x2c0>
   28954:	00bfffd4 	movui	r2,65535
   28958:	14c09236 	bltu	r2,r19,28ba4 <__umoddi3+0x2a8>
   2895c:	00803fc4 	movi	r2,255
   28960:	14c15c36 	bltu	r2,r19,28ed4 <__umoddi3+0x5d8>
   28964:	000b883a 	mov	r5,zero
   28968:	0005883a 	mov	r2,zero
   2896c:	9884d83a 	srl	r2,r19,r2
   28970:	010000f4 	movhi	r4,3
   28974:	21364304 	addi	r4,r4,-9972
   28978:	01800804 	movi	r6,32
   2897c:	1105883a 	add	r2,r2,r4
   28980:	10c00003 	ldbu	r3,0(r2)
   28984:	28c7883a 	add	r3,r5,r3
   28988:	30e5c83a 	sub	r18,r6,r3
   2898c:	9000a41e 	bne	r18,zero,28c20 <__umoddi3+0x324>
   28990:	982ed43a 	srli	r23,r19,16
   28994:	acebc83a 	sub	r21,r21,r19
   28998:	9d3fffcc 	andi	r20,r19,65535
   2899c:	002d883a 	mov	r22,zero
   289a0:	a809883a 	mov	r4,r21
   289a4:	b80b883a 	mov	r5,r23
   289a8:	002a1c40 	call	2a1c4 <__udivsi3>
   289ac:	100b883a 	mov	r5,r2
   289b0:	a009883a 	mov	r4,r20
   289b4:	002a1d40 	call	2a1d4 <__mulsi3>
   289b8:	a809883a 	mov	r4,r21
   289bc:	b80b883a 	mov	r5,r23
   289c0:	1023883a 	mov	r17,r2
   289c4:	002a1cc0 	call	2a1cc <__umodsi3>
   289c8:	1004943a 	slli	r2,r2,16
   289cc:	8006d43a 	srli	r3,r16,16
   289d0:	10c4b03a 	or	r2,r2,r3
   289d4:	1440032e 	bgeu	r2,r17,289e4 <__umoddi3+0xe8>
   289d8:	14c5883a 	add	r2,r2,r19
   289dc:	14c00136 	bltu	r2,r19,289e4 <__umoddi3+0xe8>
   289e0:	14415836 	bltu	r2,r17,28f44 <__umoddi3+0x648>
   289e4:	1463c83a 	sub	r17,r2,r17
   289e8:	8809883a 	mov	r4,r17
   289ec:	b80b883a 	mov	r5,r23
   289f0:	002a1c40 	call	2a1c4 <__udivsi3>
   289f4:	a009883a 	mov	r4,r20
   289f8:	00005306 	br	28b48 <__umoddi3+0x24c>
   289fc:	380d883a 	mov	r6,r7
   28a00:	29c0132e 	bgeu	r5,r7,28a50 <__umoddi3+0x154>
   28a04:	d9000415 	stw	r4,16(sp)
   28a08:	d9400515 	stw	r5,20(sp)
   28a0c:	d9400417 	ldw	r5,16(sp)
   28a10:	5813883a 	mov	r9,r11
   28a14:	2811883a 	mov	r8,r5
   28a18:	4005883a 	mov	r2,r8
   28a1c:	4807883a 	mov	r3,r9
   28a20:	dfc00f17 	ldw	ra,60(sp)
   28a24:	df000e17 	ldw	fp,56(sp)
   28a28:	ddc00d17 	ldw	r23,52(sp)
   28a2c:	dd800c17 	ldw	r22,48(sp)
   28a30:	dd400b17 	ldw	r21,44(sp)
   28a34:	dd000a17 	ldw	r20,40(sp)
   28a38:	dcc00917 	ldw	r19,36(sp)
   28a3c:	dc800817 	ldw	r18,32(sp)
   28a40:	dc400717 	ldw	r17,28(sp)
   28a44:	dc000617 	ldw	r16,24(sp)
   28a48:	dec01004 	addi	sp,sp,64
   28a4c:	f800283a 	ret
   28a50:	00bfffd4 	movui	r2,65535
   28a54:	11c06636 	bltu	r2,r7,28bf0 <__umoddi3+0x2f4>
   28a58:	00803fc4 	movi	r2,255
   28a5c:	11c12036 	bltu	r2,r7,28ee0 <__umoddi3+0x5e4>
   28a60:	000b883a 	mov	r5,zero
   28a64:	0005883a 	mov	r2,zero
   28a68:	3084d83a 	srl	r2,r6,r2
   28a6c:	010000f4 	movhi	r4,3
   28a70:	21364304 	addi	r4,r4,-9972
   28a74:	01c00804 	movi	r7,32
   28a78:	1105883a 	add	r2,r2,r4
   28a7c:	10c00003 	ldbu	r3,0(r2)
   28a80:	28c7883a 	add	r3,r5,r3
   28a84:	38e5c83a 	sub	r18,r7,r3
   28a88:	9000941e 	bne	r18,zero,28cdc <__umoddi3+0x3e0>
   28a8c:	35405e36 	bltu	r6,r21,28c08 <__umoddi3+0x30c>
   28a90:	84c05d2e 	bgeu	r16,r19,28c08 <__umoddi3+0x30c>
   28a94:	8011883a 	mov	r8,r16
   28a98:	a813883a 	mov	r9,r21
   28a9c:	dc000415 	stw	r16,16(sp)
   28aa0:	dd400515 	stw	r21,20(sp)
   28aa4:	003fdc06 	br	28a18 <__umoddi3+0x11c>
   28aa8:	00bfffd4 	movui	r2,65535
   28aac:	12004a36 	bltu	r2,r8,28bd8 <__umoddi3+0x2dc>
   28ab0:	00803fc4 	movi	r2,255
   28ab4:	12010d36 	bltu	r2,r8,28eec <__umoddi3+0x5f0>
   28ab8:	000b883a 	mov	r5,zero
   28abc:	0005883a 	mov	r2,zero
   28ac0:	9884d83a 	srl	r2,r19,r2
   28ac4:	010000f4 	movhi	r4,3
   28ac8:	21364304 	addi	r4,r4,-9972
   28acc:	01800804 	movi	r6,32
   28ad0:	1105883a 	add	r2,r2,r4
   28ad4:	10c00003 	ldbu	r3,0(r2)
   28ad8:	28c7883a 	add	r3,r5,r3
   28adc:	30c7c83a 	sub	r3,r6,r3
   28ae0:	1800dc1e 	bne	r3,zero,28e54 <__umoddi3+0x558>
   28ae4:	002d883a 	mov	r22,zero
   28ae8:	982ed43a 	srli	r23,r19,16
   28aec:	a809883a 	mov	r4,r21
   28af0:	9cbfffcc 	andi	r18,r19,65535
   28af4:	b80b883a 	mov	r5,r23
   28af8:	002a1c40 	call	2a1c4 <__udivsi3>
   28afc:	100b883a 	mov	r5,r2
   28b00:	9009883a 	mov	r4,r18
   28b04:	002a1d40 	call	2a1d4 <__mulsi3>
   28b08:	a809883a 	mov	r4,r21
   28b0c:	b80b883a 	mov	r5,r23
   28b10:	1023883a 	mov	r17,r2
   28b14:	002a1cc0 	call	2a1cc <__umodsi3>
   28b18:	1004943a 	slli	r2,r2,16
   28b1c:	8006d43a 	srli	r3,r16,16
   28b20:	10c4b03a 	or	r2,r2,r3
   28b24:	1440032e 	bgeu	r2,r17,28b34 <__umoddi3+0x238>
   28b28:	14c5883a 	add	r2,r2,r19
   28b2c:	14c00136 	bltu	r2,r19,28b34 <__umoddi3+0x238>
   28b30:	14410236 	bltu	r2,r17,28f3c <__umoddi3+0x640>
   28b34:	1463c83a 	sub	r17,r2,r17
   28b38:	8809883a 	mov	r4,r17
   28b3c:	b80b883a 	mov	r5,r23
   28b40:	002a1c40 	call	2a1c4 <__udivsi3>
   28b44:	9009883a 	mov	r4,r18
   28b48:	100b883a 	mov	r5,r2
   28b4c:	002a1d40 	call	2a1d4 <__mulsi3>
   28b50:	8809883a 	mov	r4,r17
   28b54:	b80b883a 	mov	r5,r23
   28b58:	102b883a 	mov	r21,r2
   28b5c:	002a1cc0 	call	2a1cc <__umodsi3>
   28b60:	1004943a 	slli	r2,r2,16
   28b64:	80ffffcc 	andi	r3,r16,65535
   28b68:	10c4b03a 	or	r2,r2,r3
   28b6c:	1540042e 	bgeu	r2,r21,28b80 <__umoddi3+0x284>
   28b70:	14c5883a 	add	r2,r2,r19
   28b74:	14c00236 	bltu	r2,r19,28b80 <__umoddi3+0x284>
   28b78:	1540012e 	bgeu	r2,r21,28b80 <__umoddi3+0x284>
   28b7c:	14c5883a 	add	r2,r2,r19
   28b80:	1545c83a 	sub	r2,r2,r21
   28b84:	1584d83a 	srl	r2,r2,r22
   28b88:	0013883a 	mov	r9,zero
   28b8c:	d8800415 	stw	r2,16(sp)
   28b90:	d8c00417 	ldw	r3,16(sp)
   28b94:	0005883a 	mov	r2,zero
   28b98:	d8800515 	stw	r2,20(sp)
   28b9c:	1811883a 	mov	r8,r3
   28ba0:	003f9d06 	br	28a18 <__umoddi3+0x11c>
   28ba4:	00804034 	movhi	r2,256
   28ba8:	10bfffc4 	addi	r2,r2,-1
   28bac:	14c0c636 	bltu	r2,r19,28ec8 <__umoddi3+0x5cc>
   28bb0:	01400404 	movi	r5,16
   28bb4:	2805883a 	mov	r2,r5
   28bb8:	003f6c06 	br	2896c <__umoddi3+0x70>
   28bbc:	01000044 	movi	r4,1
   28bc0:	000b883a 	mov	r5,zero
   28bc4:	002a1c40 	call	2a1c4 <__udivsi3>
   28bc8:	1027883a 	mov	r19,r2
   28bcc:	00bfffd4 	movui	r2,65535
   28bd0:	14fff436 	bltu	r2,r19,28ba4 <__umoddi3+0x2a8>
   28bd4:	003f6106 	br	2895c <__umoddi3+0x60>
   28bd8:	00804034 	movhi	r2,256
   28bdc:	10bfffc4 	addi	r2,r2,-1
   28be0:	1200c536 	bltu	r2,r8,28ef8 <__umoddi3+0x5fc>
   28be4:	01400404 	movi	r5,16
   28be8:	2805883a 	mov	r2,r5
   28bec:	003fb406 	br	28ac0 <__umoddi3+0x1c4>
   28bf0:	00804034 	movhi	r2,256
   28bf4:	10bfffc4 	addi	r2,r2,-1
   28bf8:	11c0c236 	bltu	r2,r7,28f04 <__umoddi3+0x608>
   28bfc:	01400404 	movi	r5,16
   28c00:	2805883a 	mov	r2,r5
   28c04:	003f9806 	br	28a68 <__umoddi3+0x16c>
   28c08:	84c9c83a 	sub	r4,r16,r19
   28c0c:	8105803a 	cmpltu	r2,r16,r4
   28c10:	a987c83a 	sub	r3,r21,r6
   28c14:	18abc83a 	sub	r21,r3,r2
   28c18:	2021883a 	mov	r16,r4
   28c1c:	003f9d06 	br	28a94 <__umoddi3+0x198>
   28c20:	9ca6983a 	sll	r19,r19,r18
   28c24:	3485c83a 	sub	r2,r6,r18
   28c28:	a8a2d83a 	srl	r17,r21,r2
   28c2c:	982ed43a 	srli	r23,r19,16
   28c30:	ac86983a 	sll	r3,r21,r18
   28c34:	8084d83a 	srl	r2,r16,r2
   28c38:	8809883a 	mov	r4,r17
   28c3c:	b80b883a 	mov	r5,r23
   28c40:	18b8b03a 	or	fp,r3,r2
   28c44:	9d3fffcc 	andi	r20,r19,65535
   28c48:	002a1c40 	call	2a1c4 <__udivsi3>
   28c4c:	100b883a 	mov	r5,r2
   28c50:	a009883a 	mov	r4,r20
   28c54:	002a1d40 	call	2a1d4 <__mulsi3>
   28c58:	8809883a 	mov	r4,r17
   28c5c:	b80b883a 	mov	r5,r23
   28c60:	102b883a 	mov	r21,r2
   28c64:	002a1cc0 	call	2a1cc <__umodsi3>
   28c68:	1004943a 	slli	r2,r2,16
   28c6c:	e006d43a 	srli	r3,fp,16
   28c70:	902d883a 	mov	r22,r18
   28c74:	10c4b03a 	or	r2,r2,r3
   28c78:	1540022e 	bgeu	r2,r21,28c84 <__umoddi3+0x388>
   28c7c:	14c5883a 	add	r2,r2,r19
   28c80:	14c0ab2e 	bgeu	r2,r19,28f30 <__umoddi3+0x634>
   28c84:	1563c83a 	sub	r17,r2,r21
   28c88:	8809883a 	mov	r4,r17
   28c8c:	b80b883a 	mov	r5,r23
   28c90:	002a1c40 	call	2a1c4 <__udivsi3>
   28c94:	100b883a 	mov	r5,r2
   28c98:	a009883a 	mov	r4,r20
   28c9c:	002a1d40 	call	2a1d4 <__mulsi3>
   28ca0:	8809883a 	mov	r4,r17
   28ca4:	b80b883a 	mov	r5,r23
   28ca8:	102b883a 	mov	r21,r2
   28cac:	002a1cc0 	call	2a1cc <__umodsi3>
   28cb0:	1004943a 	slli	r2,r2,16
   28cb4:	e0ffffcc 	andi	r3,fp,65535
   28cb8:	10c4b03a 	or	r2,r2,r3
   28cbc:	1540042e 	bgeu	r2,r21,28cd0 <__umoddi3+0x3d4>
   28cc0:	14c5883a 	add	r2,r2,r19
   28cc4:	14c00236 	bltu	r2,r19,28cd0 <__umoddi3+0x3d4>
   28cc8:	1540012e 	bgeu	r2,r21,28cd0 <__umoddi3+0x3d4>
   28ccc:	14c5883a 	add	r2,r2,r19
   28cd0:	84a0983a 	sll	r16,r16,r18
   28cd4:	156bc83a 	sub	r21,r2,r21
   28cd8:	003f3106 	br	289a0 <__umoddi3+0xa4>
   28cdc:	3c8fc83a 	sub	r7,r7,r18
   28ce0:	3486983a 	sll	r3,r6,r18
   28ce4:	99c4d83a 	srl	r2,r19,r7
   28ce8:	a9e2d83a 	srl	r17,r21,r7
   28cec:	ac8c983a 	sll	r6,r21,r18
   28cf0:	18acb03a 	or	r22,r3,r2
   28cf4:	b02ed43a 	srli	r23,r22,16
   28cf8:	81c4d83a 	srl	r2,r16,r7
   28cfc:	8809883a 	mov	r4,r17
   28d00:	b80b883a 	mov	r5,r23
   28d04:	308cb03a 	or	r6,r6,r2
   28d08:	d9c00315 	stw	r7,12(sp)
   28d0c:	d9800215 	stw	r6,8(sp)
   28d10:	b53fffcc 	andi	r20,r22,65535
   28d14:	002a1c40 	call	2a1c4 <__udivsi3>
   28d18:	100b883a 	mov	r5,r2
   28d1c:	a009883a 	mov	r4,r20
   28d20:	1039883a 	mov	fp,r2
   28d24:	002a1d40 	call	2a1d4 <__mulsi3>
   28d28:	8809883a 	mov	r4,r17
   28d2c:	b80b883a 	mov	r5,r23
   28d30:	102b883a 	mov	r21,r2
   28d34:	002a1cc0 	call	2a1cc <__umodsi3>
   28d38:	d9000217 	ldw	r4,8(sp)
   28d3c:	1004943a 	slli	r2,r2,16
   28d40:	9ca6983a 	sll	r19,r19,r18
   28d44:	2006d43a 	srli	r3,r4,16
   28d48:	84a0983a 	sll	r16,r16,r18
   28d4c:	dcc00015 	stw	r19,0(sp)
   28d50:	10c4b03a 	or	r2,r2,r3
   28d54:	dc000115 	stw	r16,4(sp)
   28d58:	1540032e 	bgeu	r2,r21,28d68 <__umoddi3+0x46c>
   28d5c:	1585883a 	add	r2,r2,r22
   28d60:	e73fffc4 	addi	fp,fp,-1
   28d64:	15806e2e 	bgeu	r2,r22,28f20 <__umoddi3+0x624>
   28d68:	1563c83a 	sub	r17,r2,r21
   28d6c:	8809883a 	mov	r4,r17
   28d70:	b80b883a 	mov	r5,r23
   28d74:	002a1c40 	call	2a1c4 <__udivsi3>
   28d78:	100b883a 	mov	r5,r2
   28d7c:	a009883a 	mov	r4,r20
   28d80:	1021883a 	mov	r16,r2
   28d84:	002a1d40 	call	2a1d4 <__mulsi3>
   28d88:	b80b883a 	mov	r5,r23
   28d8c:	8809883a 	mov	r4,r17
   28d90:	1029883a 	mov	r20,r2
   28d94:	002a1cc0 	call	2a1cc <__umodsi3>
   28d98:	d9400217 	ldw	r5,8(sp)
   28d9c:	1004943a 	slli	r2,r2,16
   28da0:	28ffffcc 	andi	r3,r5,65535
   28da4:	10c4b03a 	or	r2,r2,r3
   28da8:	1500032e 	bgeu	r2,r20,28db8 <__umoddi3+0x4bc>
   28dac:	1585883a 	add	r2,r2,r22
   28db0:	843fffc4 	addi	r16,r16,-1
   28db4:	1580562e 	bgeu	r2,r22,28f10 <__umoddi3+0x614>
   28db8:	d9800017 	ldw	r6,0(sp)
   28dbc:	e022943a 	slli	r17,fp,16
   28dc0:	302ed43a 	srli	r23,r6,16
   28dc4:	8462b03a 	or	r17,r16,r17
   28dc8:	34ffffcc 	andi	r19,r6,65535
   28dcc:	882ad43a 	srli	r21,r17,16
   28dd0:	8c7fffcc 	andi	r17,r17,65535
   28dd4:	8809883a 	mov	r4,r17
   28dd8:	980b883a 	mov	r5,r19
   28ddc:	1521c83a 	sub	r16,r2,r20
   28de0:	002a1d40 	call	2a1d4 <__mulsi3>
   28de4:	8809883a 	mov	r4,r17
   28de8:	b80b883a 	mov	r5,r23
   28dec:	1029883a 	mov	r20,r2
   28df0:	002a1d40 	call	2a1d4 <__mulsi3>
   28df4:	980b883a 	mov	r5,r19
   28df8:	a809883a 	mov	r4,r21
   28dfc:	1023883a 	mov	r17,r2
   28e00:	002a1d40 	call	2a1d4 <__mulsi3>
   28e04:	a809883a 	mov	r4,r21
   28e08:	b80b883a 	mov	r5,r23
   28e0c:	1027883a 	mov	r19,r2
   28e10:	002a1d40 	call	2a1d4 <__mulsi3>
   28e14:	100b883a 	mov	r5,r2
   28e18:	a004d43a 	srli	r2,r20,16
   28e1c:	8ce3883a 	add	r17,r17,r19
   28e20:	1449883a 	add	r4,r2,r17
   28e24:	24c0022e 	bgeu	r4,r19,28e30 <__umoddi3+0x534>
   28e28:	00800074 	movhi	r2,1
   28e2c:	288b883a 	add	r5,r5,r2
   28e30:	2004d43a 	srli	r2,r4,16
   28e34:	2008943a 	slli	r4,r4,16
   28e38:	a0ffffcc 	andi	r3,r20,65535
   28e3c:	288d883a 	add	r6,r5,r2
   28e40:	20c9883a 	add	r4,r4,r3
   28e44:	81800b36 	bltu	r16,r6,28e74 <__umoddi3+0x578>
   28e48:	81804026 	beq	r16,r6,28f4c <__umoddi3+0x650>
   28e4c:	818dc83a 	sub	r6,r16,r6
   28e50:	00000f06 	br	28e90 <__umoddi3+0x594>
   28e54:	30c5c83a 	sub	r2,r6,r3
   28e58:	182d883a 	mov	r22,r3
   28e5c:	8084d83a 	srl	r2,r16,r2
   28e60:	a8c6983a 	sll	r3,r21,r3
   28e64:	9da6983a 	sll	r19,r19,r22
   28e68:	85a0983a 	sll	r16,r16,r22
   28e6c:	18aab03a 	or	r21,r3,r2
   28e70:	003f1d06 	br	28ae8 <__umoddi3+0x1ec>
   28e74:	d8c00017 	ldw	r3,0(sp)
   28e78:	20c5c83a 	sub	r2,r4,r3
   28e7c:	2089803a 	cmpltu	r4,r4,r2
   28e80:	3587c83a 	sub	r3,r6,r22
   28e84:	1907c83a 	sub	r3,r3,r4
   28e88:	80cdc83a 	sub	r6,r16,r3
   28e8c:	1009883a 	mov	r4,r2
   28e90:	d9400117 	ldw	r5,4(sp)
   28e94:	2905c83a 	sub	r2,r5,r4
   28e98:	2887803a 	cmpltu	r3,r5,r2
   28e9c:	30c7c83a 	sub	r3,r6,r3
   28ea0:	d9800317 	ldw	r6,12(sp)
   28ea4:	1484d83a 	srl	r2,r2,r18
   28ea8:	1988983a 	sll	r4,r3,r6
   28eac:	1c86d83a 	srl	r3,r3,r18
   28eb0:	2088b03a 	or	r4,r4,r2
   28eb4:	2011883a 	mov	r8,r4
   28eb8:	1813883a 	mov	r9,r3
   28ebc:	d9000415 	stw	r4,16(sp)
   28ec0:	d8c00515 	stw	r3,20(sp)
   28ec4:	003ed406 	br	28a18 <__umoddi3+0x11c>
   28ec8:	01400604 	movi	r5,24
   28ecc:	2805883a 	mov	r2,r5
   28ed0:	003ea606 	br	2896c <__umoddi3+0x70>
   28ed4:	01400204 	movi	r5,8
   28ed8:	2805883a 	mov	r2,r5
   28edc:	003ea306 	br	2896c <__umoddi3+0x70>
   28ee0:	01400204 	movi	r5,8
   28ee4:	2805883a 	mov	r2,r5
   28ee8:	003edf06 	br	28a68 <__umoddi3+0x16c>
   28eec:	01400204 	movi	r5,8
   28ef0:	2805883a 	mov	r2,r5
   28ef4:	003ef206 	br	28ac0 <__umoddi3+0x1c4>
   28ef8:	01400604 	movi	r5,24
   28efc:	2805883a 	mov	r2,r5
   28f00:	003eef06 	br	28ac0 <__umoddi3+0x1c4>
   28f04:	01400604 	movi	r5,24
   28f08:	2805883a 	mov	r2,r5
   28f0c:	003ed606 	br	28a68 <__umoddi3+0x16c>
   28f10:	153fa92e 	bgeu	r2,r20,28db8 <__umoddi3+0x4bc>
   28f14:	843fffc4 	addi	r16,r16,-1
   28f18:	1585883a 	add	r2,r2,r22
   28f1c:	003fa606 	br	28db8 <__umoddi3+0x4bc>
   28f20:	157f912e 	bgeu	r2,r21,28d68 <__umoddi3+0x46c>
   28f24:	e73fffc4 	addi	fp,fp,-1
   28f28:	1585883a 	add	r2,r2,r22
   28f2c:	003f8e06 	br	28d68 <__umoddi3+0x46c>
   28f30:	157f542e 	bgeu	r2,r21,28c84 <__umoddi3+0x388>
   28f34:	14c5883a 	add	r2,r2,r19
   28f38:	003f5206 	br	28c84 <__umoddi3+0x388>
   28f3c:	14c5883a 	add	r2,r2,r19
   28f40:	003efc06 	br	28b34 <__umoddi3+0x238>
   28f44:	14c5883a 	add	r2,r2,r19
   28f48:	003ea606 	br	289e4 <__umoddi3+0xe8>
   28f4c:	d8800117 	ldw	r2,4(sp)
   28f50:	113fc836 	bltu	r2,r4,28e74 <__umoddi3+0x578>
   28f54:	000d883a 	mov	r6,zero
   28f58:	003fcd06 	br	28e90 <__umoddi3+0x594>

00028f5c <_fpadd_parts>:
   28f5c:	defff804 	addi	sp,sp,-32
   28f60:	dcc00315 	stw	r19,12(sp)
   28f64:	2027883a 	mov	r19,r4
   28f68:	21000017 	ldw	r4,0(r4)
   28f6c:	00c00044 	movi	r3,1
   28f70:	dd400515 	stw	r21,20(sp)
   28f74:	dd000415 	stw	r20,16(sp)
   28f78:	ddc00715 	stw	r23,28(sp)
   28f7c:	dd800615 	stw	r22,24(sp)
   28f80:	dc800215 	stw	r18,8(sp)
   28f84:	dc400115 	stw	r17,4(sp)
   28f88:	dc000015 	stw	r16,0(sp)
   28f8c:	282b883a 	mov	r21,r5
   28f90:	3029883a 	mov	r20,r6
   28f94:	1900632e 	bgeu	r3,r4,29124 <_fpadd_parts+0x1c8>
   28f98:	28800017 	ldw	r2,0(r5)
   28f9c:	1880812e 	bgeu	r3,r2,291a4 <_fpadd_parts+0x248>
   28fa0:	00c00104 	movi	r3,4
   28fa4:	20c0dc26 	beq	r4,r3,29318 <_fpadd_parts+0x3bc>
   28fa8:	10c07e26 	beq	r2,r3,291a4 <_fpadd_parts+0x248>
   28fac:	00c00084 	movi	r3,2
   28fb0:	10c06726 	beq	r2,r3,29150 <_fpadd_parts+0x1f4>
   28fb4:	20c07b26 	beq	r4,r3,291a4 <_fpadd_parts+0x248>
   28fb8:	9dc00217 	ldw	r23,8(r19)
   28fbc:	28c00217 	ldw	r3,8(r5)
   28fc0:	9c400317 	ldw	r17,12(r19)
   28fc4:	2bc00317 	ldw	r15,12(r5)
   28fc8:	b8cdc83a 	sub	r6,r23,r3
   28fcc:	9c800417 	ldw	r18,16(r19)
   28fd0:	2c000417 	ldw	r16,16(r5)
   28fd4:	3009883a 	mov	r4,r6
   28fd8:	30009716 	blt	r6,zero,29238 <_fpadd_parts+0x2dc>
   28fdc:	00800fc4 	movi	r2,63
   28fe0:	11806b16 	blt	r2,r6,29190 <_fpadd_parts+0x234>
   28fe4:	0100a40e 	bge	zero,r4,29278 <_fpadd_parts+0x31c>
   28fe8:	35bff804 	addi	r22,r6,-32
   28fec:	b000bc16 	blt	r22,zero,292e0 <_fpadd_parts+0x384>
   28ff0:	8596d83a 	srl	r11,r16,r22
   28ff4:	0019883a 	mov	r12,zero
   28ff8:	0013883a 	mov	r9,zero
   28ffc:	01000044 	movi	r4,1
   29000:	0015883a 	mov	r10,zero
   29004:	b000be16 	blt	r22,zero,29300 <_fpadd_parts+0x3a4>
   29008:	2590983a 	sll	r8,r4,r22
   2900c:	000f883a 	mov	r7,zero
   29010:	00bfffc4 	movi	r2,-1
   29014:	3889883a 	add	r4,r7,r2
   29018:	408b883a 	add	r5,r8,r2
   2901c:	21cd803a 	cmpltu	r6,r4,r7
   29020:	314b883a 	add	r5,r6,r5
   29024:	7904703a 	and	r2,r15,r4
   29028:	8146703a 	and	r3,r16,r5
   2902c:	10c4b03a 	or	r2,r2,r3
   29030:	10000226 	beq	r2,zero,2903c <_fpadd_parts+0xe0>
   29034:	02400044 	movi	r9,1
   29038:	0015883a 	mov	r10,zero
   2903c:	5a5eb03a 	or	r15,r11,r9
   29040:	62a0b03a 	or	r16,r12,r10
   29044:	99400117 	ldw	r5,4(r19)
   29048:	a8800117 	ldw	r2,4(r21)
   2904c:	28806e26 	beq	r5,r2,29208 <_fpadd_parts+0x2ac>
   29050:	28006626 	beq	r5,zero,291ec <_fpadd_parts+0x290>
   29054:	7c45c83a 	sub	r2,r15,r17
   29058:	7889803a 	cmpltu	r4,r15,r2
   2905c:	8487c83a 	sub	r3,r16,r18
   29060:	1909c83a 	sub	r4,r3,r4
   29064:	100d883a 	mov	r6,r2
   29068:	200f883a 	mov	r7,r4
   2906c:	38007716 	blt	r7,zero,2924c <_fpadd_parts+0x2f0>
   29070:	a5c00215 	stw	r23,8(r20)
   29074:	a1c00415 	stw	r7,16(r20)
   29078:	a0000115 	stw	zero,4(r20)
   2907c:	a1800315 	stw	r6,12(r20)
   29080:	a2000317 	ldw	r8,12(r20)
   29084:	a2400417 	ldw	r9,16(r20)
   29088:	00bfffc4 	movi	r2,-1
   2908c:	408b883a 	add	r5,r8,r2
   29090:	2a09803a 	cmpltu	r4,r5,r8
   29094:	488d883a 	add	r6,r9,r2
   29098:	01c40034 	movhi	r7,4096
   2909c:	39ffffc4 	addi	r7,r7,-1
   290a0:	218d883a 	add	r6,r4,r6
   290a4:	39801736 	bltu	r7,r6,29104 <_fpadd_parts+0x1a8>
   290a8:	31c06526 	beq	r6,r7,29240 <_fpadd_parts+0x2e4>
   290ac:	a3000217 	ldw	r12,8(r20)
   290b0:	4209883a 	add	r4,r8,r8
   290b4:	00bfffc4 	movi	r2,-1
   290b8:	220f803a 	cmpltu	r7,r4,r8
   290bc:	4a4b883a 	add	r5,r9,r9
   290c0:	394f883a 	add	r7,r7,r5
   290c4:	2095883a 	add	r10,r4,r2
   290c8:	3897883a 	add	r11,r7,r2
   290cc:	510d803a 	cmpltu	r6,r10,r4
   290d0:	6099883a 	add	r12,r12,r2
   290d4:	32d7883a 	add	r11,r6,r11
   290d8:	00840034 	movhi	r2,4096
   290dc:	10bfffc4 	addi	r2,r2,-1
   290e0:	2011883a 	mov	r8,r4
   290e4:	3813883a 	mov	r9,r7
   290e8:	a1000315 	stw	r4,12(r20)
   290ec:	a1c00415 	stw	r7,16(r20)
   290f0:	a3000215 	stw	r12,8(r20)
   290f4:	12c00336 	bltu	r2,r11,29104 <_fpadd_parts+0x1a8>
   290f8:	58bfed1e 	bne	r11,r2,290b0 <_fpadd_parts+0x154>
   290fc:	00bfff84 	movi	r2,-2
   29100:	12bfeb2e 	bgeu	r2,r10,290b0 <_fpadd_parts+0x154>
   29104:	a2800417 	ldw	r10,16(r20)
   29108:	008000c4 	movi	r2,3
   2910c:	00c80034 	movhi	r3,8192
   29110:	18ffffc4 	addi	r3,r3,-1
   29114:	a2400317 	ldw	r9,12(r20)
   29118:	a0800015 	stw	r2,0(r20)
   2911c:	1a802336 	bltu	r3,r10,291ac <_fpadd_parts+0x250>
   29120:	a027883a 	mov	r19,r20
   29124:	9805883a 	mov	r2,r19
   29128:	ddc00717 	ldw	r23,28(sp)
   2912c:	dd800617 	ldw	r22,24(sp)
   29130:	dd400517 	ldw	r21,20(sp)
   29134:	dd000417 	ldw	r20,16(sp)
   29138:	dcc00317 	ldw	r19,12(sp)
   2913c:	dc800217 	ldw	r18,8(sp)
   29140:	dc400117 	ldw	r17,4(sp)
   29144:	dc000017 	ldw	r16,0(sp)
   29148:	dec00804 	addi	sp,sp,32
   2914c:	f800283a 	ret
   29150:	20fff41e 	bne	r4,r3,29124 <_fpadd_parts+0x1c8>
   29154:	31000015 	stw	r4,0(r6)
   29158:	98800117 	ldw	r2,4(r19)
   2915c:	30800115 	stw	r2,4(r6)
   29160:	98c00217 	ldw	r3,8(r19)
   29164:	30c00215 	stw	r3,8(r6)
   29168:	98800317 	ldw	r2,12(r19)
   2916c:	30800315 	stw	r2,12(r6)
   29170:	98c00417 	ldw	r3,16(r19)
   29174:	30c00415 	stw	r3,16(r6)
   29178:	98800117 	ldw	r2,4(r19)
   2917c:	28c00117 	ldw	r3,4(r5)
   29180:	3027883a 	mov	r19,r6
   29184:	10c4703a 	and	r2,r2,r3
   29188:	30800115 	stw	r2,4(r6)
   2918c:	003fe506 	br	29124 <_fpadd_parts+0x1c8>
   29190:	1dc02616 	blt	r3,r23,2922c <_fpadd_parts+0x2d0>
   29194:	0023883a 	mov	r17,zero
   29198:	182f883a 	mov	r23,r3
   2919c:	0025883a 	mov	r18,zero
   291a0:	003fa806 	br	29044 <_fpadd_parts+0xe8>
   291a4:	a827883a 	mov	r19,r21
   291a8:	003fde06 	br	29124 <_fpadd_parts+0x1c8>
   291ac:	01800044 	movi	r6,1
   291b0:	500497fa 	slli	r2,r10,31
   291b4:	4808d07a 	srli	r4,r9,1
   291b8:	518ad83a 	srl	r5,r10,r6
   291bc:	a2000217 	ldw	r8,8(r20)
   291c0:	1108b03a 	or	r4,r2,r4
   291c4:	0007883a 	mov	r3,zero
   291c8:	4984703a 	and	r2,r9,r6
   291cc:	208cb03a 	or	r6,r4,r2
   291d0:	28ceb03a 	or	r7,r5,r3
   291d4:	42000044 	addi	r8,r8,1
   291d8:	a027883a 	mov	r19,r20
   291dc:	a1c00415 	stw	r7,16(r20)
   291e0:	a2000215 	stw	r8,8(r20)
   291e4:	a1800315 	stw	r6,12(r20)
   291e8:	003fce06 	br	29124 <_fpadd_parts+0x1c8>
   291ec:	8bc5c83a 	sub	r2,r17,r15
   291f0:	8889803a 	cmpltu	r4,r17,r2
   291f4:	9407c83a 	sub	r3,r18,r16
   291f8:	1909c83a 	sub	r4,r3,r4
   291fc:	100d883a 	mov	r6,r2
   29200:	200f883a 	mov	r7,r4
   29204:	003f9906 	br	2906c <_fpadd_parts+0x110>
   29208:	8bc5883a 	add	r2,r17,r15
   2920c:	1449803a 	cmpltu	r4,r2,r17
   29210:	9407883a 	add	r3,r18,r16
   29214:	20c9883a 	add	r4,r4,r3
   29218:	a1400115 	stw	r5,4(r20)
   2921c:	a5c00215 	stw	r23,8(r20)
   29220:	a0800315 	stw	r2,12(r20)
   29224:	a1000415 	stw	r4,16(r20)
   29228:	003fb606 	br	29104 <_fpadd_parts+0x1a8>
   2922c:	001f883a 	mov	r15,zero
   29230:	0021883a 	mov	r16,zero
   29234:	003f8306 	br	29044 <_fpadd_parts+0xe8>
   29238:	018dc83a 	sub	r6,zero,r6
   2923c:	003f6706 	br	28fdc <_fpadd_parts+0x80>
   29240:	00bfff84 	movi	r2,-2
   29244:	117faf36 	bltu	r2,r5,29104 <_fpadd_parts+0x1a8>
   29248:	003f9806 	br	290ac <_fpadd_parts+0x150>
   2924c:	0005883a 	mov	r2,zero
   29250:	1189c83a 	sub	r4,r2,r6
   29254:	1105803a 	cmpltu	r2,r2,r4
   29258:	01cbc83a 	sub	r5,zero,r7
   2925c:	2885c83a 	sub	r2,r5,r2
   29260:	01800044 	movi	r6,1
   29264:	a1800115 	stw	r6,4(r20)
   29268:	a5c00215 	stw	r23,8(r20)
   2926c:	a1000315 	stw	r4,12(r20)
   29270:	a0800415 	stw	r2,16(r20)
   29274:	003f8206 	br	29080 <_fpadd_parts+0x124>
   29278:	203f7226 	beq	r4,zero,29044 <_fpadd_parts+0xe8>
   2927c:	35bff804 	addi	r22,r6,-32
   29280:	b9af883a 	add	r23,r23,r6
   29284:	b0003116 	blt	r22,zero,2934c <_fpadd_parts+0x3f0>
   29288:	959ad83a 	srl	r13,r18,r22
   2928c:	001d883a 	mov	r14,zero
   29290:	000f883a 	mov	r7,zero
   29294:	01000044 	movi	r4,1
   29298:	0011883a 	mov	r8,zero
   2929c:	b0002516 	blt	r22,zero,29334 <_fpadd_parts+0x3d8>
   292a0:	2594983a 	sll	r10,r4,r22
   292a4:	0013883a 	mov	r9,zero
   292a8:	00bfffc4 	movi	r2,-1
   292ac:	4889883a 	add	r4,r9,r2
   292b0:	508b883a 	add	r5,r10,r2
   292b4:	224d803a 	cmpltu	r6,r4,r9
   292b8:	314b883a 	add	r5,r6,r5
   292bc:	8904703a 	and	r2,r17,r4
   292c0:	9146703a 	and	r3,r18,r5
   292c4:	10c4b03a 	or	r2,r2,r3
   292c8:	10000226 	beq	r2,zero,292d4 <_fpadd_parts+0x378>
   292cc:	01c00044 	movi	r7,1
   292d0:	0011883a 	mov	r8,zero
   292d4:	69e2b03a 	or	r17,r13,r7
   292d8:	7224b03a 	or	r18,r14,r8
   292dc:	003f5906 	br	29044 <_fpadd_parts+0xe8>
   292e0:	8407883a 	add	r3,r16,r16
   292e4:	008007c4 	movi	r2,31
   292e8:	1185c83a 	sub	r2,r2,r6
   292ec:	1886983a 	sll	r3,r3,r2
   292f0:	7996d83a 	srl	r11,r15,r6
   292f4:	8198d83a 	srl	r12,r16,r6
   292f8:	1ad6b03a 	or	r11,r3,r11
   292fc:	003f3e06 	br	28ff8 <_fpadd_parts+0x9c>
   29300:	2006d07a 	srli	r3,r4,1
   29304:	008007c4 	movi	r2,31
   29308:	1185c83a 	sub	r2,r2,r6
   2930c:	1890d83a 	srl	r8,r3,r2
   29310:	218e983a 	sll	r7,r4,r6
   29314:	003f3e06 	br	29010 <_fpadd_parts+0xb4>
   29318:	113f821e 	bne	r2,r4,29124 <_fpadd_parts+0x1c8>
   2931c:	28c00117 	ldw	r3,4(r5)
   29320:	98800117 	ldw	r2,4(r19)
   29324:	10ff7f26 	beq	r2,r3,29124 <_fpadd_parts+0x1c8>
   29328:	04c000f4 	movhi	r19,3
   2932c:	9cf63e04 	addi	r19,r19,-9992
   29330:	003f7c06 	br	29124 <_fpadd_parts+0x1c8>
   29334:	2006d07a 	srli	r3,r4,1
   29338:	008007c4 	movi	r2,31
   2933c:	1185c83a 	sub	r2,r2,r6
   29340:	1894d83a 	srl	r10,r3,r2
   29344:	2192983a 	sll	r9,r4,r6
   29348:	003fd706 	br	292a8 <_fpadd_parts+0x34c>
   2934c:	9487883a 	add	r3,r18,r18
   29350:	008007c4 	movi	r2,31
   29354:	1185c83a 	sub	r2,r2,r6
   29358:	1886983a 	sll	r3,r3,r2
   2935c:	899ad83a 	srl	r13,r17,r6
   29360:	919cd83a 	srl	r14,r18,r6
   29364:	1b5ab03a 	or	r13,r3,r13
   29368:	003fc906 	br	29290 <_fpadd_parts+0x334>

0002936c <__subdf3>:
   2936c:	deffea04 	addi	sp,sp,-88
   29370:	dcc01415 	stw	r19,80(sp)
   29374:	dcc00404 	addi	r19,sp,16
   29378:	2011883a 	mov	r8,r4
   2937c:	2813883a 	mov	r9,r5
   29380:	dc401315 	stw	r17,76(sp)
   29384:	d809883a 	mov	r4,sp
   29388:	980b883a 	mov	r5,r19
   2938c:	dc400904 	addi	r17,sp,36
   29390:	dfc01515 	stw	ra,84(sp)
   29394:	da400115 	stw	r9,4(sp)
   29398:	d9c00315 	stw	r7,12(sp)
   2939c:	da000015 	stw	r8,0(sp)
   293a0:	d9800215 	stw	r6,8(sp)
   293a4:	002a6c40 	call	2a6c4 <__unpack_d>
   293a8:	d9000204 	addi	r4,sp,8
   293ac:	880b883a 	mov	r5,r17
   293b0:	002a6c40 	call	2a6c4 <__unpack_d>
   293b4:	d8800a17 	ldw	r2,40(sp)
   293b8:	880b883a 	mov	r5,r17
   293bc:	9809883a 	mov	r4,r19
   293c0:	d9800e04 	addi	r6,sp,56
   293c4:	1080005c 	xori	r2,r2,1
   293c8:	d8800a15 	stw	r2,40(sp)
   293cc:	0028f5c0 	call	28f5c <_fpadd_parts>
   293d0:	1009883a 	mov	r4,r2
   293d4:	002a3b00 	call	2a3b0 <__pack_d>
   293d8:	dfc01517 	ldw	ra,84(sp)
   293dc:	dcc01417 	ldw	r19,80(sp)
   293e0:	dc401317 	ldw	r17,76(sp)
   293e4:	dec01604 	addi	sp,sp,88
   293e8:	f800283a 	ret

000293ec <__adddf3>:
   293ec:	deffea04 	addi	sp,sp,-88
   293f0:	dcc01415 	stw	r19,80(sp)
   293f4:	dcc00404 	addi	r19,sp,16
   293f8:	2011883a 	mov	r8,r4
   293fc:	2813883a 	mov	r9,r5
   29400:	dc401315 	stw	r17,76(sp)
   29404:	d809883a 	mov	r4,sp
   29408:	980b883a 	mov	r5,r19
   2940c:	dc400904 	addi	r17,sp,36
   29410:	dfc01515 	stw	ra,84(sp)
   29414:	da400115 	stw	r9,4(sp)
   29418:	d9c00315 	stw	r7,12(sp)
   2941c:	da000015 	stw	r8,0(sp)
   29420:	d9800215 	stw	r6,8(sp)
   29424:	002a6c40 	call	2a6c4 <__unpack_d>
   29428:	d9000204 	addi	r4,sp,8
   2942c:	880b883a 	mov	r5,r17
   29430:	002a6c40 	call	2a6c4 <__unpack_d>
   29434:	d9800e04 	addi	r6,sp,56
   29438:	9809883a 	mov	r4,r19
   2943c:	880b883a 	mov	r5,r17
   29440:	0028f5c0 	call	28f5c <_fpadd_parts>
   29444:	1009883a 	mov	r4,r2
   29448:	002a3b00 	call	2a3b0 <__pack_d>
   2944c:	dfc01517 	ldw	ra,84(sp)
   29450:	dcc01417 	ldw	r19,80(sp)
   29454:	dc401317 	ldw	r17,76(sp)
   29458:	dec01604 	addi	sp,sp,88
   2945c:	f800283a 	ret

00029460 <__muldf3>:
   29460:	deffe004 	addi	sp,sp,-128
   29464:	dc401815 	stw	r17,96(sp)
   29468:	dc400404 	addi	r17,sp,16
   2946c:	2011883a 	mov	r8,r4
   29470:	2813883a 	mov	r9,r5
   29474:	dc001715 	stw	r16,92(sp)
   29478:	d809883a 	mov	r4,sp
   2947c:	880b883a 	mov	r5,r17
   29480:	dc000904 	addi	r16,sp,36
   29484:	dfc01f15 	stw	ra,124(sp)
   29488:	da400115 	stw	r9,4(sp)
   2948c:	d9c00315 	stw	r7,12(sp)
   29490:	da000015 	stw	r8,0(sp)
   29494:	d9800215 	stw	r6,8(sp)
   29498:	ddc01e15 	stw	r23,120(sp)
   2949c:	dd801d15 	stw	r22,116(sp)
   294a0:	dd401c15 	stw	r21,112(sp)
   294a4:	dd001b15 	stw	r20,108(sp)
   294a8:	dcc01a15 	stw	r19,104(sp)
   294ac:	dc801915 	stw	r18,100(sp)
   294b0:	002a6c40 	call	2a6c4 <__unpack_d>
   294b4:	d9000204 	addi	r4,sp,8
   294b8:	800b883a 	mov	r5,r16
   294bc:	002a6c40 	call	2a6c4 <__unpack_d>
   294c0:	d9000417 	ldw	r4,16(sp)
   294c4:	00800044 	movi	r2,1
   294c8:	1100102e 	bgeu	r2,r4,2950c <__muldf3+0xac>
   294cc:	d8c00917 	ldw	r3,36(sp)
   294d0:	10c0062e 	bgeu	r2,r3,294ec <__muldf3+0x8c>
   294d4:	00800104 	movi	r2,4
   294d8:	20800a26 	beq	r4,r2,29504 <__muldf3+0xa4>
   294dc:	1880cc26 	beq	r3,r2,29810 <__muldf3+0x3b0>
   294e0:	00800084 	movi	r2,2
   294e4:	20800926 	beq	r4,r2,2950c <__muldf3+0xac>
   294e8:	1880191e 	bne	r3,r2,29550 <__muldf3+0xf0>
   294ec:	d8c00a17 	ldw	r3,40(sp)
   294f0:	d8800517 	ldw	r2,20(sp)
   294f4:	8009883a 	mov	r4,r16
   294f8:	10c4c03a 	cmpne	r2,r2,r3
   294fc:	d8800a15 	stw	r2,40(sp)
   29500:	00000706 	br	29520 <__muldf3+0xc0>
   29504:	00800084 	movi	r2,2
   29508:	1880c326 	beq	r3,r2,29818 <__muldf3+0x3b8>
   2950c:	d8800517 	ldw	r2,20(sp)
   29510:	d8c00a17 	ldw	r3,40(sp)
   29514:	8809883a 	mov	r4,r17
   29518:	10c4c03a 	cmpne	r2,r2,r3
   2951c:	d8800515 	stw	r2,20(sp)
   29520:	002a3b00 	call	2a3b0 <__pack_d>
   29524:	dfc01f17 	ldw	ra,124(sp)
   29528:	ddc01e17 	ldw	r23,120(sp)
   2952c:	dd801d17 	ldw	r22,116(sp)
   29530:	dd401c17 	ldw	r21,112(sp)
   29534:	dd001b17 	ldw	r20,108(sp)
   29538:	dcc01a17 	ldw	r19,104(sp)
   2953c:	dc801917 	ldw	r18,100(sp)
   29540:	dc401817 	ldw	r17,96(sp)
   29544:	dc001717 	ldw	r16,92(sp)
   29548:	dec02004 	addi	sp,sp,128
   2954c:	f800283a 	ret
   29550:	dd800717 	ldw	r22,28(sp)
   29554:	dc800c17 	ldw	r18,48(sp)
   29558:	002b883a 	mov	r21,zero
   2955c:	0023883a 	mov	r17,zero
   29560:	a80b883a 	mov	r5,r21
   29564:	b00d883a 	mov	r6,r22
   29568:	880f883a 	mov	r7,r17
   2956c:	ddc00817 	ldw	r23,32(sp)
   29570:	dcc00d17 	ldw	r19,52(sp)
   29574:	9009883a 	mov	r4,r18
   29578:	002a20c0 	call	2a20c <__muldi3>
   2957c:	001b883a 	mov	r13,zero
   29580:	680f883a 	mov	r7,r13
   29584:	b009883a 	mov	r4,r22
   29588:	000b883a 	mov	r5,zero
   2958c:	980d883a 	mov	r6,r19
   29590:	b82d883a 	mov	r22,r23
   29594:	002f883a 	mov	r23,zero
   29598:	db401615 	stw	r13,88(sp)
   2959c:	d8801315 	stw	r2,76(sp)
   295a0:	d8c01415 	stw	r3,80(sp)
   295a4:	dcc01515 	stw	r19,84(sp)
   295a8:	002a20c0 	call	2a20c <__muldi3>
   295ac:	b00d883a 	mov	r6,r22
   295b0:	000b883a 	mov	r5,zero
   295b4:	9009883a 	mov	r4,r18
   295b8:	b80f883a 	mov	r7,r23
   295bc:	1021883a 	mov	r16,r2
   295c0:	1823883a 	mov	r17,r3
   295c4:	002a20c0 	call	2a20c <__muldi3>
   295c8:	8085883a 	add	r2,r16,r2
   295cc:	140d803a 	cmpltu	r6,r2,r16
   295d0:	88c7883a 	add	r3,r17,r3
   295d4:	30cd883a 	add	r6,r6,r3
   295d8:	1029883a 	mov	r20,r2
   295dc:	302b883a 	mov	r21,r6
   295e0:	da801317 	ldw	r10,76(sp)
   295e4:	dac01417 	ldw	r11,80(sp)
   295e8:	db001517 	ldw	r12,84(sp)
   295ec:	db401617 	ldw	r13,88(sp)
   295f0:	3440612e 	bgeu	r6,r17,29778 <__muldf3+0x318>
   295f4:	0009883a 	mov	r4,zero
   295f8:	5105883a 	add	r2,r10,r4
   295fc:	128d803a 	cmpltu	r6,r2,r10
   29600:	5d07883a 	add	r3,r11,r20
   29604:	30cd883a 	add	r6,r6,r3
   29608:	0021883a 	mov	r16,zero
   2960c:	04400044 	movi	r17,1
   29610:	1025883a 	mov	r18,r2
   29614:	3027883a 	mov	r19,r6
   29618:	32c06236 	bltu	r6,r11,297a4 <__muldf3+0x344>
   2961c:	59807a26 	beq	r11,r6,29808 <__muldf3+0x3a8>
   29620:	680b883a 	mov	r5,r13
   29624:	b80f883a 	mov	r7,r23
   29628:	6009883a 	mov	r4,r12
   2962c:	b00d883a 	mov	r6,r22
   29630:	002a20c0 	call	2a20c <__muldi3>
   29634:	1009883a 	mov	r4,r2
   29638:	000f883a 	mov	r7,zero
   2963c:	1545883a 	add	r2,r2,r21
   29640:	1111803a 	cmpltu	r8,r2,r4
   29644:	19c7883a 	add	r3,r3,r7
   29648:	40c7883a 	add	r3,r8,r3
   2964c:	88cb883a 	add	r5,r17,r3
   29650:	d8c00617 	ldw	r3,24(sp)
   29654:	8089883a 	add	r4,r16,r2
   29658:	d8800b17 	ldw	r2,44(sp)
   2965c:	18c00104 	addi	r3,r3,4
   29660:	240d803a 	cmpltu	r6,r4,r16
   29664:	10c7883a 	add	r3,r2,r3
   29668:	2013883a 	mov	r9,r4
   2966c:	d8800a17 	ldw	r2,40(sp)
   29670:	d9000517 	ldw	r4,20(sp)
   29674:	314d883a 	add	r6,r6,r5
   29678:	3015883a 	mov	r10,r6
   2967c:	2088c03a 	cmpne	r4,r4,r2
   29680:	00880034 	movhi	r2,8192
   29684:	10bfffc4 	addi	r2,r2,-1
   29688:	d9000f15 	stw	r4,60(sp)
   2968c:	d8c01015 	stw	r3,64(sp)
   29690:	1180162e 	bgeu	r2,r6,296ec <__muldf3+0x28c>
   29694:	1811883a 	mov	r8,r3
   29698:	101f883a 	mov	r15,r2
   2969c:	980497fa 	slli	r2,r19,31
   296a0:	9016d07a 	srli	r11,r18,1
   296a4:	500697fa 	slli	r3,r10,31
   296a8:	480cd07a 	srli	r6,r9,1
   296ac:	500ed07a 	srli	r7,r10,1
   296b0:	12d6b03a 	or	r11,r2,r11
   296b4:	00800044 	movi	r2,1
   296b8:	198cb03a 	or	r6,r3,r6
   296bc:	4888703a 	and	r4,r9,r2
   296c0:	9818d07a 	srli	r12,r19,1
   296c4:	001b883a 	mov	r13,zero
   296c8:	03a00034 	movhi	r14,32768
   296cc:	3013883a 	mov	r9,r6
   296d0:	3815883a 	mov	r10,r7
   296d4:	4091883a 	add	r8,r8,r2
   296d8:	20000226 	beq	r4,zero,296e4 <__muldf3+0x284>
   296dc:	5b64b03a 	or	r18,r11,r13
   296e0:	63a6b03a 	or	r19,r12,r14
   296e4:	7abfed36 	bltu	r15,r10,2969c <__muldf3+0x23c>
   296e8:	da001015 	stw	r8,64(sp)
   296ec:	00840034 	movhi	r2,4096
   296f0:	10bfffc4 	addi	r2,r2,-1
   296f4:	12801436 	bltu	r2,r10,29748 <__muldf3+0x2e8>
   296f8:	da001017 	ldw	r8,64(sp)
   296fc:	101f883a 	mov	r15,r2
   29700:	4a45883a 	add	r2,r9,r9
   29704:	124d803a 	cmpltu	r6,r2,r9
   29708:	5287883a 	add	r3,r10,r10
   2970c:	9497883a 	add	r11,r18,r18
   29710:	5c8f803a 	cmpltu	r7,r11,r18
   29714:	9cd9883a 	add	r12,r19,r19
   29718:	01000044 	movi	r4,1
   2971c:	30cd883a 	add	r6,r6,r3
   29720:	3b0f883a 	add	r7,r7,r12
   29724:	423fffc4 	addi	r8,r8,-1
   29728:	1013883a 	mov	r9,r2
   2972c:	3015883a 	mov	r10,r6
   29730:	111ab03a 	or	r13,r2,r4
   29734:	98003016 	blt	r19,zero,297f8 <__muldf3+0x398>
   29738:	5825883a 	mov	r18,r11
   2973c:	3827883a 	mov	r19,r7
   29740:	7abfef2e 	bgeu	r15,r10,29700 <__muldf3+0x2a0>
   29744:	da001015 	stw	r8,64(sp)
   29748:	00803fc4 	movi	r2,255
   2974c:	488e703a 	and	r7,r9,r2
   29750:	00802004 	movi	r2,128
   29754:	0007883a 	mov	r3,zero
   29758:	0011883a 	mov	r8,zero
   2975c:	38801826 	beq	r7,r2,297c0 <__muldf3+0x360>
   29760:	008000c4 	movi	r2,3
   29764:	d9000e04 	addi	r4,sp,56
   29768:	da801215 	stw	r10,72(sp)
   2976c:	d8800e15 	stw	r2,56(sp)
   29770:	da401115 	stw	r9,68(sp)
   29774:	003f6a06 	br	29520 <__muldf3+0xc0>
   29778:	89802126 	beq	r17,r6,29800 <__muldf3+0x3a0>
   2977c:	0009883a 	mov	r4,zero
   29780:	5105883a 	add	r2,r10,r4
   29784:	128d803a 	cmpltu	r6,r2,r10
   29788:	5d07883a 	add	r3,r11,r20
   2978c:	30cd883a 	add	r6,r6,r3
   29790:	0021883a 	mov	r16,zero
   29794:	0023883a 	mov	r17,zero
   29798:	1025883a 	mov	r18,r2
   2979c:	3027883a 	mov	r19,r6
   297a0:	32ff9e2e 	bgeu	r6,r11,2961c <__muldf3+0x1bc>
   297a4:	00800044 	movi	r2,1
   297a8:	8089883a 	add	r4,r16,r2
   297ac:	240d803a 	cmpltu	r6,r4,r16
   297b0:	344d883a 	add	r6,r6,r17
   297b4:	2021883a 	mov	r16,r4
   297b8:	3023883a 	mov	r17,r6
   297bc:	003f9806 	br	29620 <__muldf3+0x1c0>
   297c0:	403fe71e 	bne	r8,zero,29760 <__muldf3+0x300>
   297c4:	01004004 	movi	r4,256
   297c8:	4904703a 	and	r2,r9,r4
   297cc:	10c4b03a 	or	r2,r2,r3
   297d0:	103fe31e 	bne	r2,zero,29760 <__muldf3+0x300>
   297d4:	94c4b03a 	or	r2,r18,r19
   297d8:	103fe126 	beq	r2,zero,29760 <__muldf3+0x300>
   297dc:	49c5883a 	add	r2,r9,r7
   297e0:	1251803a 	cmpltu	r8,r2,r9
   297e4:	4291883a 	add	r8,r8,r10
   297e8:	013fc004 	movi	r4,-256
   297ec:	1112703a 	and	r9,r2,r4
   297f0:	4015883a 	mov	r10,r8
   297f4:	003fda06 	br	29760 <__muldf3+0x300>
   297f8:	6813883a 	mov	r9,r13
   297fc:	003fce06 	br	29738 <__muldf3+0x2d8>
   29800:	143f7c36 	bltu	r2,r16,295f4 <__muldf3+0x194>
   29804:	003fdd06 	br	2977c <__muldf3+0x31c>
   29808:	12bf852e 	bgeu	r2,r10,29620 <__muldf3+0x1c0>
   2980c:	003fe506 	br	297a4 <__muldf3+0x344>
   29810:	00800084 	movi	r2,2
   29814:	20bf351e 	bne	r4,r2,294ec <__muldf3+0x8c>
   29818:	010000f4 	movhi	r4,3
   2981c:	21363e04 	addi	r4,r4,-9992
   29820:	003f3f06 	br	29520 <__muldf3+0xc0>

00029824 <__divdf3>:
   29824:	deffed04 	addi	sp,sp,-76
   29828:	dcc01115 	stw	r19,68(sp)
   2982c:	dcc00404 	addi	r19,sp,16
   29830:	2011883a 	mov	r8,r4
   29834:	2813883a 	mov	r9,r5
   29838:	dc000e15 	stw	r16,56(sp)
   2983c:	d809883a 	mov	r4,sp
   29840:	980b883a 	mov	r5,r19
   29844:	dc000904 	addi	r16,sp,36
   29848:	dfc01215 	stw	ra,72(sp)
   2984c:	da400115 	stw	r9,4(sp)
   29850:	d9c00315 	stw	r7,12(sp)
   29854:	da000015 	stw	r8,0(sp)
   29858:	d9800215 	stw	r6,8(sp)
   2985c:	dc801015 	stw	r18,64(sp)
   29860:	dc400f15 	stw	r17,60(sp)
   29864:	002a6c40 	call	2a6c4 <__unpack_d>
   29868:	d9000204 	addi	r4,sp,8
   2986c:	800b883a 	mov	r5,r16
   29870:	002a6c40 	call	2a6c4 <__unpack_d>
   29874:	d9000417 	ldw	r4,16(sp)
   29878:	00800044 	movi	r2,1
   2987c:	11000b2e 	bgeu	r2,r4,298ac <__divdf3+0x88>
   29880:	d9400917 	ldw	r5,36(sp)
   29884:	1140762e 	bgeu	r2,r5,29a60 <__divdf3+0x23c>
   29888:	d8800517 	ldw	r2,20(sp)
   2988c:	d8c00a17 	ldw	r3,40(sp)
   29890:	01800104 	movi	r6,4
   29894:	10c4f03a 	xor	r2,r2,r3
   29898:	d8800515 	stw	r2,20(sp)
   2989c:	21800226 	beq	r4,r6,298a8 <__divdf3+0x84>
   298a0:	00800084 	movi	r2,2
   298a4:	2080141e 	bne	r4,r2,298f8 <__divdf3+0xd4>
   298a8:	29000926 	beq	r5,r4,298d0 <__divdf3+0xac>
   298ac:	9809883a 	mov	r4,r19
   298b0:	002a3b00 	call	2a3b0 <__pack_d>
   298b4:	dfc01217 	ldw	ra,72(sp)
   298b8:	dcc01117 	ldw	r19,68(sp)
   298bc:	dc801017 	ldw	r18,64(sp)
   298c0:	dc400f17 	ldw	r17,60(sp)
   298c4:	dc000e17 	ldw	r16,56(sp)
   298c8:	dec01304 	addi	sp,sp,76
   298cc:	f800283a 	ret
   298d0:	010000f4 	movhi	r4,3
   298d4:	21363e04 	addi	r4,r4,-9992
   298d8:	002a3b00 	call	2a3b0 <__pack_d>
   298dc:	dfc01217 	ldw	ra,72(sp)
   298e0:	dcc01117 	ldw	r19,68(sp)
   298e4:	dc801017 	ldw	r18,64(sp)
   298e8:	dc400f17 	ldw	r17,60(sp)
   298ec:	dc000e17 	ldw	r16,56(sp)
   298f0:	dec01304 	addi	sp,sp,76
   298f4:	f800283a 	ret
   298f8:	29805b26 	beq	r5,r6,29a68 <__divdf3+0x244>
   298fc:	28802d26 	beq	r5,r2,299b4 <__divdf3+0x190>
   29900:	d8c00617 	ldw	r3,24(sp)
   29904:	d8800b17 	ldw	r2,44(sp)
   29908:	d9c00817 	ldw	r7,32(sp)
   2990c:	dc400d17 	ldw	r17,52(sp)
   29910:	188bc83a 	sub	r5,r3,r2
   29914:	d9800717 	ldw	r6,28(sp)
   29918:	dc000c17 	ldw	r16,48(sp)
   2991c:	d9400615 	stw	r5,24(sp)
   29920:	3c403836 	bltu	r7,r17,29a04 <__divdf3+0x1e0>
   29924:	89c03626 	beq	r17,r7,29a00 <__divdf3+0x1dc>
   29928:	0015883a 	mov	r10,zero
   2992c:	001d883a 	mov	r14,zero
   29930:	02c40034 	movhi	r11,4096
   29934:	001f883a 	mov	r15,zero
   29938:	003f883a 	mov	ra,zero
   2993c:	04800f44 	movi	r18,61
   29940:	00000f06 	br	29980 <__divdf3+0x15c>
   29944:	601d883a 	mov	r14,r12
   29948:	681f883a 	mov	r15,r13
   2994c:	400d883a 	mov	r6,r8
   29950:	100f883a 	mov	r7,r2
   29954:	3191883a 	add	r8,r6,r6
   29958:	5808d07a 	srli	r4,r11,1
   2995c:	4185803a 	cmpltu	r2,r8,r6
   29960:	39d3883a 	add	r9,r7,r7
   29964:	28c6b03a 	or	r3,r5,r3
   29968:	1245883a 	add	r2,r2,r9
   2996c:	1815883a 	mov	r10,r3
   29970:	2017883a 	mov	r11,r4
   29974:	400d883a 	mov	r6,r8
   29978:	100f883a 	mov	r7,r2
   2997c:	fc801726 	beq	ra,r18,299dc <__divdf3+0x1b8>
   29980:	580a97fa 	slli	r5,r11,31
   29984:	5006d07a 	srli	r3,r10,1
   29988:	ffc00044 	addi	ra,ra,1
   2998c:	3c7ff136 	bltu	r7,r17,29954 <__divdf3+0x130>
   29990:	3411c83a 	sub	r8,r6,r16
   29994:	3205803a 	cmpltu	r2,r6,r8
   29998:	3c53c83a 	sub	r9,r7,r17
   2999c:	7298b03a 	or	r12,r14,r10
   299a0:	7adab03a 	or	r13,r15,r11
   299a4:	4885c83a 	sub	r2,r9,r2
   299a8:	89ffe61e 	bne	r17,r7,29944 <__divdf3+0x120>
   299ac:	343fe936 	bltu	r6,r16,29954 <__divdf3+0x130>
   299b0:	003fe406 	br	29944 <__divdf3+0x120>
   299b4:	9809883a 	mov	r4,r19
   299b8:	d9800415 	stw	r6,16(sp)
   299bc:	002a3b00 	call	2a3b0 <__pack_d>
   299c0:	dfc01217 	ldw	ra,72(sp)
   299c4:	dcc01117 	ldw	r19,68(sp)
   299c8:	dc801017 	ldw	r18,64(sp)
   299cc:	dc400f17 	ldw	r17,60(sp)
   299d0:	dc000e17 	ldw	r16,56(sp)
   299d4:	dec01304 	addi	sp,sp,76
   299d8:	f800283a 	ret
   299dc:	00803fc4 	movi	r2,255
   299e0:	7090703a 	and	r8,r14,r2
   299e4:	00802004 	movi	r2,128
   299e8:	0007883a 	mov	r3,zero
   299ec:	0013883a 	mov	r9,zero
   299f0:	40800d26 	beq	r8,r2,29a28 <__divdf3+0x204>
   299f4:	dbc00815 	stw	r15,32(sp)
   299f8:	db800715 	stw	r14,28(sp)
   299fc:	003fab06 	br	298ac <__divdf3+0x88>
   29a00:	343fc92e 	bgeu	r6,r16,29928 <__divdf3+0x104>
   29a04:	3185883a 	add	r2,r6,r6
   29a08:	1189803a 	cmpltu	r4,r2,r6
   29a0c:	39c7883a 	add	r3,r7,r7
   29a10:	20c9883a 	add	r4,r4,r3
   29a14:	297fffc4 	addi	r5,r5,-1
   29a18:	100d883a 	mov	r6,r2
   29a1c:	200f883a 	mov	r7,r4
   29a20:	d9400615 	stw	r5,24(sp)
   29a24:	003fc006 	br	29928 <__divdf3+0x104>
   29a28:	483ff21e 	bne	r9,zero,299f4 <__divdf3+0x1d0>
   29a2c:	01004004 	movi	r4,256
   29a30:	7104703a 	and	r2,r14,r4
   29a34:	10c4b03a 	or	r2,r2,r3
   29a38:	103fee1e 	bne	r2,zero,299f4 <__divdf3+0x1d0>
   29a3c:	31c4b03a 	or	r2,r6,r7
   29a40:	103fec26 	beq	r2,zero,299f4 <__divdf3+0x1d0>
   29a44:	7205883a 	add	r2,r14,r8
   29a48:	1391803a 	cmpltu	r8,r2,r14
   29a4c:	43d1883a 	add	r8,r8,r15
   29a50:	013fc004 	movi	r4,-256
   29a54:	111c703a 	and	r14,r2,r4
   29a58:	401f883a 	mov	r15,r8
   29a5c:	003fe506 	br	299f4 <__divdf3+0x1d0>
   29a60:	8009883a 	mov	r4,r16
   29a64:	003f9206 	br	298b0 <__divdf3+0x8c>
   29a68:	9809883a 	mov	r4,r19
   29a6c:	d8000715 	stw	zero,28(sp)
   29a70:	d8000815 	stw	zero,32(sp)
   29a74:	d8000615 	stw	zero,24(sp)
   29a78:	003f8d06 	br	298b0 <__divdf3+0x8c>

00029a7c <__eqdf2>:
   29a7c:	deffef04 	addi	sp,sp,-68
   29a80:	dc400f15 	stw	r17,60(sp)
   29a84:	dc400404 	addi	r17,sp,16
   29a88:	2005883a 	mov	r2,r4
   29a8c:	2807883a 	mov	r3,r5
   29a90:	dc000e15 	stw	r16,56(sp)
   29a94:	d809883a 	mov	r4,sp
   29a98:	880b883a 	mov	r5,r17
   29a9c:	dc000904 	addi	r16,sp,36
   29aa0:	d8c00115 	stw	r3,4(sp)
   29aa4:	d8800015 	stw	r2,0(sp)
   29aa8:	d9800215 	stw	r6,8(sp)
   29aac:	dfc01015 	stw	ra,64(sp)
   29ab0:	d9c00315 	stw	r7,12(sp)
   29ab4:	002a6c40 	call	2a6c4 <__unpack_d>
   29ab8:	d9000204 	addi	r4,sp,8
   29abc:	800b883a 	mov	r5,r16
   29ac0:	002a6c40 	call	2a6c4 <__unpack_d>
   29ac4:	d8800417 	ldw	r2,16(sp)
   29ac8:	00c00044 	movi	r3,1
   29acc:	180d883a 	mov	r6,r3
   29ad0:	1880062e 	bgeu	r3,r2,29aec <__eqdf2+0x70>
   29ad4:	d8800917 	ldw	r2,36(sp)
   29ad8:	8809883a 	mov	r4,r17
   29adc:	800b883a 	mov	r5,r16
   29ae0:	1880022e 	bgeu	r3,r2,29aec <__eqdf2+0x70>
   29ae4:	002a7fc0 	call	2a7fc <__fpcmp_parts_d>
   29ae8:	100d883a 	mov	r6,r2
   29aec:	3005883a 	mov	r2,r6
   29af0:	dfc01017 	ldw	ra,64(sp)
   29af4:	dc400f17 	ldw	r17,60(sp)
   29af8:	dc000e17 	ldw	r16,56(sp)
   29afc:	dec01104 	addi	sp,sp,68
   29b00:	f800283a 	ret

00029b04 <__nedf2>:
   29b04:	deffef04 	addi	sp,sp,-68
   29b08:	dc400f15 	stw	r17,60(sp)
   29b0c:	dc400404 	addi	r17,sp,16
   29b10:	2005883a 	mov	r2,r4
   29b14:	2807883a 	mov	r3,r5
   29b18:	dc000e15 	stw	r16,56(sp)
   29b1c:	d809883a 	mov	r4,sp
   29b20:	880b883a 	mov	r5,r17
   29b24:	dc000904 	addi	r16,sp,36
   29b28:	d8c00115 	stw	r3,4(sp)
   29b2c:	d8800015 	stw	r2,0(sp)
   29b30:	d9800215 	stw	r6,8(sp)
   29b34:	dfc01015 	stw	ra,64(sp)
   29b38:	d9c00315 	stw	r7,12(sp)
   29b3c:	002a6c40 	call	2a6c4 <__unpack_d>
   29b40:	d9000204 	addi	r4,sp,8
   29b44:	800b883a 	mov	r5,r16
   29b48:	002a6c40 	call	2a6c4 <__unpack_d>
   29b4c:	d8800417 	ldw	r2,16(sp)
   29b50:	00c00044 	movi	r3,1
   29b54:	180d883a 	mov	r6,r3
   29b58:	1880062e 	bgeu	r3,r2,29b74 <__nedf2+0x70>
   29b5c:	d8800917 	ldw	r2,36(sp)
   29b60:	8809883a 	mov	r4,r17
   29b64:	800b883a 	mov	r5,r16
   29b68:	1880022e 	bgeu	r3,r2,29b74 <__nedf2+0x70>
   29b6c:	002a7fc0 	call	2a7fc <__fpcmp_parts_d>
   29b70:	100d883a 	mov	r6,r2
   29b74:	3005883a 	mov	r2,r6
   29b78:	dfc01017 	ldw	ra,64(sp)
   29b7c:	dc400f17 	ldw	r17,60(sp)
   29b80:	dc000e17 	ldw	r16,56(sp)
   29b84:	dec01104 	addi	sp,sp,68
   29b88:	f800283a 	ret

00029b8c <__gtdf2>:
   29b8c:	deffef04 	addi	sp,sp,-68
   29b90:	dc400f15 	stw	r17,60(sp)
   29b94:	dc400404 	addi	r17,sp,16
   29b98:	2005883a 	mov	r2,r4
   29b9c:	2807883a 	mov	r3,r5
   29ba0:	dc000e15 	stw	r16,56(sp)
   29ba4:	d809883a 	mov	r4,sp
   29ba8:	880b883a 	mov	r5,r17
   29bac:	dc000904 	addi	r16,sp,36
   29bb0:	d8c00115 	stw	r3,4(sp)
   29bb4:	d8800015 	stw	r2,0(sp)
   29bb8:	d9800215 	stw	r6,8(sp)
   29bbc:	dfc01015 	stw	ra,64(sp)
   29bc0:	d9c00315 	stw	r7,12(sp)
   29bc4:	002a6c40 	call	2a6c4 <__unpack_d>
   29bc8:	d9000204 	addi	r4,sp,8
   29bcc:	800b883a 	mov	r5,r16
   29bd0:	002a6c40 	call	2a6c4 <__unpack_d>
   29bd4:	d8800417 	ldw	r2,16(sp)
   29bd8:	00c00044 	movi	r3,1
   29bdc:	01bfffc4 	movi	r6,-1
   29be0:	1880062e 	bgeu	r3,r2,29bfc <__gtdf2+0x70>
   29be4:	d8800917 	ldw	r2,36(sp)
   29be8:	8809883a 	mov	r4,r17
   29bec:	800b883a 	mov	r5,r16
   29bf0:	1880022e 	bgeu	r3,r2,29bfc <__gtdf2+0x70>
   29bf4:	002a7fc0 	call	2a7fc <__fpcmp_parts_d>
   29bf8:	100d883a 	mov	r6,r2
   29bfc:	3005883a 	mov	r2,r6
   29c00:	dfc01017 	ldw	ra,64(sp)
   29c04:	dc400f17 	ldw	r17,60(sp)
   29c08:	dc000e17 	ldw	r16,56(sp)
   29c0c:	dec01104 	addi	sp,sp,68
   29c10:	f800283a 	ret

00029c14 <__gedf2>:
   29c14:	deffef04 	addi	sp,sp,-68
   29c18:	dc400f15 	stw	r17,60(sp)
   29c1c:	dc400404 	addi	r17,sp,16
   29c20:	2005883a 	mov	r2,r4
   29c24:	2807883a 	mov	r3,r5
   29c28:	dc000e15 	stw	r16,56(sp)
   29c2c:	d809883a 	mov	r4,sp
   29c30:	880b883a 	mov	r5,r17
   29c34:	dc000904 	addi	r16,sp,36
   29c38:	d8c00115 	stw	r3,4(sp)
   29c3c:	d8800015 	stw	r2,0(sp)
   29c40:	d9800215 	stw	r6,8(sp)
   29c44:	dfc01015 	stw	ra,64(sp)
   29c48:	d9c00315 	stw	r7,12(sp)
   29c4c:	002a6c40 	call	2a6c4 <__unpack_d>
   29c50:	d9000204 	addi	r4,sp,8
   29c54:	800b883a 	mov	r5,r16
   29c58:	002a6c40 	call	2a6c4 <__unpack_d>
   29c5c:	d8800417 	ldw	r2,16(sp)
   29c60:	00c00044 	movi	r3,1
   29c64:	01bfffc4 	movi	r6,-1
   29c68:	1880062e 	bgeu	r3,r2,29c84 <__gedf2+0x70>
   29c6c:	d8800917 	ldw	r2,36(sp)
   29c70:	8809883a 	mov	r4,r17
   29c74:	800b883a 	mov	r5,r16
   29c78:	1880022e 	bgeu	r3,r2,29c84 <__gedf2+0x70>
   29c7c:	002a7fc0 	call	2a7fc <__fpcmp_parts_d>
   29c80:	100d883a 	mov	r6,r2
   29c84:	3005883a 	mov	r2,r6
   29c88:	dfc01017 	ldw	ra,64(sp)
   29c8c:	dc400f17 	ldw	r17,60(sp)
   29c90:	dc000e17 	ldw	r16,56(sp)
   29c94:	dec01104 	addi	sp,sp,68
   29c98:	f800283a 	ret

00029c9c <__ltdf2>:
   29c9c:	deffef04 	addi	sp,sp,-68
   29ca0:	dc400f15 	stw	r17,60(sp)
   29ca4:	dc400404 	addi	r17,sp,16
   29ca8:	2005883a 	mov	r2,r4
   29cac:	2807883a 	mov	r3,r5
   29cb0:	dc000e15 	stw	r16,56(sp)
   29cb4:	d809883a 	mov	r4,sp
   29cb8:	880b883a 	mov	r5,r17
   29cbc:	dc000904 	addi	r16,sp,36
   29cc0:	d8c00115 	stw	r3,4(sp)
   29cc4:	d8800015 	stw	r2,0(sp)
   29cc8:	d9800215 	stw	r6,8(sp)
   29ccc:	dfc01015 	stw	ra,64(sp)
   29cd0:	d9c00315 	stw	r7,12(sp)
   29cd4:	002a6c40 	call	2a6c4 <__unpack_d>
   29cd8:	d9000204 	addi	r4,sp,8
   29cdc:	800b883a 	mov	r5,r16
   29ce0:	002a6c40 	call	2a6c4 <__unpack_d>
   29ce4:	d8800417 	ldw	r2,16(sp)
   29ce8:	00c00044 	movi	r3,1
   29cec:	180d883a 	mov	r6,r3
   29cf0:	1880062e 	bgeu	r3,r2,29d0c <__ltdf2+0x70>
   29cf4:	d8800917 	ldw	r2,36(sp)
   29cf8:	8809883a 	mov	r4,r17
   29cfc:	800b883a 	mov	r5,r16
   29d00:	1880022e 	bgeu	r3,r2,29d0c <__ltdf2+0x70>
   29d04:	002a7fc0 	call	2a7fc <__fpcmp_parts_d>
   29d08:	100d883a 	mov	r6,r2
   29d0c:	3005883a 	mov	r2,r6
   29d10:	dfc01017 	ldw	ra,64(sp)
   29d14:	dc400f17 	ldw	r17,60(sp)
   29d18:	dc000e17 	ldw	r16,56(sp)
   29d1c:	dec01104 	addi	sp,sp,68
   29d20:	f800283a 	ret

00029d24 <__floatsidf>:
   29d24:	2006d7fa 	srli	r3,r4,31
   29d28:	defff604 	addi	sp,sp,-40
   29d2c:	008000c4 	movi	r2,3
   29d30:	dfc00915 	stw	ra,36(sp)
   29d34:	dcc00815 	stw	r19,32(sp)
   29d38:	dc800715 	stw	r18,28(sp)
   29d3c:	dc400615 	stw	r17,24(sp)
   29d40:	dc000515 	stw	r16,20(sp)
   29d44:	d8800015 	stw	r2,0(sp)
   29d48:	d8c00115 	stw	r3,4(sp)
   29d4c:	20000f1e 	bne	r4,zero,29d8c <__floatsidf+0x68>
   29d50:	00800084 	movi	r2,2
   29d54:	d8800015 	stw	r2,0(sp)
   29d58:	d809883a 	mov	r4,sp
   29d5c:	002a3b00 	call	2a3b0 <__pack_d>
   29d60:	1009883a 	mov	r4,r2
   29d64:	180b883a 	mov	r5,r3
   29d68:	2005883a 	mov	r2,r4
   29d6c:	2807883a 	mov	r3,r5
   29d70:	dfc00917 	ldw	ra,36(sp)
   29d74:	dcc00817 	ldw	r19,32(sp)
   29d78:	dc800717 	ldw	r18,28(sp)
   29d7c:	dc400617 	ldw	r17,24(sp)
   29d80:	dc000517 	ldw	r16,20(sp)
   29d84:	dec00a04 	addi	sp,sp,40
   29d88:	f800283a 	ret
   29d8c:	00800f04 	movi	r2,60
   29d90:	1807003a 	cmpeq	r3,r3,zero
   29d94:	d8800215 	stw	r2,8(sp)
   29d98:	18001126 	beq	r3,zero,29de0 <__floatsidf+0xbc>
   29d9c:	0027883a 	mov	r19,zero
   29da0:	2025883a 	mov	r18,r4
   29da4:	d9000315 	stw	r4,12(sp)
   29da8:	dcc00415 	stw	r19,16(sp)
   29dac:	002a3300 	call	2a330 <__clzsi2>
   29db0:	11000744 	addi	r4,r2,29
   29db4:	013fe80e 	bge	zero,r4,29d58 <__floatsidf+0x34>
   29db8:	10bfff44 	addi	r2,r2,-3
   29dbc:	10000c16 	blt	r2,zero,29df0 <__floatsidf+0xcc>
   29dc0:	90a2983a 	sll	r17,r18,r2
   29dc4:	0021883a 	mov	r16,zero
   29dc8:	d8800217 	ldw	r2,8(sp)
   29dcc:	dc400415 	stw	r17,16(sp)
   29dd0:	dc000315 	stw	r16,12(sp)
   29dd4:	1105c83a 	sub	r2,r2,r4
   29dd8:	d8800215 	stw	r2,8(sp)
   29ddc:	003fde06 	br	29d58 <__floatsidf+0x34>
   29de0:	00a00034 	movhi	r2,32768
   29de4:	20800a26 	beq	r4,r2,29e10 <__floatsidf+0xec>
   29de8:	0109c83a 	sub	r4,zero,r4
   29dec:	003feb06 	br	29d9c <__floatsidf+0x78>
   29df0:	9006d07a 	srli	r3,r18,1
   29df4:	008007c4 	movi	r2,31
   29df8:	1105c83a 	sub	r2,r2,r4
   29dfc:	1886d83a 	srl	r3,r3,r2
   29e00:	9922983a 	sll	r17,r19,r4
   29e04:	9120983a 	sll	r16,r18,r4
   29e08:	1c62b03a 	or	r17,r3,r17
   29e0c:	003fee06 	br	29dc8 <__floatsidf+0xa4>
   29e10:	0009883a 	mov	r4,zero
   29e14:	01707834 	movhi	r5,49632
   29e18:	003fd306 	br	29d68 <__floatsidf+0x44>

00029e1c <__fixdfsi>:
   29e1c:	defff804 	addi	sp,sp,-32
   29e20:	2005883a 	mov	r2,r4
   29e24:	2807883a 	mov	r3,r5
   29e28:	d809883a 	mov	r4,sp
   29e2c:	d9400204 	addi	r5,sp,8
   29e30:	d8c00115 	stw	r3,4(sp)
   29e34:	d8800015 	stw	r2,0(sp)
   29e38:	dfc00715 	stw	ra,28(sp)
   29e3c:	002a6c40 	call	2a6c4 <__unpack_d>
   29e40:	d8c00217 	ldw	r3,8(sp)
   29e44:	00800084 	movi	r2,2
   29e48:	1880051e 	bne	r3,r2,29e60 <__fixdfsi+0x44>
   29e4c:	0007883a 	mov	r3,zero
   29e50:	1805883a 	mov	r2,r3
   29e54:	dfc00717 	ldw	ra,28(sp)
   29e58:	dec00804 	addi	sp,sp,32
   29e5c:	f800283a 	ret
   29e60:	00800044 	movi	r2,1
   29e64:	10fff92e 	bgeu	r2,r3,29e4c <__fixdfsi+0x30>
   29e68:	00800104 	movi	r2,4
   29e6c:	18800426 	beq	r3,r2,29e80 <__fixdfsi+0x64>
   29e70:	d8c00417 	ldw	r3,16(sp)
   29e74:	183ff516 	blt	r3,zero,29e4c <__fixdfsi+0x30>
   29e78:	00800784 	movi	r2,30
   29e7c:	10c0080e 	bge	r2,r3,29ea0 <__fixdfsi+0x84>
   29e80:	d8800317 	ldw	r2,12(sp)
   29e84:	1000121e 	bne	r2,zero,29ed0 <__fixdfsi+0xb4>
   29e88:	00e00034 	movhi	r3,32768
   29e8c:	18ffffc4 	addi	r3,r3,-1
   29e90:	1805883a 	mov	r2,r3
   29e94:	dfc00717 	ldw	ra,28(sp)
   29e98:	dec00804 	addi	sp,sp,32
   29e9c:	f800283a 	ret
   29ea0:	00800f04 	movi	r2,60
   29ea4:	10d1c83a 	sub	r8,r2,r3
   29ea8:	40bff804 	addi	r2,r8,-32
   29eac:	d9800517 	ldw	r6,20(sp)
   29eb0:	d9c00617 	ldw	r7,24(sp)
   29eb4:	10000816 	blt	r2,zero,29ed8 <__fixdfsi+0xbc>
   29eb8:	3888d83a 	srl	r4,r7,r2
   29ebc:	d8800317 	ldw	r2,12(sp)
   29ec0:	2007883a 	mov	r3,r4
   29ec4:	103fe226 	beq	r2,zero,29e50 <__fixdfsi+0x34>
   29ec8:	0107c83a 	sub	r3,zero,r4
   29ecc:	003fe006 	br	29e50 <__fixdfsi+0x34>
   29ed0:	00e00034 	movhi	r3,32768
   29ed4:	003fde06 	br	29e50 <__fixdfsi+0x34>
   29ed8:	39c7883a 	add	r3,r7,r7
   29edc:	008007c4 	movi	r2,31
   29ee0:	1205c83a 	sub	r2,r2,r8
   29ee4:	1886983a 	sll	r3,r3,r2
   29ee8:	3208d83a 	srl	r4,r6,r8
   29eec:	1908b03a 	or	r4,r3,r4
   29ef0:	003ff206 	br	29ebc <__fixdfsi+0xa0>

00029ef4 <__floatunsidf>:
   29ef4:	defff204 	addi	sp,sp,-56
   29ef8:	dfc00d15 	stw	ra,52(sp)
   29efc:	ddc00c15 	stw	r23,48(sp)
   29f00:	dd800b15 	stw	r22,44(sp)
   29f04:	dd400a15 	stw	r21,40(sp)
   29f08:	dd000915 	stw	r20,36(sp)
   29f0c:	dcc00815 	stw	r19,32(sp)
   29f10:	dc800715 	stw	r18,28(sp)
   29f14:	dc400615 	stw	r17,24(sp)
   29f18:	dc000515 	stw	r16,20(sp)
   29f1c:	d8000115 	stw	zero,4(sp)
   29f20:	20000f1e 	bne	r4,zero,29f60 <__floatunsidf+0x6c>
   29f24:	00800084 	movi	r2,2
   29f28:	d8800015 	stw	r2,0(sp)
   29f2c:	d809883a 	mov	r4,sp
   29f30:	002a3b00 	call	2a3b0 <__pack_d>
   29f34:	dfc00d17 	ldw	ra,52(sp)
   29f38:	ddc00c17 	ldw	r23,48(sp)
   29f3c:	dd800b17 	ldw	r22,44(sp)
   29f40:	dd400a17 	ldw	r21,40(sp)
   29f44:	dd000917 	ldw	r20,36(sp)
   29f48:	dcc00817 	ldw	r19,32(sp)
   29f4c:	dc800717 	ldw	r18,28(sp)
   29f50:	dc400617 	ldw	r17,24(sp)
   29f54:	dc000517 	ldw	r16,20(sp)
   29f58:	dec00e04 	addi	sp,sp,56
   29f5c:	f800283a 	ret
   29f60:	008000c4 	movi	r2,3
   29f64:	00c00f04 	movi	r3,60
   29f68:	002f883a 	mov	r23,zero
   29f6c:	202d883a 	mov	r22,r4
   29f70:	d8800015 	stw	r2,0(sp)
   29f74:	d8c00215 	stw	r3,8(sp)
   29f78:	d9000315 	stw	r4,12(sp)
   29f7c:	ddc00415 	stw	r23,16(sp)
   29f80:	002a3300 	call	2a330 <__clzsi2>
   29f84:	12400744 	addi	r9,r2,29
   29f88:	48000b16 	blt	r9,zero,29fb8 <__floatunsidf+0xc4>
   29f8c:	483fe726 	beq	r9,zero,29f2c <__floatunsidf+0x38>
   29f90:	10bfff44 	addi	r2,r2,-3
   29f94:	10002e16 	blt	r2,zero,2a050 <__floatunsidf+0x15c>
   29f98:	b0a2983a 	sll	r17,r22,r2
   29f9c:	0021883a 	mov	r16,zero
   29fa0:	d8800217 	ldw	r2,8(sp)
   29fa4:	dc400415 	stw	r17,16(sp)
   29fa8:	dc000315 	stw	r16,12(sp)
   29fac:	1245c83a 	sub	r2,r2,r9
   29fb0:	d8800215 	stw	r2,8(sp)
   29fb4:	003fdd06 	br	29f2c <__floatunsidf+0x38>
   29fb8:	0255c83a 	sub	r10,zero,r9
   29fbc:	51bff804 	addi	r6,r10,-32
   29fc0:	30001b16 	blt	r6,zero,2a030 <__floatunsidf+0x13c>
   29fc4:	b9a8d83a 	srl	r20,r23,r6
   29fc8:	002b883a 	mov	r21,zero
   29fcc:	000f883a 	mov	r7,zero
   29fd0:	01000044 	movi	r4,1
   29fd4:	0011883a 	mov	r8,zero
   29fd8:	30002516 	blt	r6,zero,2a070 <__floatunsidf+0x17c>
   29fdc:	21a6983a 	sll	r19,r4,r6
   29fe0:	0025883a 	mov	r18,zero
   29fe4:	00bfffc4 	movi	r2,-1
   29fe8:	9089883a 	add	r4,r18,r2
   29fec:	988b883a 	add	r5,r19,r2
   29ff0:	248d803a 	cmpltu	r6,r4,r18
   29ff4:	314b883a 	add	r5,r6,r5
   29ff8:	b104703a 	and	r2,r22,r4
   29ffc:	b946703a 	and	r3,r23,r5
   2a000:	10c4b03a 	or	r2,r2,r3
   2a004:	10000226 	beq	r2,zero,2a010 <__floatunsidf+0x11c>
   2a008:	01c00044 	movi	r7,1
   2a00c:	0011883a 	mov	r8,zero
   2a010:	d9000217 	ldw	r4,8(sp)
   2a014:	a1c4b03a 	or	r2,r20,r7
   2a018:	aa06b03a 	or	r3,r21,r8
   2a01c:	2249c83a 	sub	r4,r4,r9
   2a020:	d8c00415 	stw	r3,16(sp)
   2a024:	d9000215 	stw	r4,8(sp)
   2a028:	d8800315 	stw	r2,12(sp)
   2a02c:	003fbf06 	br	29f2c <__floatunsidf+0x38>
   2a030:	bdc7883a 	add	r3,r23,r23
   2a034:	008007c4 	movi	r2,31
   2a038:	1285c83a 	sub	r2,r2,r10
   2a03c:	1886983a 	sll	r3,r3,r2
   2a040:	b2a8d83a 	srl	r20,r22,r10
   2a044:	baaad83a 	srl	r21,r23,r10
   2a048:	1d28b03a 	or	r20,r3,r20
   2a04c:	003fdf06 	br	29fcc <__floatunsidf+0xd8>
   2a050:	b006d07a 	srli	r3,r22,1
   2a054:	008007c4 	movi	r2,31
   2a058:	1245c83a 	sub	r2,r2,r9
   2a05c:	1886d83a 	srl	r3,r3,r2
   2a060:	ba62983a 	sll	r17,r23,r9
   2a064:	b260983a 	sll	r16,r22,r9
   2a068:	1c62b03a 	or	r17,r3,r17
   2a06c:	003fcc06 	br	29fa0 <__floatunsidf+0xac>
   2a070:	2006d07a 	srli	r3,r4,1
   2a074:	008007c4 	movi	r2,31
   2a078:	1285c83a 	sub	r2,r2,r10
   2a07c:	18a6d83a 	srl	r19,r3,r2
   2a080:	22a4983a 	sll	r18,r4,r10
   2a084:	003fd706 	br	29fe4 <__floatunsidf+0xf0>

0002a088 <udivmodsi4>:
   2a088:	29001b2e 	bgeu	r5,r4,2a0f8 <udivmodsi4+0x70>
   2a08c:	28001a16 	blt	r5,zero,2a0f8 <udivmodsi4+0x70>
   2a090:	00800044 	movi	r2,1
   2a094:	0007883a 	mov	r3,zero
   2a098:	01c007c4 	movi	r7,31
   2a09c:	00000306 	br	2a0ac <udivmodsi4+0x24>
   2a0a0:	19c01326 	beq	r3,r7,2a0f0 <udivmodsi4+0x68>
   2a0a4:	18c00044 	addi	r3,r3,1
   2a0a8:	28000416 	blt	r5,zero,2a0bc <udivmodsi4+0x34>
   2a0ac:	294b883a 	add	r5,r5,r5
   2a0b0:	1085883a 	add	r2,r2,r2
   2a0b4:	293ffa36 	bltu	r5,r4,2a0a0 <udivmodsi4+0x18>
   2a0b8:	10000d26 	beq	r2,zero,2a0f0 <udivmodsi4+0x68>
   2a0bc:	0007883a 	mov	r3,zero
   2a0c0:	21400236 	bltu	r4,r5,2a0cc <udivmodsi4+0x44>
   2a0c4:	2149c83a 	sub	r4,r4,r5
   2a0c8:	1886b03a 	or	r3,r3,r2
   2a0cc:	1004d07a 	srli	r2,r2,1
   2a0d0:	280ad07a 	srli	r5,r5,1
   2a0d4:	103ffa1e 	bne	r2,zero,2a0c0 <udivmodsi4+0x38>
   2a0d8:	30000226 	beq	r6,zero,2a0e4 <udivmodsi4+0x5c>
   2a0dc:	2005883a 	mov	r2,r4
   2a0e0:	f800283a 	ret
   2a0e4:	1809883a 	mov	r4,r3
   2a0e8:	2005883a 	mov	r2,r4
   2a0ec:	f800283a 	ret
   2a0f0:	0007883a 	mov	r3,zero
   2a0f4:	003ff806 	br	2a0d8 <udivmodsi4+0x50>
   2a0f8:	00800044 	movi	r2,1
   2a0fc:	0007883a 	mov	r3,zero
   2a100:	003fef06 	br	2a0c0 <udivmodsi4+0x38>

0002a104 <__divsi3>:
   2a104:	defffe04 	addi	sp,sp,-8
   2a108:	dc000015 	stw	r16,0(sp)
   2a10c:	dfc00115 	stw	ra,4(sp)
   2a110:	0021883a 	mov	r16,zero
   2a114:	20000c16 	blt	r4,zero,2a148 <__divsi3+0x44>
   2a118:	000d883a 	mov	r6,zero
   2a11c:	28000e16 	blt	r5,zero,2a158 <__divsi3+0x54>
   2a120:	002a0880 	call	2a088 <udivmodsi4>
   2a124:	1007883a 	mov	r3,r2
   2a128:	8005003a 	cmpeq	r2,r16,zero
   2a12c:	1000011e 	bne	r2,zero,2a134 <__divsi3+0x30>
   2a130:	00c7c83a 	sub	r3,zero,r3
   2a134:	1805883a 	mov	r2,r3
   2a138:	dfc00117 	ldw	ra,4(sp)
   2a13c:	dc000017 	ldw	r16,0(sp)
   2a140:	dec00204 	addi	sp,sp,8
   2a144:	f800283a 	ret
   2a148:	0109c83a 	sub	r4,zero,r4
   2a14c:	04000044 	movi	r16,1
   2a150:	000d883a 	mov	r6,zero
   2a154:	283ff20e 	bge	r5,zero,2a120 <__divsi3+0x1c>
   2a158:	014bc83a 	sub	r5,zero,r5
   2a15c:	8021003a 	cmpeq	r16,r16,zero
   2a160:	003fef06 	br	2a120 <__divsi3+0x1c>

0002a164 <__modsi3>:
   2a164:	deffff04 	addi	sp,sp,-4
   2a168:	dfc00015 	stw	ra,0(sp)
   2a16c:	01800044 	movi	r6,1
   2a170:	2807883a 	mov	r3,r5
   2a174:	20000416 	blt	r4,zero,2a188 <__modsi3+0x24>
   2a178:	28000c16 	blt	r5,zero,2a1ac <__modsi3+0x48>
   2a17c:	dfc00017 	ldw	ra,0(sp)
   2a180:	dec00104 	addi	sp,sp,4
   2a184:	002a0881 	jmpi	2a088 <udivmodsi4>
   2a188:	0109c83a 	sub	r4,zero,r4
   2a18c:	28000b16 	blt	r5,zero,2a1bc <__modsi3+0x58>
   2a190:	180b883a 	mov	r5,r3
   2a194:	01800044 	movi	r6,1
   2a198:	002a0880 	call	2a088 <udivmodsi4>
   2a19c:	0085c83a 	sub	r2,zero,r2
   2a1a0:	dfc00017 	ldw	ra,0(sp)
   2a1a4:	dec00104 	addi	sp,sp,4
   2a1a8:	f800283a 	ret
   2a1ac:	014bc83a 	sub	r5,zero,r5
   2a1b0:	dfc00017 	ldw	ra,0(sp)
   2a1b4:	dec00104 	addi	sp,sp,4
   2a1b8:	002a0881 	jmpi	2a088 <udivmodsi4>
   2a1bc:	0147c83a 	sub	r3,zero,r5
   2a1c0:	003ff306 	br	2a190 <__modsi3+0x2c>

0002a1c4 <__udivsi3>:
   2a1c4:	000d883a 	mov	r6,zero
   2a1c8:	002a0881 	jmpi	2a088 <udivmodsi4>

0002a1cc <__umodsi3>:
   2a1cc:	01800044 	movi	r6,1
   2a1d0:	002a0881 	jmpi	2a088 <udivmodsi4>

0002a1d4 <__mulsi3>:
   2a1d4:	20000a26 	beq	r4,zero,2a200 <__mulsi3+0x2c>
   2a1d8:	0007883a 	mov	r3,zero
   2a1dc:	2080004c 	andi	r2,r4,1
   2a1e0:	1005003a 	cmpeq	r2,r2,zero
   2a1e4:	2008d07a 	srli	r4,r4,1
   2a1e8:	1000011e 	bne	r2,zero,2a1f0 <__mulsi3+0x1c>
   2a1ec:	1947883a 	add	r3,r3,r5
   2a1f0:	294b883a 	add	r5,r5,r5
   2a1f4:	203ff91e 	bne	r4,zero,2a1dc <__mulsi3+0x8>
   2a1f8:	1805883a 	mov	r2,r3
   2a1fc:	f800283a 	ret
   2a200:	0007883a 	mov	r3,zero
   2a204:	1805883a 	mov	r2,r3
   2a208:	f800283a 	ret

0002a20c <__muldi3>:
   2a20c:	defff204 	addi	sp,sp,-56
   2a210:	df000c15 	stw	fp,48(sp)
   2a214:	3038d43a 	srli	fp,r6,16
   2a218:	dd000815 	stw	r20,32(sp)
   2a21c:	dc400515 	stw	r17,20(sp)
   2a220:	2028d43a 	srli	r20,r4,16
   2a224:	247fffcc 	andi	r17,r4,65535
   2a228:	dc000415 	stw	r16,16(sp)
   2a22c:	343fffcc 	andi	r16,r6,65535
   2a230:	dcc00715 	stw	r19,28(sp)
   2a234:	d9000015 	stw	r4,0(sp)
   2a238:	2827883a 	mov	r19,r5
   2a23c:	8809883a 	mov	r4,r17
   2a240:	d9400115 	stw	r5,4(sp)
   2a244:	800b883a 	mov	r5,r16
   2a248:	d9800215 	stw	r6,8(sp)
   2a24c:	dfc00d15 	stw	ra,52(sp)
   2a250:	d9c00315 	stw	r7,12(sp)
   2a254:	dd800a15 	stw	r22,40(sp)
   2a258:	dd400915 	stw	r21,36(sp)
   2a25c:	302d883a 	mov	r22,r6
   2a260:	ddc00b15 	stw	r23,44(sp)
   2a264:	dc800615 	stw	r18,24(sp)
   2a268:	002a1d40 	call	2a1d4 <__mulsi3>
   2a26c:	8809883a 	mov	r4,r17
   2a270:	e00b883a 	mov	r5,fp
   2a274:	102b883a 	mov	r21,r2
   2a278:	002a1d40 	call	2a1d4 <__mulsi3>
   2a27c:	800b883a 	mov	r5,r16
   2a280:	a009883a 	mov	r4,r20
   2a284:	1023883a 	mov	r17,r2
   2a288:	002a1d40 	call	2a1d4 <__mulsi3>
   2a28c:	a009883a 	mov	r4,r20
   2a290:	e00b883a 	mov	r5,fp
   2a294:	1021883a 	mov	r16,r2
   2a298:	002a1d40 	call	2a1d4 <__mulsi3>
   2a29c:	a8ffffcc 	andi	r3,r21,65535
   2a2a0:	a82ad43a 	srli	r21,r21,16
   2a2a4:	8c23883a 	add	r17,r17,r16
   2a2a8:	1011883a 	mov	r8,r2
   2a2ac:	ac6b883a 	add	r21,r21,r17
   2a2b0:	a804943a 	slli	r2,r21,16
   2a2b4:	b009883a 	mov	r4,r22
   2a2b8:	980b883a 	mov	r5,r19
   2a2bc:	10c7883a 	add	r3,r2,r3
   2a2c0:	a812d43a 	srli	r9,r21,16
   2a2c4:	180d883a 	mov	r6,r3
   2a2c8:	ac00022e 	bgeu	r21,r16,2a2d4 <__muldi3+0xc8>
   2a2cc:	00800074 	movhi	r2,1
   2a2d0:	4091883a 	add	r8,r8,r2
   2a2d4:	4267883a 	add	r19,r8,r9
   2a2d8:	302d883a 	mov	r22,r6
   2a2dc:	002a1d40 	call	2a1d4 <__mulsi3>
   2a2e0:	d9400317 	ldw	r5,12(sp)
   2a2e4:	d9000017 	ldw	r4,0(sp)
   2a2e8:	1023883a 	mov	r17,r2
   2a2ec:	002a1d40 	call	2a1d4 <__mulsi3>
   2a2f0:	14cb883a 	add	r5,r2,r19
   2a2f4:	894b883a 	add	r5,r17,r5
   2a2f8:	b005883a 	mov	r2,r22
   2a2fc:	2807883a 	mov	r3,r5
   2a300:	dfc00d17 	ldw	ra,52(sp)
   2a304:	df000c17 	ldw	fp,48(sp)
   2a308:	ddc00b17 	ldw	r23,44(sp)
   2a30c:	dd800a17 	ldw	r22,40(sp)
   2a310:	dd400917 	ldw	r21,36(sp)
   2a314:	dd000817 	ldw	r20,32(sp)
   2a318:	dcc00717 	ldw	r19,28(sp)
   2a31c:	dc800617 	ldw	r18,24(sp)
   2a320:	dc400517 	ldw	r17,20(sp)
   2a324:	dc000417 	ldw	r16,16(sp)
   2a328:	dec00e04 	addi	sp,sp,56
   2a32c:	f800283a 	ret

0002a330 <__clzsi2>:
   2a330:	00bfffd4 	movui	r2,65535
   2a334:	11000e36 	bltu	r2,r4,2a370 <__clzsi2+0x40>
   2a338:	00803fc4 	movi	r2,255
   2a33c:	01400204 	movi	r5,8
   2a340:	0007883a 	mov	r3,zero
   2a344:	11001036 	bltu	r2,r4,2a388 <__clzsi2+0x58>
   2a348:	000b883a 	mov	r5,zero
   2a34c:	20c6d83a 	srl	r3,r4,r3
   2a350:	008000f4 	movhi	r2,3
   2a354:	10b64304 	addi	r2,r2,-9972
   2a358:	1887883a 	add	r3,r3,r2
   2a35c:	18800003 	ldbu	r2,0(r3)
   2a360:	00c00804 	movi	r3,32
   2a364:	2885883a 	add	r2,r5,r2
   2a368:	1885c83a 	sub	r2,r3,r2
   2a36c:	f800283a 	ret
   2a370:	01400404 	movi	r5,16
   2a374:	00804034 	movhi	r2,256
   2a378:	10bfffc4 	addi	r2,r2,-1
   2a37c:	2807883a 	mov	r3,r5
   2a380:	113ff22e 	bgeu	r2,r4,2a34c <__clzsi2+0x1c>
   2a384:	01400604 	movi	r5,24
   2a388:	2807883a 	mov	r3,r5
   2a38c:	20c6d83a 	srl	r3,r4,r3
   2a390:	008000f4 	movhi	r2,3
   2a394:	10b64304 	addi	r2,r2,-9972
   2a398:	1887883a 	add	r3,r3,r2
   2a39c:	18800003 	ldbu	r2,0(r3)
   2a3a0:	00c00804 	movi	r3,32
   2a3a4:	2885883a 	add	r2,r5,r2
   2a3a8:	1885c83a 	sub	r2,r3,r2
   2a3ac:	f800283a 	ret

0002a3b0 <__pack_d>:
   2a3b0:	20c00017 	ldw	r3,0(r4)
   2a3b4:	defffd04 	addi	sp,sp,-12
   2a3b8:	dc000015 	stw	r16,0(sp)
   2a3bc:	dc800215 	stw	r18,8(sp)
   2a3c0:	dc400115 	stw	r17,4(sp)
   2a3c4:	00800044 	movi	r2,1
   2a3c8:	22000317 	ldw	r8,12(r4)
   2a3cc:	001f883a 	mov	r15,zero
   2a3d0:	22400417 	ldw	r9,16(r4)
   2a3d4:	24000117 	ldw	r16,4(r4)
   2a3d8:	10c0552e 	bgeu	r2,r3,2a530 <__pack_d+0x180>
   2a3dc:	00800104 	movi	r2,4
   2a3e0:	18804f26 	beq	r3,r2,2a520 <__pack_d+0x170>
   2a3e4:	00800084 	movi	r2,2
   2a3e8:	18800226 	beq	r3,r2,2a3f4 <__pack_d+0x44>
   2a3ec:	4244b03a 	or	r2,r8,r9
   2a3f0:	10001a1e 	bne	r2,zero,2a45c <__pack_d+0xac>
   2a3f4:	000d883a 	mov	r6,zero
   2a3f8:	000f883a 	mov	r7,zero
   2a3fc:	0011883a 	mov	r8,zero
   2a400:	00800434 	movhi	r2,16
   2a404:	10bfffc4 	addi	r2,r2,-1
   2a408:	301d883a 	mov	r14,r6
   2a40c:	3884703a 	and	r2,r7,r2
   2a410:	400a953a 	slli	r5,r8,20
   2a414:	79bffc2c 	andhi	r6,r15,65520
   2a418:	308cb03a 	or	r6,r6,r2
   2a41c:	00e00434 	movhi	r3,32784
   2a420:	18ffffc4 	addi	r3,r3,-1
   2a424:	800497fa 	slli	r2,r16,31
   2a428:	30c6703a 	and	r3,r6,r3
   2a42c:	1946b03a 	or	r3,r3,r5
   2a430:	01600034 	movhi	r5,32768
   2a434:	297fffc4 	addi	r5,r5,-1
   2a438:	194a703a 	and	r5,r3,r5
   2a43c:	288ab03a 	or	r5,r5,r2
   2a440:	2807883a 	mov	r3,r5
   2a444:	7005883a 	mov	r2,r14
   2a448:	dc800217 	ldw	r18,8(sp)
   2a44c:	dc400117 	ldw	r17,4(sp)
   2a450:	dc000017 	ldw	r16,0(sp)
   2a454:	dec00304 	addi	sp,sp,12
   2a458:	f800283a 	ret
   2a45c:	21000217 	ldw	r4,8(r4)
   2a460:	00bf0084 	movi	r2,-1022
   2a464:	20803f16 	blt	r4,r2,2a564 <__pack_d+0x1b4>
   2a468:	0080ffc4 	movi	r2,1023
   2a46c:	11002c16 	blt	r2,r4,2a520 <__pack_d+0x170>
   2a470:	00803fc4 	movi	r2,255
   2a474:	408c703a 	and	r6,r8,r2
   2a478:	00802004 	movi	r2,128
   2a47c:	0007883a 	mov	r3,zero
   2a480:	000f883a 	mov	r7,zero
   2a484:	2280ffc4 	addi	r10,r4,1023
   2a488:	30801e26 	beq	r6,r2,2a504 <__pack_d+0x154>
   2a48c:	00801fc4 	movi	r2,127
   2a490:	4089883a 	add	r4,r8,r2
   2a494:	220d803a 	cmpltu	r6,r4,r8
   2a498:	324d883a 	add	r6,r6,r9
   2a49c:	2011883a 	mov	r8,r4
   2a4a0:	3013883a 	mov	r9,r6
   2a4a4:	00880034 	movhi	r2,8192
   2a4a8:	10bfffc4 	addi	r2,r2,-1
   2a4ac:	12400d36 	bltu	r2,r9,2a4e4 <__pack_d+0x134>
   2a4b0:	4804963a 	slli	r2,r9,24
   2a4b4:	400cd23a 	srli	r6,r8,8
   2a4b8:	480ed23a 	srli	r7,r9,8
   2a4bc:	013fffc4 	movi	r4,-1
   2a4c0:	118cb03a 	or	r6,r2,r6
   2a4c4:	01400434 	movhi	r5,16
   2a4c8:	297fffc4 	addi	r5,r5,-1
   2a4cc:	3104703a 	and	r2,r6,r4
   2a4d0:	3946703a 	and	r3,r7,r5
   2a4d4:	5201ffcc 	andi	r8,r10,2047
   2a4d8:	100d883a 	mov	r6,r2
   2a4dc:	180f883a 	mov	r7,r3
   2a4e0:	003fc706 	br	2a400 <__pack_d+0x50>
   2a4e4:	480897fa 	slli	r4,r9,31
   2a4e8:	4004d07a 	srli	r2,r8,1
   2a4ec:	4806d07a 	srli	r3,r9,1
   2a4f0:	52800044 	addi	r10,r10,1
   2a4f4:	2084b03a 	or	r2,r4,r2
   2a4f8:	1011883a 	mov	r8,r2
   2a4fc:	1813883a 	mov	r9,r3
   2a500:	003feb06 	br	2a4b0 <__pack_d+0x100>
   2a504:	383fe11e 	bne	r7,zero,2a48c <__pack_d+0xdc>
   2a508:	01004004 	movi	r4,256
   2a50c:	4104703a 	and	r2,r8,r4
   2a510:	10c4b03a 	or	r2,r2,r3
   2a514:	103fe326 	beq	r2,zero,2a4a4 <__pack_d+0xf4>
   2a518:	3005883a 	mov	r2,r6
   2a51c:	003fdc06 	br	2a490 <__pack_d+0xe0>
   2a520:	000d883a 	mov	r6,zero
   2a524:	000f883a 	mov	r7,zero
   2a528:	0201ffc4 	movi	r8,2047
   2a52c:	003fb406 	br	2a400 <__pack_d+0x50>
   2a530:	0005883a 	mov	r2,zero
   2a534:	00c00234 	movhi	r3,8
   2a538:	408cb03a 	or	r6,r8,r2
   2a53c:	48ceb03a 	or	r7,r9,r3
   2a540:	013fffc4 	movi	r4,-1
   2a544:	01400434 	movhi	r5,16
   2a548:	297fffc4 	addi	r5,r5,-1
   2a54c:	3104703a 	and	r2,r6,r4
   2a550:	3946703a 	and	r3,r7,r5
   2a554:	100d883a 	mov	r6,r2
   2a558:	180f883a 	mov	r7,r3
   2a55c:	0201ffc4 	movi	r8,2047
   2a560:	003fa706 	br	2a400 <__pack_d+0x50>
   2a564:	1109c83a 	sub	r4,r2,r4
   2a568:	00800e04 	movi	r2,56
   2a56c:	11004316 	blt	r2,r4,2a67c <__pack_d+0x2cc>
   2a570:	21fff804 	addi	r7,r4,-32
   2a574:	38004516 	blt	r7,zero,2a68c <__pack_d+0x2dc>
   2a578:	49d8d83a 	srl	r12,r9,r7
   2a57c:	001b883a 	mov	r13,zero
   2a580:	0023883a 	mov	r17,zero
   2a584:	01400044 	movi	r5,1
   2a588:	0025883a 	mov	r18,zero
   2a58c:	38004716 	blt	r7,zero,2a6ac <__pack_d+0x2fc>
   2a590:	29d6983a 	sll	r11,r5,r7
   2a594:	0015883a 	mov	r10,zero
   2a598:	00bfffc4 	movi	r2,-1
   2a59c:	5089883a 	add	r4,r10,r2
   2a5a0:	588b883a 	add	r5,r11,r2
   2a5a4:	228d803a 	cmpltu	r6,r4,r10
   2a5a8:	314b883a 	add	r5,r6,r5
   2a5ac:	4104703a 	and	r2,r8,r4
   2a5b0:	4946703a 	and	r3,r9,r5
   2a5b4:	10c4b03a 	or	r2,r2,r3
   2a5b8:	10000226 	beq	r2,zero,2a5c4 <__pack_d+0x214>
   2a5bc:	04400044 	movi	r17,1
   2a5c0:	0025883a 	mov	r18,zero
   2a5c4:	00803fc4 	movi	r2,255
   2a5c8:	644eb03a 	or	r7,r12,r17
   2a5cc:	3892703a 	and	r9,r7,r2
   2a5d0:	00802004 	movi	r2,128
   2a5d4:	6c90b03a 	or	r8,r13,r18
   2a5d8:	0015883a 	mov	r10,zero
   2a5dc:	48801626 	beq	r9,r2,2a638 <__pack_d+0x288>
   2a5e0:	01001fc4 	movi	r4,127
   2a5e4:	3905883a 	add	r2,r7,r4
   2a5e8:	11cd803a 	cmpltu	r6,r2,r7
   2a5ec:	320d883a 	add	r6,r6,r8
   2a5f0:	100f883a 	mov	r7,r2
   2a5f4:	00840034 	movhi	r2,4096
   2a5f8:	10bfffc4 	addi	r2,r2,-1
   2a5fc:	3011883a 	mov	r8,r6
   2a600:	0007883a 	mov	r3,zero
   2a604:	11801b36 	bltu	r2,r6,2a674 <__pack_d+0x2c4>
   2a608:	4004963a 	slli	r2,r8,24
   2a60c:	3808d23a 	srli	r4,r7,8
   2a610:	400ad23a 	srli	r5,r8,8
   2a614:	1813883a 	mov	r9,r3
   2a618:	1108b03a 	or	r4,r2,r4
   2a61c:	00bfffc4 	movi	r2,-1
   2a620:	00c00434 	movhi	r3,16
   2a624:	18ffffc4 	addi	r3,r3,-1
   2a628:	208c703a 	and	r6,r4,r2
   2a62c:	28ce703a 	and	r7,r5,r3
   2a630:	4a01ffcc 	andi	r8,r9,2047
   2a634:	003f7206 	br	2a400 <__pack_d+0x50>
   2a638:	503fe91e 	bne	r10,zero,2a5e0 <__pack_d+0x230>
   2a63c:	01004004 	movi	r4,256
   2a640:	3904703a 	and	r2,r7,r4
   2a644:	0007883a 	mov	r3,zero
   2a648:	10c4b03a 	or	r2,r2,r3
   2a64c:	10000626 	beq	r2,zero,2a668 <__pack_d+0x2b8>
   2a650:	3a45883a 	add	r2,r7,r9
   2a654:	11cd803a 	cmpltu	r6,r2,r7
   2a658:	320d883a 	add	r6,r6,r8
   2a65c:	100f883a 	mov	r7,r2
   2a660:	3011883a 	mov	r8,r6
   2a664:	0007883a 	mov	r3,zero
   2a668:	00840034 	movhi	r2,4096
   2a66c:	10bfffc4 	addi	r2,r2,-1
   2a670:	123fe52e 	bgeu	r2,r8,2a608 <__pack_d+0x258>
   2a674:	00c00044 	movi	r3,1
   2a678:	003fe306 	br	2a608 <__pack_d+0x258>
   2a67c:	0009883a 	mov	r4,zero
   2a680:	0013883a 	mov	r9,zero
   2a684:	000b883a 	mov	r5,zero
   2a688:	003fe406 	br	2a61c <__pack_d+0x26c>
   2a68c:	4a47883a 	add	r3,r9,r9
   2a690:	008007c4 	movi	r2,31
   2a694:	1105c83a 	sub	r2,r2,r4
   2a698:	1886983a 	sll	r3,r3,r2
   2a69c:	4118d83a 	srl	r12,r8,r4
   2a6a0:	491ad83a 	srl	r13,r9,r4
   2a6a4:	1b18b03a 	or	r12,r3,r12
   2a6a8:	003fb506 	br	2a580 <__pack_d+0x1d0>
   2a6ac:	2806d07a 	srli	r3,r5,1
   2a6b0:	008007c4 	movi	r2,31
   2a6b4:	1105c83a 	sub	r2,r2,r4
   2a6b8:	1896d83a 	srl	r11,r3,r2
   2a6bc:	2914983a 	sll	r10,r5,r4
   2a6c0:	003fb506 	br	2a598 <__pack_d+0x1e8>

0002a6c4 <__unpack_d>:
   2a6c4:	20c00117 	ldw	r3,4(r4)
   2a6c8:	22400017 	ldw	r9,0(r4)
   2a6cc:	00800434 	movhi	r2,16
   2a6d0:	10bfffc4 	addi	r2,r2,-1
   2a6d4:	1808d53a 	srli	r4,r3,20
   2a6d8:	180cd7fa 	srli	r6,r3,31
   2a6dc:	1894703a 	and	r10,r3,r2
   2a6e0:	2201ffcc 	andi	r8,r4,2047
   2a6e4:	281b883a 	mov	r13,r5
   2a6e8:	4817883a 	mov	r11,r9
   2a6ec:	29800115 	stw	r6,4(r5)
   2a6f0:	5019883a 	mov	r12,r10
   2a6f4:	40001e1e 	bne	r8,zero,2a770 <__unpack_d+0xac>
   2a6f8:	4a84b03a 	or	r2,r9,r10
   2a6fc:	10001926 	beq	r2,zero,2a764 <__unpack_d+0xa0>
   2a700:	4804d63a 	srli	r2,r9,24
   2a704:	500c923a 	slli	r6,r10,8
   2a708:	013f0084 	movi	r4,-1022
   2a70c:	00c40034 	movhi	r3,4096
   2a710:	18ffffc4 	addi	r3,r3,-1
   2a714:	118cb03a 	or	r6,r2,r6
   2a718:	008000c4 	movi	r2,3
   2a71c:	480a923a 	slli	r5,r9,8
   2a720:	68800015 	stw	r2,0(r13)
   2a724:	69000215 	stw	r4,8(r13)
   2a728:	19800b36 	bltu	r3,r6,2a758 <__unpack_d+0x94>
   2a72c:	200f883a 	mov	r7,r4
   2a730:	1811883a 	mov	r8,r3
   2a734:	2945883a 	add	r2,r5,r5
   2a738:	1149803a 	cmpltu	r4,r2,r5
   2a73c:	3187883a 	add	r3,r6,r6
   2a740:	20c9883a 	add	r4,r4,r3
   2a744:	100b883a 	mov	r5,r2
   2a748:	200d883a 	mov	r6,r4
   2a74c:	39ffffc4 	addi	r7,r7,-1
   2a750:	413ff82e 	bgeu	r8,r4,2a734 <__unpack_d+0x70>
   2a754:	69c00215 	stw	r7,8(r13)
   2a758:	69800415 	stw	r6,16(r13)
   2a75c:	69400315 	stw	r5,12(r13)
   2a760:	f800283a 	ret
   2a764:	00800084 	movi	r2,2
   2a768:	28800015 	stw	r2,0(r5)
   2a76c:	f800283a 	ret
   2a770:	0081ffc4 	movi	r2,2047
   2a774:	40800f26 	beq	r8,r2,2a7b4 <__unpack_d+0xf0>
   2a778:	480cd63a 	srli	r6,r9,24
   2a77c:	5006923a 	slli	r3,r10,8
   2a780:	4804923a 	slli	r2,r9,8
   2a784:	0009883a 	mov	r4,zero
   2a788:	30c6b03a 	or	r3,r6,r3
   2a78c:	01440034 	movhi	r5,4096
   2a790:	110cb03a 	or	r6,r2,r4
   2a794:	423f0044 	addi	r8,r8,-1023
   2a798:	194eb03a 	or	r7,r3,r5
   2a79c:	008000c4 	movi	r2,3
   2a7a0:	69c00415 	stw	r7,16(r13)
   2a7a4:	6a000215 	stw	r8,8(r13)
   2a7a8:	68800015 	stw	r2,0(r13)
   2a7ac:	69800315 	stw	r6,12(r13)
   2a7b0:	f800283a 	ret
   2a7b4:	4a84b03a 	or	r2,r9,r10
   2a7b8:	1000031e 	bne	r2,zero,2a7c8 <__unpack_d+0x104>
   2a7bc:	00800104 	movi	r2,4
   2a7c0:	28800015 	stw	r2,0(r5)
   2a7c4:	f800283a 	ret
   2a7c8:	0009883a 	mov	r4,zero
   2a7cc:	01400234 	movhi	r5,8
   2a7d0:	4904703a 	and	r2,r9,r4
   2a7d4:	5146703a 	and	r3,r10,r5
   2a7d8:	10c4b03a 	or	r2,r2,r3
   2a7dc:	10000526 	beq	r2,zero,2a7f4 <__unpack_d+0x130>
   2a7e0:	00800044 	movi	r2,1
   2a7e4:	68800015 	stw	r2,0(r13)
   2a7e8:	6b000415 	stw	r12,16(r13)
   2a7ec:	6ac00315 	stw	r11,12(r13)
   2a7f0:	f800283a 	ret
   2a7f4:	68000015 	stw	zero,0(r13)
   2a7f8:	003ffb06 	br	2a7e8 <__unpack_d+0x124>

0002a7fc <__fpcmp_parts_d>:
   2a7fc:	21800017 	ldw	r6,0(r4)
   2a800:	00c00044 	movi	r3,1
   2a804:	19800a2e 	bgeu	r3,r6,2a830 <__fpcmp_parts_d+0x34>
   2a808:	28800017 	ldw	r2,0(r5)
   2a80c:	1880082e 	bgeu	r3,r2,2a830 <__fpcmp_parts_d+0x34>
   2a810:	00c00104 	movi	r3,4
   2a814:	30c02626 	beq	r6,r3,2a8b0 <__fpcmp_parts_d+0xb4>
   2a818:	10c02226 	beq	r2,r3,2a8a4 <__fpcmp_parts_d+0xa8>
   2a81c:	00c00084 	movi	r3,2
   2a820:	30c00526 	beq	r6,r3,2a838 <__fpcmp_parts_d+0x3c>
   2a824:	10c0071e 	bne	r2,r3,2a844 <__fpcmp_parts_d+0x48>
   2a828:	20800117 	ldw	r2,4(r4)
   2a82c:	1000091e 	bne	r2,zero,2a854 <__fpcmp_parts_d+0x58>
   2a830:	00800044 	movi	r2,1
   2a834:	f800283a 	ret
   2a838:	10c01a1e 	bne	r2,r3,2a8a4 <__fpcmp_parts_d+0xa8>
   2a83c:	0005883a 	mov	r2,zero
   2a840:	f800283a 	ret
   2a844:	22000117 	ldw	r8,4(r4)
   2a848:	28800117 	ldw	r2,4(r5)
   2a84c:	40800326 	beq	r8,r2,2a85c <__fpcmp_parts_d+0x60>
   2a850:	403ff726 	beq	r8,zero,2a830 <__fpcmp_parts_d+0x34>
   2a854:	00bfffc4 	movi	r2,-1
   2a858:	f800283a 	ret
   2a85c:	20c00217 	ldw	r3,8(r4)
   2a860:	28800217 	ldw	r2,8(r5)
   2a864:	10fffa16 	blt	r2,r3,2a850 <__fpcmp_parts_d+0x54>
   2a868:	18800916 	blt	r3,r2,2a890 <__fpcmp_parts_d+0x94>
   2a86c:	21c00417 	ldw	r7,16(r4)
   2a870:	28c00417 	ldw	r3,16(r5)
   2a874:	21800317 	ldw	r6,12(r4)
   2a878:	28800317 	ldw	r2,12(r5)
   2a87c:	19fff436 	bltu	r3,r7,2a850 <__fpcmp_parts_d+0x54>
   2a880:	38c00526 	beq	r7,r3,2a898 <__fpcmp_parts_d+0x9c>
   2a884:	38c00236 	bltu	r7,r3,2a890 <__fpcmp_parts_d+0x94>
   2a888:	19ffec1e 	bne	r3,r7,2a83c <__fpcmp_parts_d+0x40>
   2a88c:	30bfeb2e 	bgeu	r6,r2,2a83c <__fpcmp_parts_d+0x40>
   2a890:	403fe71e 	bne	r8,zero,2a830 <__fpcmp_parts_d+0x34>
   2a894:	003fef06 	br	2a854 <__fpcmp_parts_d+0x58>
   2a898:	11bffa2e 	bgeu	r2,r6,2a884 <__fpcmp_parts_d+0x88>
   2a89c:	403fe426 	beq	r8,zero,2a830 <__fpcmp_parts_d+0x34>
   2a8a0:	003fec06 	br	2a854 <__fpcmp_parts_d+0x58>
   2a8a4:	28800117 	ldw	r2,4(r5)
   2a8a8:	103fe11e 	bne	r2,zero,2a830 <__fpcmp_parts_d+0x34>
   2a8ac:	003fe906 	br	2a854 <__fpcmp_parts_d+0x58>
   2a8b0:	11bfdd1e 	bne	r2,r6,2a828 <__fpcmp_parts_d+0x2c>
   2a8b4:	28c00117 	ldw	r3,4(r5)
   2a8b8:	20800117 	ldw	r2,4(r4)
   2a8bc:	1885c83a 	sub	r2,r3,r2
   2a8c0:	f800283a 	ret

0002a8c4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2a8c4:	defff804 	addi	sp,sp,-32
   2a8c8:	dfc00715 	stw	ra,28(sp)
   2a8cc:	df000615 	stw	fp,24(sp)
   2a8d0:	df000604 	addi	fp,sp,24
   2a8d4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2a8d8:	e0bffc17 	ldw	r2,-16(fp)
   2a8dc:	1004803a 	cmplt	r2,r2,zero
   2a8e0:	1000091e 	bne	r2,zero,2a908 <close+0x44>
   2a8e4:	e13ffc17 	ldw	r4,-16(fp)
   2a8e8:	01400304 	movi	r5,12
   2a8ec:	002a1d40 	call	2a1d4 <__mulsi3>
   2a8f0:	1007883a 	mov	r3,r2
   2a8f4:	008000f4 	movhi	r2,3
   2a8f8:	10b8a304 	addi	r2,r2,-7540
   2a8fc:	1887883a 	add	r3,r3,r2
   2a900:	e0ffff15 	stw	r3,-4(fp)
   2a904:	00000106 	br	2a90c <close+0x48>
   2a908:	e03fff15 	stw	zero,-4(fp)
   2a90c:	e0bfff17 	ldw	r2,-4(fp)
   2a910:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   2a914:	e0bffb17 	ldw	r2,-20(fp)
   2a918:	1005003a 	cmpeq	r2,r2,zero
   2a91c:	10001d1e 	bne	r2,zero,2a994 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2a920:	e0bffb17 	ldw	r2,-20(fp)
   2a924:	10800017 	ldw	r2,0(r2)
   2a928:	10800417 	ldw	r2,16(r2)
   2a92c:	1005003a 	cmpeq	r2,r2,zero
   2a930:	1000071e 	bne	r2,zero,2a950 <close+0x8c>
   2a934:	e0bffb17 	ldw	r2,-20(fp)
   2a938:	10800017 	ldw	r2,0(r2)
   2a93c:	10800417 	ldw	r2,16(r2)
   2a940:	e13ffb17 	ldw	r4,-20(fp)
   2a944:	103ee83a 	callr	r2
   2a948:	e0bffe15 	stw	r2,-8(fp)
   2a94c:	00000106 	br	2a954 <close+0x90>
   2a950:	e03ffe15 	stw	zero,-8(fp)
   2a954:	e0bffe17 	ldw	r2,-8(fp)
   2a958:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2a95c:	e13ffc17 	ldw	r4,-16(fp)
   2a960:	002b3e80 	call	2b3e8 <alt_release_fd>
    if (rval < 0)
   2a964:	e0bffa17 	ldw	r2,-24(fp)
   2a968:	1004403a 	cmpge	r2,r2,zero
   2a96c:	1000071e 	bne	r2,zero,2a98c <close+0xc8>
    {
      ALT_ERRNO = -rval;
   2a970:	002a9c40 	call	2a9c4 <alt_get_errno>
   2a974:	e0fffa17 	ldw	r3,-24(fp)
   2a978:	00c7c83a 	sub	r3,zero,r3
   2a97c:	10c00015 	stw	r3,0(r2)
      return -1;
   2a980:	00bfffc4 	movi	r2,-1
   2a984:	e0bffd15 	stw	r2,-12(fp)
   2a988:	00000806 	br	2a9ac <close+0xe8>
    }
    return 0;
   2a98c:	e03ffd15 	stw	zero,-12(fp)
   2a990:	00000606 	br	2a9ac <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2a994:	002a9c40 	call	2a9c4 <alt_get_errno>
   2a998:	1007883a 	mov	r3,r2
   2a99c:	00801444 	movi	r2,81
   2a9a0:	18800015 	stw	r2,0(r3)
    return -1;
   2a9a4:	00bfffc4 	movi	r2,-1
   2a9a8:	e0bffd15 	stw	r2,-12(fp)
   2a9ac:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   2a9b0:	e037883a 	mov	sp,fp
   2a9b4:	dfc00117 	ldw	ra,4(sp)
   2a9b8:	df000017 	ldw	fp,0(sp)
   2a9bc:	dec00204 	addi	sp,sp,8
   2a9c0:	f800283a 	ret

0002a9c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2a9c4:	defffd04 	addi	sp,sp,-12
   2a9c8:	dfc00215 	stw	ra,8(sp)
   2a9cc:	df000115 	stw	fp,4(sp)
   2a9d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2a9d4:	008000f4 	movhi	r2,3
   2a9d8:	10bd2804 	addi	r2,r2,-2912
   2a9dc:	10800017 	ldw	r2,0(r2)
   2a9e0:	1005003a 	cmpeq	r2,r2,zero
   2a9e4:	1000061e 	bne	r2,zero,2aa00 <alt_get_errno+0x3c>
   2a9e8:	008000f4 	movhi	r2,3
   2a9ec:	10bd2804 	addi	r2,r2,-2912
   2a9f0:	10800017 	ldw	r2,0(r2)
   2a9f4:	103ee83a 	callr	r2
   2a9f8:	e0bfff15 	stw	r2,-4(fp)
   2a9fc:	00000306 	br	2aa0c <alt_get_errno+0x48>
   2aa00:	008000f4 	movhi	r2,3
   2aa04:	1083cd04 	addi	r2,r2,3892
   2aa08:	e0bfff15 	stw	r2,-4(fp)
   2aa0c:	e0bfff17 	ldw	r2,-4(fp)
}
   2aa10:	e037883a 	mov	sp,fp
   2aa14:	dfc00117 	ldw	ra,4(sp)
   2aa18:	df000017 	ldw	fp,0(sp)
   2aa1c:	dec00204 	addi	sp,sp,8
   2aa20:	f800283a 	ret

0002aa24 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2aa24:	defffc04 	addi	sp,sp,-16
   2aa28:	df000315 	stw	fp,12(sp)
   2aa2c:	df000304 	addi	fp,sp,12
   2aa30:	e13ffd15 	stw	r4,-12(fp)
   2aa34:	e17ffe15 	stw	r5,-8(fp)
   2aa38:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2aa3c:	e0bfff17 	ldw	r2,-4(fp)
}
   2aa40:	e037883a 	mov	sp,fp
   2aa44:	df000017 	ldw	fp,0(sp)
   2aa48:	dec00104 	addi	sp,sp,4
   2aa4c:	f800283a 	ret

0002aa50 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2aa50:	defff904 	addi	sp,sp,-28
   2aa54:	dfc00615 	stw	ra,24(sp)
   2aa58:	df000515 	stw	fp,20(sp)
   2aa5c:	df000504 	addi	fp,sp,20
   2aa60:	e13ffc15 	stw	r4,-16(fp)
   2aa64:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2aa68:	e0bffc17 	ldw	r2,-16(fp)
   2aa6c:	1004803a 	cmplt	r2,r2,zero
   2aa70:	1000091e 	bne	r2,zero,2aa98 <fstat+0x48>
   2aa74:	e13ffc17 	ldw	r4,-16(fp)
   2aa78:	01400304 	movi	r5,12
   2aa7c:	002a1d40 	call	2a1d4 <__mulsi3>
   2aa80:	1007883a 	mov	r3,r2
   2aa84:	008000f4 	movhi	r2,3
   2aa88:	10b8a304 	addi	r2,r2,-7540
   2aa8c:	1887883a 	add	r3,r3,r2
   2aa90:	e0ffff15 	stw	r3,-4(fp)
   2aa94:	00000106 	br	2aa9c <fstat+0x4c>
   2aa98:	e03fff15 	stw	zero,-4(fp)
   2aa9c:	e0bfff17 	ldw	r2,-4(fp)
   2aaa0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2aaa4:	e0bffb17 	ldw	r2,-20(fp)
   2aaa8:	1005003a 	cmpeq	r2,r2,zero
   2aaac:	1000121e 	bne	r2,zero,2aaf8 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2aab0:	e0bffb17 	ldw	r2,-20(fp)
   2aab4:	10800017 	ldw	r2,0(r2)
   2aab8:	10800817 	ldw	r2,32(r2)
   2aabc:	1005003a 	cmpeq	r2,r2,zero
   2aac0:	1000081e 	bne	r2,zero,2aae4 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   2aac4:	e0bffb17 	ldw	r2,-20(fp)
   2aac8:	10800017 	ldw	r2,0(r2)
   2aacc:	10800817 	ldw	r2,32(r2)
   2aad0:	e13ffb17 	ldw	r4,-20(fp)
   2aad4:	e17ffd17 	ldw	r5,-12(fp)
   2aad8:	103ee83a 	callr	r2
   2aadc:	e0bffe15 	stw	r2,-8(fp)
   2aae0:	00000b06 	br	2ab10 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2aae4:	e0fffd17 	ldw	r3,-12(fp)
   2aae8:	00880004 	movi	r2,8192
   2aaec:	18800115 	stw	r2,4(r3)
      return 0;
   2aaf0:	e03ffe15 	stw	zero,-8(fp)
   2aaf4:	00000606 	br	2ab10 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2aaf8:	002ab280 	call	2ab28 <alt_get_errno>
   2aafc:	1007883a 	mov	r3,r2
   2ab00:	00801444 	movi	r2,81
   2ab04:	18800015 	stw	r2,0(r3)
    return -1;
   2ab08:	00bfffc4 	movi	r2,-1
   2ab0c:	e0bffe15 	stw	r2,-8(fp)
   2ab10:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   2ab14:	e037883a 	mov	sp,fp
   2ab18:	dfc00117 	ldw	ra,4(sp)
   2ab1c:	df000017 	ldw	fp,0(sp)
   2ab20:	dec00204 	addi	sp,sp,8
   2ab24:	f800283a 	ret

0002ab28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2ab28:	defffd04 	addi	sp,sp,-12
   2ab2c:	dfc00215 	stw	ra,8(sp)
   2ab30:	df000115 	stw	fp,4(sp)
   2ab34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2ab38:	008000f4 	movhi	r2,3
   2ab3c:	10bd2804 	addi	r2,r2,-2912
   2ab40:	10800017 	ldw	r2,0(r2)
   2ab44:	1005003a 	cmpeq	r2,r2,zero
   2ab48:	1000061e 	bne	r2,zero,2ab64 <alt_get_errno+0x3c>
   2ab4c:	008000f4 	movhi	r2,3
   2ab50:	10bd2804 	addi	r2,r2,-2912
   2ab54:	10800017 	ldw	r2,0(r2)
   2ab58:	103ee83a 	callr	r2
   2ab5c:	e0bfff15 	stw	r2,-4(fp)
   2ab60:	00000306 	br	2ab70 <alt_get_errno+0x48>
   2ab64:	008000f4 	movhi	r2,3
   2ab68:	1083cd04 	addi	r2,r2,3892
   2ab6c:	e0bfff15 	stw	r2,-4(fp)
   2ab70:	e0bfff17 	ldw	r2,-4(fp)
}
   2ab74:	e037883a 	mov	sp,fp
   2ab78:	dfc00117 	ldw	ra,4(sp)
   2ab7c:	df000017 	ldw	fp,0(sp)
   2ab80:	dec00204 	addi	sp,sp,8
   2ab84:	f800283a 	ret

0002ab88 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2ab88:	defff904 	addi	sp,sp,-28
   2ab8c:	dfc00615 	stw	ra,24(sp)
   2ab90:	df000515 	stw	fp,20(sp)
   2ab94:	df000504 	addi	fp,sp,20
   2ab98:	e13ffc15 	stw	r4,-16(fp)
   2ab9c:	e17ffd15 	stw	r5,-12(fp)
   2aba0:	e1bffe15 	stw	r6,-8(fp)
   2aba4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2aba8:	e0800217 	ldw	r2,8(fp)
   2abac:	d8800015 	stw	r2,0(sp)
   2abb0:	e13ffc17 	ldw	r4,-16(fp)
   2abb4:	e17ffd17 	ldw	r5,-12(fp)
   2abb8:	e1bffe17 	ldw	r6,-8(fp)
   2abbc:	e1ffff17 	ldw	r7,-4(fp)
   2abc0:	002ad5c0 	call	2ad5c <alt_iic_isr_register>
}  
   2abc4:	e037883a 	mov	sp,fp
   2abc8:	dfc00117 	ldw	ra,4(sp)
   2abcc:	df000017 	ldw	fp,0(sp)
   2abd0:	dec00204 	addi	sp,sp,8
   2abd4:	f800283a 	ret

0002abd8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2abd8:	defff904 	addi	sp,sp,-28
   2abdc:	df000615 	stw	fp,24(sp)
   2abe0:	df000604 	addi	fp,sp,24
   2abe4:	e13ffe15 	stw	r4,-8(fp)
   2abe8:	e17fff15 	stw	r5,-4(fp)
   2abec:	e0bfff17 	ldw	r2,-4(fp)
   2abf0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2abf4:	0005303a 	rdctl	r2,status
   2abf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2abfc:	e0fffb17 	ldw	r3,-20(fp)
   2ac00:	00bfff84 	movi	r2,-2
   2ac04:	1884703a 	and	r2,r3,r2
   2ac08:	1001703a 	wrctl	status,r2
  
  return context;
   2ac0c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2ac10:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   2ac14:	e0fffc17 	ldw	r3,-16(fp)
   2ac18:	00800044 	movi	r2,1
   2ac1c:	10c4983a 	sll	r2,r2,r3
   2ac20:	1007883a 	mov	r3,r2
   2ac24:	008000f4 	movhi	r2,3
   2ac28:	1083ce04 	addi	r2,r2,3896
   2ac2c:	10800017 	ldw	r2,0(r2)
   2ac30:	1886b03a 	or	r3,r3,r2
   2ac34:	008000f4 	movhi	r2,3
   2ac38:	1083ce04 	addi	r2,r2,3896
   2ac3c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2ac40:	008000f4 	movhi	r2,3
   2ac44:	1083ce04 	addi	r2,r2,3896
   2ac48:	10800017 	ldw	r2,0(r2)
   2ac4c:	100170fa 	wrctl	ienable,r2
   2ac50:	e0bffd17 	ldw	r2,-12(fp)
   2ac54:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ac58:	e0bffa17 	ldw	r2,-24(fp)
   2ac5c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2ac60:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   2ac64:	e037883a 	mov	sp,fp
   2ac68:	df000017 	ldw	fp,0(sp)
   2ac6c:	dec00104 	addi	sp,sp,4
   2ac70:	f800283a 	ret

0002ac74 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2ac74:	defff904 	addi	sp,sp,-28
   2ac78:	df000615 	stw	fp,24(sp)
   2ac7c:	df000604 	addi	fp,sp,24
   2ac80:	e13ffe15 	stw	r4,-8(fp)
   2ac84:	e17fff15 	stw	r5,-4(fp)
   2ac88:	e0bfff17 	ldw	r2,-4(fp)
   2ac8c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ac90:	0005303a 	rdctl	r2,status
   2ac94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ac98:	e0fffb17 	ldw	r3,-20(fp)
   2ac9c:	00bfff84 	movi	r2,-2
   2aca0:	1884703a 	and	r2,r3,r2
   2aca4:	1001703a 	wrctl	status,r2
  
  return context;
   2aca8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2acac:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   2acb0:	e0fffc17 	ldw	r3,-16(fp)
   2acb4:	00800044 	movi	r2,1
   2acb8:	10c4983a 	sll	r2,r2,r3
   2acbc:	0084303a 	nor	r2,zero,r2
   2acc0:	1007883a 	mov	r3,r2
   2acc4:	008000f4 	movhi	r2,3
   2acc8:	1083ce04 	addi	r2,r2,3896
   2accc:	10800017 	ldw	r2,0(r2)
   2acd0:	1886703a 	and	r3,r3,r2
   2acd4:	008000f4 	movhi	r2,3
   2acd8:	1083ce04 	addi	r2,r2,3896
   2acdc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2ace0:	008000f4 	movhi	r2,3
   2ace4:	1083ce04 	addi	r2,r2,3896
   2ace8:	10800017 	ldw	r2,0(r2)
   2acec:	100170fa 	wrctl	ienable,r2
   2acf0:	e0bffd17 	ldw	r2,-12(fp)
   2acf4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2acf8:	e0bffa17 	ldw	r2,-24(fp)
   2acfc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2ad00:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   2ad04:	e037883a 	mov	sp,fp
   2ad08:	df000017 	ldw	fp,0(sp)
   2ad0c:	dec00104 	addi	sp,sp,4
   2ad10:	f800283a 	ret

0002ad14 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2ad14:	defffc04 	addi	sp,sp,-16
   2ad18:	df000315 	stw	fp,12(sp)
   2ad1c:	df000304 	addi	fp,sp,12
   2ad20:	e13ffe15 	stw	r4,-8(fp)
   2ad24:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2ad28:	000530fa 	rdctl	r2,ienable
   2ad2c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2ad30:	e0ffff17 	ldw	r3,-4(fp)
   2ad34:	00800044 	movi	r2,1
   2ad38:	10c4983a 	sll	r2,r2,r3
   2ad3c:	1007883a 	mov	r3,r2
   2ad40:	e0bffd17 	ldw	r2,-12(fp)
   2ad44:	1884703a 	and	r2,r3,r2
   2ad48:	1004c03a 	cmpne	r2,r2,zero
}
   2ad4c:	e037883a 	mov	sp,fp
   2ad50:	df000017 	ldw	fp,0(sp)
   2ad54:	dec00104 	addi	sp,sp,4
   2ad58:	f800283a 	ret

0002ad5c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2ad5c:	defff404 	addi	sp,sp,-48
   2ad60:	dfc00b15 	stw	ra,44(sp)
   2ad64:	df000a15 	stw	fp,40(sp)
   2ad68:	df000a04 	addi	fp,sp,40
   2ad6c:	e13ffb15 	stw	r4,-20(fp)
   2ad70:	e17ffc15 	stw	r5,-16(fp)
   2ad74:	e1bffd15 	stw	r6,-12(fp)
   2ad78:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   2ad7c:	00bffa84 	movi	r2,-22
   2ad80:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2ad84:	e0bffc17 	ldw	r2,-16(fp)
   2ad88:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2ad8c:	e0bff917 	ldw	r2,-28(fp)
   2ad90:	10800808 	cmpgei	r2,r2,32
   2ad94:	1000291e 	bne	r2,zero,2ae3c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ad98:	0005303a 	rdctl	r2,status
   2ad9c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ada0:	e0fff717 	ldw	r3,-36(fp)
   2ada4:	00bfff84 	movi	r2,-2
   2ada8:	1884703a 	and	r2,r3,r2
   2adac:	1001703a 	wrctl	status,r2
  
  return context;
   2adb0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2adb4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   2adb8:	e0bff917 	ldw	r2,-28(fp)
   2adbc:	00c000f4 	movhi	r3,3
   2adc0:	18c3de04 	addi	r3,r3,3960
   2adc4:	100490fa 	slli	r2,r2,3
   2adc8:	10c7883a 	add	r3,r2,r3
   2adcc:	e0bffd17 	ldw	r2,-12(fp)
   2add0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   2add4:	e0bff917 	ldw	r2,-28(fp)
   2add8:	00c000f4 	movhi	r3,3
   2addc:	18c3de04 	addi	r3,r3,3960
   2ade0:	100490fa 	slli	r2,r2,3
   2ade4:	10c5883a 	add	r2,r2,r3
   2ade8:	10c00104 	addi	r3,r2,4
   2adec:	e0bffe17 	ldw	r2,-8(fp)
   2adf0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2adf4:	e0bffd17 	ldw	r2,-12(fp)
   2adf8:	1005003a 	cmpeq	r2,r2,zero
   2adfc:	1000051e 	bne	r2,zero,2ae14 <alt_iic_isr_register+0xb8>
   2ae00:	e17ff917 	ldw	r5,-28(fp)
   2ae04:	e13ffb17 	ldw	r4,-20(fp)
   2ae08:	002abd80 	call	2abd8 <alt_ic_irq_enable>
   2ae0c:	e0bfff15 	stw	r2,-4(fp)
   2ae10:	00000406 	br	2ae24 <alt_iic_isr_register+0xc8>
   2ae14:	e17ff917 	ldw	r5,-28(fp)
   2ae18:	e13ffb17 	ldw	r4,-20(fp)
   2ae1c:	002ac740 	call	2ac74 <alt_ic_irq_disable>
   2ae20:	e0bfff15 	stw	r2,-4(fp)
   2ae24:	e0bfff17 	ldw	r2,-4(fp)
   2ae28:	e0bffa15 	stw	r2,-24(fp)
   2ae2c:	e0bff817 	ldw	r2,-32(fp)
   2ae30:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ae34:	e0bff617 	ldw	r2,-40(fp)
   2ae38:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2ae3c:	e0bffa17 	ldw	r2,-24(fp)
}
   2ae40:	e037883a 	mov	sp,fp
   2ae44:	dfc00117 	ldw	ra,4(sp)
   2ae48:	df000017 	ldw	fp,0(sp)
   2ae4c:	dec00204 	addi	sp,sp,8
   2ae50:	f800283a 	ret

0002ae54 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2ae54:	deffeb04 	addi	sp,sp,-84
   2ae58:	dfc01415 	stw	ra,80(sp)
   2ae5c:	df001315 	stw	fp,76(sp)
   2ae60:	df001304 	addi	fp,sp,76
   2ae64:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2ae68:	e0bffd17 	ldw	r2,-12(fp)
   2ae6c:	1004803a 	cmplt	r2,r2,zero
   2ae70:	1000091e 	bne	r2,zero,2ae98 <isatty+0x44>
   2ae74:	e13ffd17 	ldw	r4,-12(fp)
   2ae78:	01400304 	movi	r5,12
   2ae7c:	002a1d40 	call	2a1d4 <__mulsi3>
   2ae80:	1007883a 	mov	r3,r2
   2ae84:	008000f4 	movhi	r2,3
   2ae88:	10b8a304 	addi	r2,r2,-7540
   2ae8c:	1887883a 	add	r3,r3,r2
   2ae90:	e0ffff15 	stw	r3,-4(fp)
   2ae94:	00000106 	br	2ae9c <isatty+0x48>
   2ae98:	e03fff15 	stw	zero,-4(fp)
   2ae9c:	e0bfff17 	ldw	r2,-4(fp)
   2aea0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   2aea4:	e0bfed17 	ldw	r2,-76(fp)
   2aea8:	1005003a 	cmpeq	r2,r2,zero
   2aeac:	10000f1e 	bne	r2,zero,2aeec <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2aeb0:	e0bfed17 	ldw	r2,-76(fp)
   2aeb4:	10800017 	ldw	r2,0(r2)
   2aeb8:	10800817 	ldw	r2,32(r2)
   2aebc:	1004c03a 	cmpne	r2,r2,zero
   2aec0:	1000031e 	bne	r2,zero,2aed0 <isatty+0x7c>
    {
      return 1;
   2aec4:	00800044 	movi	r2,1
   2aec8:	e0bffe15 	stw	r2,-8(fp)
   2aecc:	00000c06 	br	2af00 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2aed0:	e17fee04 	addi	r5,fp,-72
   2aed4:	e13ffd17 	ldw	r4,-12(fp)
   2aed8:	002aa500 	call	2aa50 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2aedc:	e0bfef17 	ldw	r2,-68(fp)
   2aee0:	10880020 	cmpeqi	r2,r2,8192
   2aee4:	e0bffe15 	stw	r2,-8(fp)
   2aee8:	00000506 	br	2af00 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2aeec:	002af180 	call	2af18 <alt_get_errno>
   2aef0:	1007883a 	mov	r3,r2
   2aef4:	00801444 	movi	r2,81
   2aef8:	18800015 	stw	r2,0(r3)
    return 0;
   2aefc:	e03ffe15 	stw	zero,-8(fp)
   2af00:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   2af04:	e037883a 	mov	sp,fp
   2af08:	dfc00117 	ldw	ra,4(sp)
   2af0c:	df000017 	ldw	fp,0(sp)
   2af10:	dec00204 	addi	sp,sp,8
   2af14:	f800283a 	ret

0002af18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2af18:	defffd04 	addi	sp,sp,-12
   2af1c:	dfc00215 	stw	ra,8(sp)
   2af20:	df000115 	stw	fp,4(sp)
   2af24:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2af28:	008000f4 	movhi	r2,3
   2af2c:	10bd2804 	addi	r2,r2,-2912
   2af30:	10800017 	ldw	r2,0(r2)
   2af34:	1005003a 	cmpeq	r2,r2,zero
   2af38:	1000061e 	bne	r2,zero,2af54 <alt_get_errno+0x3c>
   2af3c:	008000f4 	movhi	r2,3
   2af40:	10bd2804 	addi	r2,r2,-2912
   2af44:	10800017 	ldw	r2,0(r2)
   2af48:	103ee83a 	callr	r2
   2af4c:	e0bfff15 	stw	r2,-4(fp)
   2af50:	00000306 	br	2af60 <alt_get_errno+0x48>
   2af54:	008000f4 	movhi	r2,3
   2af58:	1083cd04 	addi	r2,r2,3892
   2af5c:	e0bfff15 	stw	r2,-4(fp)
   2af60:	e0bfff17 	ldw	r2,-4(fp)
}
   2af64:	e037883a 	mov	sp,fp
   2af68:	dfc00117 	ldw	ra,4(sp)
   2af6c:	df000017 	ldw	fp,0(sp)
   2af70:	dec00204 	addi	sp,sp,8
   2af74:	f800283a 	ret

0002af78 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2af78:	defffe04 	addi	sp,sp,-8
   2af7c:	dfc00115 	stw	ra,4(sp)
   2af80:	df000015 	stw	fp,0(sp)
   2af84:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2af88:	010000f4 	movhi	r4,3
   2af8c:	213d2d04 	addi	r4,r4,-2892
   2af90:	014000f4 	movhi	r5,3
   2af94:	29769404 	addi	r5,r5,-9648
   2af98:	018000f4 	movhi	r6,3
   2af9c:	31bd2d04 	addi	r6,r6,-2892
   2afa0:	002aff80 	call	2aff8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2afa4:	010000b4 	movhi	r4,2
   2afa8:	21000804 	addi	r4,r4,32
   2afac:	014000b4 	movhi	r5,2
   2afb0:	29400804 	addi	r5,r5,32
   2afb4:	018000b4 	movhi	r6,2
   2afb8:	31806d04 	addi	r6,r6,436
   2afbc:	002aff80 	call	2aff8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2afc0:	010000f4 	movhi	r4,3
   2afc4:	2134dc04 	addi	r4,r4,-11408
   2afc8:	014000f4 	movhi	r5,3
   2afcc:	2974dc04 	addi	r5,r5,-11408
   2afd0:	018000f4 	movhi	r6,3
   2afd4:	31b69404 	addi	r6,r6,-9648
   2afd8:	002aff80 	call	2aff8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2afdc:	002c4680 	call	2c468 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2afe0:	002c6600 	call	2c660 <alt_icache_flush_all>
}
   2afe4:	e037883a 	mov	sp,fp
   2afe8:	dfc00117 	ldw	ra,4(sp)
   2afec:	df000017 	ldw	fp,0(sp)
   2aff0:	dec00204 	addi	sp,sp,8
   2aff4:	f800283a 	ret

0002aff8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2aff8:	defffc04 	addi	sp,sp,-16
   2affc:	df000315 	stw	fp,12(sp)
   2b000:	df000304 	addi	fp,sp,12
   2b004:	e13ffd15 	stw	r4,-12(fp)
   2b008:	e17ffe15 	stw	r5,-8(fp)
   2b00c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2b010:	e0fffe17 	ldw	r3,-8(fp)
   2b014:	e0bffd17 	ldw	r2,-12(fp)
   2b018:	18800e26 	beq	r3,r2,2b054 <alt_load_section+0x5c>
  {
    while( to != end )
   2b01c:	00000a06 	br	2b048 <alt_load_section+0x50>
    {
      *to++ = *from++;
   2b020:	e0bffd17 	ldw	r2,-12(fp)
   2b024:	10c00017 	ldw	r3,0(r2)
   2b028:	e0bffe17 	ldw	r2,-8(fp)
   2b02c:	10c00015 	stw	r3,0(r2)
   2b030:	e0bffe17 	ldw	r2,-8(fp)
   2b034:	10800104 	addi	r2,r2,4
   2b038:	e0bffe15 	stw	r2,-8(fp)
   2b03c:	e0bffd17 	ldw	r2,-12(fp)
   2b040:	10800104 	addi	r2,r2,4
   2b044:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2b048:	e0fffe17 	ldw	r3,-8(fp)
   2b04c:	e0bfff17 	ldw	r2,-4(fp)
   2b050:	18bff31e 	bne	r3,r2,2b020 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   2b054:	e037883a 	mov	sp,fp
   2b058:	df000017 	ldw	fp,0(sp)
   2b05c:	dec00104 	addi	sp,sp,4
   2b060:	f800283a 	ret

0002b064 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2b064:	defff804 	addi	sp,sp,-32
   2b068:	dfc00715 	stw	ra,28(sp)
   2b06c:	df000615 	stw	fp,24(sp)
   2b070:	df000604 	addi	fp,sp,24
   2b074:	e13ffc15 	stw	r4,-16(fp)
   2b078:	e17ffd15 	stw	r5,-12(fp)
   2b07c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2b080:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2b084:	e0bffc17 	ldw	r2,-16(fp)
   2b088:	1004803a 	cmplt	r2,r2,zero
   2b08c:	1000091e 	bne	r2,zero,2b0b4 <lseek+0x50>
   2b090:	e13ffc17 	ldw	r4,-16(fp)
   2b094:	01400304 	movi	r5,12
   2b098:	002a1d40 	call	2a1d4 <__mulsi3>
   2b09c:	1007883a 	mov	r3,r2
   2b0a0:	008000f4 	movhi	r2,3
   2b0a4:	10b8a304 	addi	r2,r2,-7540
   2b0a8:	1887883a 	add	r3,r3,r2
   2b0ac:	e0ffff15 	stw	r3,-4(fp)
   2b0b0:	00000106 	br	2b0b8 <lseek+0x54>
   2b0b4:	e03fff15 	stw	zero,-4(fp)
   2b0b8:	e0bfff17 	ldw	r2,-4(fp)
   2b0bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   2b0c0:	e0bffb17 	ldw	r2,-20(fp)
   2b0c4:	1005003a 	cmpeq	r2,r2,zero
   2b0c8:	1000111e 	bne	r2,zero,2b110 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2b0cc:	e0bffb17 	ldw	r2,-20(fp)
   2b0d0:	10800017 	ldw	r2,0(r2)
   2b0d4:	10800717 	ldw	r2,28(r2)
   2b0d8:	1005003a 	cmpeq	r2,r2,zero
   2b0dc:	1000091e 	bne	r2,zero,2b104 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2b0e0:	e0bffb17 	ldw	r2,-20(fp)
   2b0e4:	10800017 	ldw	r2,0(r2)
   2b0e8:	10800717 	ldw	r2,28(r2)
   2b0ec:	e13ffb17 	ldw	r4,-20(fp)
   2b0f0:	e17ffd17 	ldw	r5,-12(fp)
   2b0f4:	e1bffe17 	ldw	r6,-8(fp)
   2b0f8:	103ee83a 	callr	r2
   2b0fc:	e0bffa15 	stw	r2,-24(fp)
   2b100:	00000506 	br	2b118 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2b104:	00bfde84 	movi	r2,-134
   2b108:	e0bffa15 	stw	r2,-24(fp)
   2b10c:	00000206 	br	2b118 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   2b110:	00bfebc4 	movi	r2,-81
   2b114:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   2b118:	e0bffa17 	ldw	r2,-24(fp)
   2b11c:	1004403a 	cmpge	r2,r2,zero
   2b120:	1000071e 	bne	r2,zero,2b140 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   2b124:	002b1580 	call	2b158 <alt_get_errno>
   2b128:	1007883a 	mov	r3,r2
   2b12c:	e0bffa17 	ldw	r2,-24(fp)
   2b130:	0085c83a 	sub	r2,zero,r2
   2b134:	18800015 	stw	r2,0(r3)
    rc = -1;
   2b138:	00bfffc4 	movi	r2,-1
   2b13c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   2b140:	e0bffa17 	ldw	r2,-24(fp)
}
   2b144:	e037883a 	mov	sp,fp
   2b148:	dfc00117 	ldw	ra,4(sp)
   2b14c:	df000017 	ldw	fp,0(sp)
   2b150:	dec00204 	addi	sp,sp,8
   2b154:	f800283a 	ret

0002b158 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2b158:	defffd04 	addi	sp,sp,-12
   2b15c:	dfc00215 	stw	ra,8(sp)
   2b160:	df000115 	stw	fp,4(sp)
   2b164:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2b168:	008000f4 	movhi	r2,3
   2b16c:	10bd2804 	addi	r2,r2,-2912
   2b170:	10800017 	ldw	r2,0(r2)
   2b174:	1005003a 	cmpeq	r2,r2,zero
   2b178:	1000061e 	bne	r2,zero,2b194 <alt_get_errno+0x3c>
   2b17c:	008000f4 	movhi	r2,3
   2b180:	10bd2804 	addi	r2,r2,-2912
   2b184:	10800017 	ldw	r2,0(r2)
   2b188:	103ee83a 	callr	r2
   2b18c:	e0bfff15 	stw	r2,-4(fp)
   2b190:	00000306 	br	2b1a0 <alt_get_errno+0x48>
   2b194:	008000f4 	movhi	r2,3
   2b198:	1083cd04 	addi	r2,r2,3892
   2b19c:	e0bfff15 	stw	r2,-4(fp)
   2b1a0:	e0bfff17 	ldw	r2,-4(fp)
}
   2b1a4:	e037883a 	mov	sp,fp
   2b1a8:	dfc00117 	ldw	ra,4(sp)
   2b1ac:	df000017 	ldw	fp,0(sp)
   2b1b0:	dec00204 	addi	sp,sp,8
   2b1b4:	f800283a 	ret

0002b1b8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2b1b8:	defffd04 	addi	sp,sp,-12
   2b1bc:	dfc00215 	stw	ra,8(sp)
   2b1c0:	df000115 	stw	fp,4(sp)
   2b1c4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2b1c8:	0009883a 	mov	r4,zero
   2b1cc:	002b6a00 	call	2b6a0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2b1d0:	002b6d40 	call	2b6d4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2b1d4:	010000f4 	movhi	r4,3
   2b1d8:	21368604 	addi	r4,r4,-9704
   2b1dc:	014000f4 	movhi	r5,3
   2b1e0:	29768604 	addi	r5,r5,-9704
   2b1e4:	018000f4 	movhi	r6,3
   2b1e8:	31b68604 	addi	r6,r6,-9704
   2b1ec:	002c7540 	call	2c754 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2b1f0:	002c5980 	call	2c598 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2b1f4:	010000f4 	movhi	r4,3
   2b1f8:	21317f04 	addi	r4,r4,-14852
   2b1fc:	002cef80 	call	2cef8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2b200:	d126b417 	ldw	r4,-25904(gp)
   2b204:	d166b517 	ldw	r5,-25900(gp)
   2b208:	d1a6b617 	ldw	r6,-25896(gp)
   2b20c:	00204e80 	call	204e8 <main>
   2b210:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2b214:	01000044 	movi	r4,1
   2b218:	002a8c40 	call	2a8c4 <close>
  exit (result);
   2b21c:	e13fff17 	ldw	r4,-4(fp)
   2b220:	002cf0c0 	call	2cf0c <exit>

0002b224 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2b224:	defffe04 	addi	sp,sp,-8
   2b228:	df000115 	stw	fp,4(sp)
   2b22c:	df000104 	addi	fp,sp,4
   2b230:	e13fff15 	stw	r4,-4(fp)
}
   2b234:	e037883a 	mov	sp,fp
   2b238:	df000017 	ldw	fp,0(sp)
   2b23c:	dec00104 	addi	sp,sp,4
   2b240:	f800283a 	ret

0002b244 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2b244:	defffe04 	addi	sp,sp,-8
   2b248:	df000115 	stw	fp,4(sp)
   2b24c:	df000104 	addi	fp,sp,4
   2b250:	e13fff15 	stw	r4,-4(fp)
}
   2b254:	e037883a 	mov	sp,fp
   2b258:	df000017 	ldw	fp,0(sp)
   2b25c:	dec00104 	addi	sp,sp,4
   2b260:	f800283a 	ret

0002b264 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2b264:	defff704 	addi	sp,sp,-36
   2b268:	dfc00815 	stw	ra,32(sp)
   2b26c:	df000715 	stw	fp,28(sp)
   2b270:	df000704 	addi	fp,sp,28
   2b274:	e13ffb15 	stw	r4,-20(fp)
   2b278:	e17ffc15 	stw	r5,-16(fp)
   2b27c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2b280:	e0bffb17 	ldw	r2,-20(fp)
   2b284:	1004803a 	cmplt	r2,r2,zero
   2b288:	1000091e 	bne	r2,zero,2b2b0 <read+0x4c>
   2b28c:	e13ffb17 	ldw	r4,-20(fp)
   2b290:	01400304 	movi	r5,12
   2b294:	002a1d40 	call	2a1d4 <__mulsi3>
   2b298:	1007883a 	mov	r3,r2
   2b29c:	008000f4 	movhi	r2,3
   2b2a0:	10b8a304 	addi	r2,r2,-7540
   2b2a4:	1887883a 	add	r3,r3,r2
   2b2a8:	e0ffff15 	stw	r3,-4(fp)
   2b2ac:	00000106 	br	2b2b4 <read+0x50>
   2b2b0:	e03fff15 	stw	zero,-4(fp)
   2b2b4:	e0bfff17 	ldw	r2,-4(fp)
   2b2b8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   2b2bc:	e0bffa17 	ldw	r2,-24(fp)
   2b2c0:	1005003a 	cmpeq	r2,r2,zero
   2b2c4:	1000241e 	bne	r2,zero,2b358 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2b2c8:	e0bffa17 	ldw	r2,-24(fp)
   2b2cc:	10800217 	ldw	r2,8(r2)
   2b2d0:	108000cc 	andi	r2,r2,3
   2b2d4:	10800060 	cmpeqi	r2,r2,1
   2b2d8:	10001a1e 	bne	r2,zero,2b344 <read+0xe0>
   2b2dc:	e0bffa17 	ldw	r2,-24(fp)
   2b2e0:	10800017 	ldw	r2,0(r2)
   2b2e4:	10800517 	ldw	r2,20(r2)
   2b2e8:	1005003a 	cmpeq	r2,r2,zero
   2b2ec:	1000151e 	bne	r2,zero,2b344 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2b2f0:	e0bffa17 	ldw	r2,-24(fp)
   2b2f4:	10800017 	ldw	r2,0(r2)
   2b2f8:	10800517 	ldw	r2,20(r2)
   2b2fc:	e17ffc17 	ldw	r5,-16(fp)
   2b300:	e1bffd17 	ldw	r6,-12(fp)
   2b304:	e13ffa17 	ldw	r4,-24(fp)
   2b308:	103ee83a 	callr	r2
   2b30c:	e0bff915 	stw	r2,-28(fp)
   2b310:	e0bff917 	ldw	r2,-28(fp)
   2b314:	1004403a 	cmpge	r2,r2,zero
   2b318:	1000071e 	bne	r2,zero,2b338 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   2b31c:	002b3880 	call	2b388 <alt_get_errno>
   2b320:	e0fff917 	ldw	r3,-28(fp)
   2b324:	00c7c83a 	sub	r3,zero,r3
   2b328:	10c00015 	stw	r3,0(r2)
          return -1;
   2b32c:	00bfffc4 	movi	r2,-1
   2b330:	e0bffe15 	stw	r2,-8(fp)
   2b334:	00000e06 	br	2b370 <read+0x10c>
        }
        return rval;
   2b338:	e0bff917 	ldw	r2,-28(fp)
   2b33c:	e0bffe15 	stw	r2,-8(fp)
   2b340:	00000b06 	br	2b370 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2b344:	002b3880 	call	2b388 <alt_get_errno>
   2b348:	1007883a 	mov	r3,r2
   2b34c:	00800344 	movi	r2,13
   2b350:	18800015 	stw	r2,0(r3)
   2b354:	00000406 	br	2b368 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2b358:	002b3880 	call	2b388 <alt_get_errno>
   2b35c:	1007883a 	mov	r3,r2
   2b360:	00801444 	movi	r2,81
   2b364:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2b368:	00bfffc4 	movi	r2,-1
   2b36c:	e0bffe15 	stw	r2,-8(fp)
   2b370:	e0bffe17 	ldw	r2,-8(fp)
}
   2b374:	e037883a 	mov	sp,fp
   2b378:	dfc00117 	ldw	ra,4(sp)
   2b37c:	df000017 	ldw	fp,0(sp)
   2b380:	dec00204 	addi	sp,sp,8
   2b384:	f800283a 	ret

0002b388 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2b388:	defffd04 	addi	sp,sp,-12
   2b38c:	dfc00215 	stw	ra,8(sp)
   2b390:	df000115 	stw	fp,4(sp)
   2b394:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2b398:	008000f4 	movhi	r2,3
   2b39c:	10bd2804 	addi	r2,r2,-2912
   2b3a0:	10800017 	ldw	r2,0(r2)
   2b3a4:	1005003a 	cmpeq	r2,r2,zero
   2b3a8:	1000061e 	bne	r2,zero,2b3c4 <alt_get_errno+0x3c>
   2b3ac:	008000f4 	movhi	r2,3
   2b3b0:	10bd2804 	addi	r2,r2,-2912
   2b3b4:	10800017 	ldw	r2,0(r2)
   2b3b8:	103ee83a 	callr	r2
   2b3bc:	e0bfff15 	stw	r2,-4(fp)
   2b3c0:	00000306 	br	2b3d0 <alt_get_errno+0x48>
   2b3c4:	008000f4 	movhi	r2,3
   2b3c8:	1083cd04 	addi	r2,r2,3892
   2b3cc:	e0bfff15 	stw	r2,-4(fp)
   2b3d0:	e0bfff17 	ldw	r2,-4(fp)
}
   2b3d4:	e037883a 	mov	sp,fp
   2b3d8:	dfc00117 	ldw	ra,4(sp)
   2b3dc:	df000017 	ldw	fp,0(sp)
   2b3e0:	dec00204 	addi	sp,sp,8
   2b3e4:	f800283a 	ret

0002b3e8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2b3e8:	defffc04 	addi	sp,sp,-16
   2b3ec:	dfc00315 	stw	ra,12(sp)
   2b3f0:	df000215 	stw	fp,8(sp)
   2b3f4:	dc000115 	stw	r16,4(sp)
   2b3f8:	df000104 	addi	fp,sp,4
   2b3fc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2b400:	e0bfff17 	ldw	r2,-4(fp)
   2b404:	108000d0 	cmplti	r2,r2,3
   2b408:	10000f1e 	bne	r2,zero,2b448 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   2b40c:	e13fff17 	ldw	r4,-4(fp)
   2b410:	040000f4 	movhi	r16,3
   2b414:	8438a304 	addi	r16,r16,-7540
   2b418:	01400304 	movi	r5,12
   2b41c:	002a1d40 	call	2a1d4 <__mulsi3>
   2b420:	1405883a 	add	r2,r2,r16
   2b424:	10800204 	addi	r2,r2,8
   2b428:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2b42c:	e13fff17 	ldw	r4,-4(fp)
   2b430:	040000f4 	movhi	r16,3
   2b434:	8438a304 	addi	r16,r16,-7540
   2b438:	01400304 	movi	r5,12
   2b43c:	002a1d40 	call	2a1d4 <__mulsi3>
   2b440:	1405883a 	add	r2,r2,r16
   2b444:	10000015 	stw	zero,0(r2)
  }
}
   2b448:	e037883a 	mov	sp,fp
   2b44c:	dfc00217 	ldw	ra,8(sp)
   2b450:	df000117 	ldw	fp,4(sp)
   2b454:	dc000017 	ldw	r16,0(sp)
   2b458:	dec00304 	addi	sp,sp,12
   2b45c:	f800283a 	ret

0002b460 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2b460:	defff804 	addi	sp,sp,-32
   2b464:	df000715 	stw	fp,28(sp)
   2b468:	df000704 	addi	fp,sp,28
   2b46c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b470:	0005303a 	rdctl	r2,status
   2b474:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b478:	e0fffb17 	ldw	r3,-20(fp)
   2b47c:	00bfff84 	movi	r2,-2
   2b480:	1884703a 	and	r2,r3,r2
   2b484:	1001703a 	wrctl	status,r2
  
  return context;
   2b488:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2b48c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2b490:	d0a00f17 	ldw	r2,-32708(gp)
   2b494:	10c000c4 	addi	r3,r2,3
   2b498:	00bfff04 	movi	r2,-4
   2b49c:	1884703a 	and	r2,r3,r2
   2b4a0:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2b4a4:	d0e00f17 	ldw	r3,-32708(gp)
   2b4a8:	e0bffe17 	ldw	r2,-8(fp)
   2b4ac:	1887883a 	add	r3,r3,r2
   2b4b0:	00800134 	movhi	r2,4
   2b4b4:	10800004 	addi	r2,r2,0
   2b4b8:	10c0072e 	bgeu	r2,r3,2b4d8 <sbrk+0x78>
   2b4bc:	e0bffd17 	ldw	r2,-12(fp)
   2b4c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b4c4:	e0bffa17 	ldw	r2,-24(fp)
   2b4c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2b4cc:	00bfffc4 	movi	r2,-1
   2b4d0:	e0bfff15 	stw	r2,-4(fp)
   2b4d4:	00000c06 	br	2b508 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   2b4d8:	d0a00f17 	ldw	r2,-32708(gp)
   2b4dc:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   2b4e0:	d0e00f17 	ldw	r3,-32708(gp)
   2b4e4:	e0bffe17 	ldw	r2,-8(fp)
   2b4e8:	1885883a 	add	r2,r3,r2
   2b4ec:	d0a00f15 	stw	r2,-32708(gp)
   2b4f0:	e0bffd17 	ldw	r2,-12(fp)
   2b4f4:	e0bff915 	stw	r2,-28(fp)
   2b4f8:	e0bff917 	ldw	r2,-28(fp)
   2b4fc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2b500:	e0bffc17 	ldw	r2,-16(fp)
   2b504:	e0bfff15 	stw	r2,-4(fp)
   2b508:	e0bfff17 	ldw	r2,-4(fp)
} 
   2b50c:	e037883a 	mov	sp,fp
   2b510:	df000017 	ldw	fp,0(sp)
   2b514:	dec00104 	addi	sp,sp,4
   2b518:	f800283a 	ret

0002b51c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2b51c:	defff704 	addi	sp,sp,-36
   2b520:	dfc00815 	stw	ra,32(sp)
   2b524:	df000715 	stw	fp,28(sp)
   2b528:	df000704 	addi	fp,sp,28
   2b52c:	e13ffb15 	stw	r4,-20(fp)
   2b530:	e17ffc15 	stw	r5,-16(fp)
   2b534:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2b538:	e0bffb17 	ldw	r2,-20(fp)
   2b53c:	1004803a 	cmplt	r2,r2,zero
   2b540:	1000091e 	bne	r2,zero,2b568 <write+0x4c>
   2b544:	e13ffb17 	ldw	r4,-20(fp)
   2b548:	01400304 	movi	r5,12
   2b54c:	002a1d40 	call	2a1d4 <__mulsi3>
   2b550:	1007883a 	mov	r3,r2
   2b554:	008000f4 	movhi	r2,3
   2b558:	10b8a304 	addi	r2,r2,-7540
   2b55c:	1887883a 	add	r3,r3,r2
   2b560:	e0ffff15 	stw	r3,-4(fp)
   2b564:	00000106 	br	2b56c <write+0x50>
   2b568:	e03fff15 	stw	zero,-4(fp)
   2b56c:	e0bfff17 	ldw	r2,-4(fp)
   2b570:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   2b574:	e0bffa17 	ldw	r2,-24(fp)
   2b578:	1005003a 	cmpeq	r2,r2,zero
   2b57c:	1000241e 	bne	r2,zero,2b610 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2b580:	e0bffa17 	ldw	r2,-24(fp)
   2b584:	10800217 	ldw	r2,8(r2)
   2b588:	108000cc 	andi	r2,r2,3
   2b58c:	1005003a 	cmpeq	r2,r2,zero
   2b590:	10001a1e 	bne	r2,zero,2b5fc <write+0xe0>
   2b594:	e0bffa17 	ldw	r2,-24(fp)
   2b598:	10800017 	ldw	r2,0(r2)
   2b59c:	10800617 	ldw	r2,24(r2)
   2b5a0:	1005003a 	cmpeq	r2,r2,zero
   2b5a4:	1000151e 	bne	r2,zero,2b5fc <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2b5a8:	e0bffa17 	ldw	r2,-24(fp)
   2b5ac:	10800017 	ldw	r2,0(r2)
   2b5b0:	10800617 	ldw	r2,24(r2)
   2b5b4:	e17ffc17 	ldw	r5,-16(fp)
   2b5b8:	e1bffd17 	ldw	r6,-12(fp)
   2b5bc:	e13ffa17 	ldw	r4,-24(fp)
   2b5c0:	103ee83a 	callr	r2
   2b5c4:	e0bff915 	stw	r2,-28(fp)
   2b5c8:	e0bff917 	ldw	r2,-28(fp)
   2b5cc:	1004403a 	cmpge	r2,r2,zero
   2b5d0:	1000071e 	bne	r2,zero,2b5f0 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   2b5d4:	002b6400 	call	2b640 <alt_get_errno>
   2b5d8:	e0fff917 	ldw	r3,-28(fp)
   2b5dc:	00c7c83a 	sub	r3,zero,r3
   2b5e0:	10c00015 	stw	r3,0(r2)
        return -1;
   2b5e4:	00bfffc4 	movi	r2,-1
   2b5e8:	e0bffe15 	stw	r2,-8(fp)
   2b5ec:	00000e06 	br	2b628 <write+0x10c>
      }
      return rval;
   2b5f0:	e0bff917 	ldw	r2,-28(fp)
   2b5f4:	e0bffe15 	stw	r2,-8(fp)
   2b5f8:	00000b06 	br	2b628 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2b5fc:	002b6400 	call	2b640 <alt_get_errno>
   2b600:	1007883a 	mov	r3,r2
   2b604:	00800344 	movi	r2,13
   2b608:	18800015 	stw	r2,0(r3)
   2b60c:	00000406 	br	2b620 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2b610:	002b6400 	call	2b640 <alt_get_errno>
   2b614:	1007883a 	mov	r3,r2
   2b618:	00801444 	movi	r2,81
   2b61c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2b620:	00bfffc4 	movi	r2,-1
   2b624:	e0bffe15 	stw	r2,-8(fp)
   2b628:	e0bffe17 	ldw	r2,-8(fp)
}
   2b62c:	e037883a 	mov	sp,fp
   2b630:	dfc00117 	ldw	ra,4(sp)
   2b634:	df000017 	ldw	fp,0(sp)
   2b638:	dec00204 	addi	sp,sp,8
   2b63c:	f800283a 	ret

0002b640 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2b640:	defffd04 	addi	sp,sp,-12
   2b644:	dfc00215 	stw	ra,8(sp)
   2b648:	df000115 	stw	fp,4(sp)
   2b64c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2b650:	008000f4 	movhi	r2,3
   2b654:	10bd2804 	addi	r2,r2,-2912
   2b658:	10800017 	ldw	r2,0(r2)
   2b65c:	1005003a 	cmpeq	r2,r2,zero
   2b660:	1000061e 	bne	r2,zero,2b67c <alt_get_errno+0x3c>
   2b664:	008000f4 	movhi	r2,3
   2b668:	10bd2804 	addi	r2,r2,-2912
   2b66c:	10800017 	ldw	r2,0(r2)
   2b670:	103ee83a 	callr	r2
   2b674:	e0bfff15 	stw	r2,-4(fp)
   2b678:	00000306 	br	2b688 <alt_get_errno+0x48>
   2b67c:	008000f4 	movhi	r2,3
   2b680:	1083cd04 	addi	r2,r2,3892
   2b684:	e0bfff15 	stw	r2,-4(fp)
   2b688:	e0bfff17 	ldw	r2,-4(fp)
}
   2b68c:	e037883a 	mov	sp,fp
   2b690:	dfc00117 	ldw	ra,4(sp)
   2b694:	df000017 	ldw	fp,0(sp)
   2b698:	dec00204 	addi	sp,sp,8
   2b69c:	f800283a 	ret

0002b6a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2b6a0:	defffd04 	addi	sp,sp,-12
   2b6a4:	dfc00215 	stw	ra,8(sp)
   2b6a8:	df000115 	stw	fp,4(sp)
   2b6ac:	df000104 	addi	fp,sp,4
   2b6b0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS_BASE_CPU, nios_base_cpu);
   2b6b4:	002cc540 	call	2cc54 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2b6b8:	00800044 	movi	r2,1
   2b6bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2b6c0:	e037883a 	mov	sp,fp
   2b6c4:	dfc00117 	ldw	ra,4(sp)
   2b6c8:	df000017 	ldw	fp,0(sp)
   2b6cc:	dec00204 	addi	sp,sp,8
   2b6d0:	f800283a 	ret

0002b6d4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2b6d4:	defffe04 	addi	sp,sp,-8
   2b6d8:	dfc00115 	stw	ra,4(sp)
   2b6dc:	df000015 	stw	fp,0(sp)
   2b6e0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( NIOS_BASE_SYS_CLK_TIMER, nios_base_sys_clk_timer);
   2b6e4:	01000134 	movhi	r4,4
   2b6e8:	21081004 	addi	r4,r4,8256
   2b6ec:	000b883a 	mov	r5,zero
   2b6f0:	01800404 	movi	r6,16
   2b6f4:	01c01904 	movi	r7,100
   2b6f8:	002c2840 	call	2c284 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( NIOS_BASE_JTAG_UART, nios_base_jtag_uart);
   2b6fc:	010000f4 	movhi	r4,3
   2b700:	21390d04 	addi	r4,r4,-7116
   2b704:	000b883a 	mov	r5,zero
   2b708:	01800044 	movi	r6,1
   2b70c:	002b8b00 	call	2b8b0 <altera_avalon_jtag_uart_init>
   2b710:	010000f4 	movhi	r4,3
   2b714:	21390304 	addi	r4,r4,-7156
   2b718:	002b7300 	call	2b730 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( NIOS_BASE_SYSID, nios_base_sysid);
}
   2b71c:	e037883a 	mov	sp,fp
   2b720:	dfc00117 	ldw	ra,4(sp)
   2b724:	df000017 	ldw	fp,0(sp)
   2b728:	dec00204 	addi	sp,sp,8
   2b72c:	f800283a 	ret

0002b730 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2b730:	defffd04 	addi	sp,sp,-12
   2b734:	dfc00215 	stw	ra,8(sp)
   2b738:	df000115 	stw	fp,4(sp)
   2b73c:	df000104 	addi	fp,sp,4
   2b740:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2b744:	e13fff17 	ldw	r4,-4(fp)
   2b748:	014000f4 	movhi	r5,3
   2b74c:	297d2504 	addi	r5,r5,-2924
   2b750:	002c4840 	call	2c484 <alt_dev_llist_insert>
}
   2b754:	e037883a 	mov	sp,fp
   2b758:	dfc00117 	ldw	ra,4(sp)
   2b75c:	df000017 	ldw	fp,0(sp)
   2b760:	dec00204 	addi	sp,sp,8
   2b764:	f800283a 	ret

0002b768 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2b768:	defffa04 	addi	sp,sp,-24
   2b76c:	dfc00515 	stw	ra,20(sp)
   2b770:	df000415 	stw	fp,16(sp)
   2b774:	df000404 	addi	fp,sp,16
   2b778:	e13ffd15 	stw	r4,-12(fp)
   2b77c:	e17ffe15 	stw	r5,-8(fp)
   2b780:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2b784:	e0bffd17 	ldw	r2,-12(fp)
   2b788:	10800017 	ldw	r2,0(r2)
   2b78c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2b790:	e0bffc17 	ldw	r2,-16(fp)
   2b794:	11000a04 	addi	r4,r2,40
   2b798:	e0bffd17 	ldw	r2,-12(fp)
   2b79c:	11c00217 	ldw	r7,8(r2)
   2b7a0:	e17ffe17 	ldw	r5,-8(fp)
   2b7a4:	e1bfff17 	ldw	r6,-4(fp)
   2b7a8:	002bdb00 	call	2bdb0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2b7ac:	e037883a 	mov	sp,fp
   2b7b0:	dfc00117 	ldw	ra,4(sp)
   2b7b4:	df000017 	ldw	fp,0(sp)
   2b7b8:	dec00204 	addi	sp,sp,8
   2b7bc:	f800283a 	ret

0002b7c0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2b7c0:	defffa04 	addi	sp,sp,-24
   2b7c4:	dfc00515 	stw	ra,20(sp)
   2b7c8:	df000415 	stw	fp,16(sp)
   2b7cc:	df000404 	addi	fp,sp,16
   2b7d0:	e13ffd15 	stw	r4,-12(fp)
   2b7d4:	e17ffe15 	stw	r5,-8(fp)
   2b7d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2b7dc:	e0bffd17 	ldw	r2,-12(fp)
   2b7e0:	10800017 	ldw	r2,0(r2)
   2b7e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2b7e8:	e0bffc17 	ldw	r2,-16(fp)
   2b7ec:	11000a04 	addi	r4,r2,40
   2b7f0:	e0bffd17 	ldw	r2,-12(fp)
   2b7f4:	11c00217 	ldw	r7,8(r2)
   2b7f8:	e17ffe17 	ldw	r5,-8(fp)
   2b7fc:	e1bfff17 	ldw	r6,-4(fp)
   2b800:	002bfd40 	call	2bfd4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2b804:	e037883a 	mov	sp,fp
   2b808:	dfc00117 	ldw	ra,4(sp)
   2b80c:	df000017 	ldw	fp,0(sp)
   2b810:	dec00204 	addi	sp,sp,8
   2b814:	f800283a 	ret

0002b818 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2b818:	defffc04 	addi	sp,sp,-16
   2b81c:	dfc00315 	stw	ra,12(sp)
   2b820:	df000215 	stw	fp,8(sp)
   2b824:	df000204 	addi	fp,sp,8
   2b828:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2b82c:	e0bfff17 	ldw	r2,-4(fp)
   2b830:	10800017 	ldw	r2,0(r2)
   2b834:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2b838:	e0bffe17 	ldw	r2,-8(fp)
   2b83c:	11000a04 	addi	r4,r2,40
   2b840:	e0bfff17 	ldw	r2,-4(fp)
   2b844:	11400217 	ldw	r5,8(r2)
   2b848:	002bc480 	call	2bc48 <altera_avalon_jtag_uart_close>
}
   2b84c:	e037883a 	mov	sp,fp
   2b850:	dfc00117 	ldw	ra,4(sp)
   2b854:	df000017 	ldw	fp,0(sp)
   2b858:	dec00204 	addi	sp,sp,8
   2b85c:	f800283a 	ret

0002b860 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2b860:	defffa04 	addi	sp,sp,-24
   2b864:	dfc00515 	stw	ra,20(sp)
   2b868:	df000415 	stw	fp,16(sp)
   2b86c:	df000404 	addi	fp,sp,16
   2b870:	e13ffd15 	stw	r4,-12(fp)
   2b874:	e17ffe15 	stw	r5,-8(fp)
   2b878:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2b87c:	e0bffd17 	ldw	r2,-12(fp)
   2b880:	10800017 	ldw	r2,0(r2)
   2b884:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2b888:	e0bffc17 	ldw	r2,-16(fp)
   2b88c:	11000a04 	addi	r4,r2,40
   2b890:	e17ffe17 	ldw	r5,-8(fp)
   2b894:	e1bfff17 	ldw	r6,-4(fp)
   2b898:	002bcbc0 	call	2bcbc <altera_avalon_jtag_uart_ioctl>
}
   2b89c:	e037883a 	mov	sp,fp
   2b8a0:	dfc00117 	ldw	ra,4(sp)
   2b8a4:	df000017 	ldw	fp,0(sp)
   2b8a8:	dec00204 	addi	sp,sp,8
   2b8ac:	f800283a 	ret

0002b8b0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2b8b0:	defffa04 	addi	sp,sp,-24
   2b8b4:	dfc00515 	stw	ra,20(sp)
   2b8b8:	df000415 	stw	fp,16(sp)
   2b8bc:	df000404 	addi	fp,sp,16
   2b8c0:	e13ffd15 	stw	r4,-12(fp)
   2b8c4:	e17ffe15 	stw	r5,-8(fp)
   2b8c8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2b8cc:	e0fffd17 	ldw	r3,-12(fp)
   2b8d0:	00800044 	movi	r2,1
   2b8d4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2b8d8:	e0bffd17 	ldw	r2,-12(fp)
   2b8dc:	10800017 	ldw	r2,0(r2)
   2b8e0:	11000104 	addi	r4,r2,4
   2b8e4:	e0bffd17 	ldw	r2,-12(fp)
   2b8e8:	10800817 	ldw	r2,32(r2)
   2b8ec:	1007883a 	mov	r3,r2
   2b8f0:	2005883a 	mov	r2,r4
   2b8f4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2b8f8:	e13ffe17 	ldw	r4,-8(fp)
   2b8fc:	e17fff17 	ldw	r5,-4(fp)
   2b900:	d8000015 	stw	zero,0(sp)
   2b904:	018000f4 	movhi	r6,3
   2b908:	31ae5c04 	addi	r6,r6,-18064
   2b90c:	e1fffd17 	ldw	r7,-12(fp)
   2b910:	002ab880 	call	2ab88 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2b914:	e0bffd17 	ldw	r2,-12(fp)
   2b918:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2b91c:	e0bffd17 	ldw	r2,-12(fp)
   2b920:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2b924:	008000f4 	movhi	r2,3
   2b928:	1083d204 	addi	r2,r2,3912
   2b92c:	10800017 	ldw	r2,0(r2)
   2b930:	100b883a 	mov	r5,r2
   2b934:	018000f4 	movhi	r6,3
   2b938:	31aee604 	addi	r6,r6,-17512
   2b93c:	e1fffd17 	ldw	r7,-12(fp)
   2b940:	002c3140 	call	2c314 <alt_alarm_start>
   2b944:	1004403a 	cmpge	r2,r2,zero
   2b948:	1000041e 	bne	r2,zero,2b95c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2b94c:	e0fffd17 	ldw	r3,-12(fp)
   2b950:	00a00034 	movhi	r2,32768
   2b954:	10bfffc4 	addi	r2,r2,-1
   2b958:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2b95c:	e037883a 	mov	sp,fp
   2b960:	dfc00117 	ldw	ra,4(sp)
   2b964:	df000017 	ldw	fp,0(sp)
   2b968:	dec00204 	addi	sp,sp,8
   2b96c:	f800283a 	ret

0002b970 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2b970:	defff804 	addi	sp,sp,-32
   2b974:	df000715 	stw	fp,28(sp)
   2b978:	df000704 	addi	fp,sp,28
   2b97c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2b980:	e0bfff17 	ldw	r2,-4(fp)
   2b984:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   2b988:	e0bffe17 	ldw	r2,-8(fp)
   2b98c:	10800017 	ldw	r2,0(r2)
   2b990:	e0bffd15 	stw	r2,-12(fp)
   2b994:	00000006 	br	2b998 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2b998:	e0bffd17 	ldw	r2,-12(fp)
   2b99c:	10800104 	addi	r2,r2,4
   2b9a0:	10800037 	ldwio	r2,0(r2)
   2b9a4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2b9a8:	e0bffc17 	ldw	r2,-16(fp)
   2b9ac:	1080c00c 	andi	r2,r2,768
   2b9b0:	1005003a 	cmpeq	r2,r2,zero
   2b9b4:	1000741e 	bne	r2,zero,2bb88 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2b9b8:	e0bffc17 	ldw	r2,-16(fp)
   2b9bc:	1080400c 	andi	r2,r2,256
   2b9c0:	1005003a 	cmpeq	r2,r2,zero
   2b9c4:	1000351e 	bne	r2,zero,2ba9c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2b9c8:	00800074 	movhi	r2,1
   2b9cc:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2b9d0:	e0bffe17 	ldw	r2,-8(fp)
   2b9d4:	10800a17 	ldw	r2,40(r2)
   2b9d8:	10800044 	addi	r2,r2,1
   2b9dc:	1081ffcc 	andi	r2,r2,2047
   2b9e0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   2b9e4:	e0bffe17 	ldw	r2,-8(fp)
   2b9e8:	10c00b17 	ldw	r3,44(r2)
   2b9ec:	e0bffa17 	ldw	r2,-24(fp)
   2b9f0:	18801626 	beq	r3,r2,2ba4c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2b9f4:	e0bffd17 	ldw	r2,-12(fp)
   2b9f8:	10800037 	ldwio	r2,0(r2)
   2b9fc:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2ba00:	e0bffb17 	ldw	r2,-20(fp)
   2ba04:	10a0000c 	andi	r2,r2,32768
   2ba08:	1005003a 	cmpeq	r2,r2,zero
   2ba0c:	10000f1e 	bne	r2,zero,2ba4c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2ba10:	e0bffe17 	ldw	r2,-8(fp)
   2ba14:	10c00a17 	ldw	r3,40(r2)
   2ba18:	e0bffb17 	ldw	r2,-20(fp)
   2ba1c:	1009883a 	mov	r4,r2
   2ba20:	e0bffe17 	ldw	r2,-8(fp)
   2ba24:	1885883a 	add	r2,r3,r2
   2ba28:	10800e04 	addi	r2,r2,56
   2ba2c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ba30:	e0bffe17 	ldw	r2,-8(fp)
   2ba34:	10800a17 	ldw	r2,40(r2)
   2ba38:	10800044 	addi	r2,r2,1
   2ba3c:	10c1ffcc 	andi	r3,r2,2047
   2ba40:	e0bffe17 	ldw	r2,-8(fp)
   2ba44:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2ba48:	003fe106 	br	2b9d0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2ba4c:	e0bffb17 	ldw	r2,-20(fp)
   2ba50:	10bfffec 	andhi	r2,r2,65535
   2ba54:	1005003a 	cmpeq	r2,r2,zero
   2ba58:	1000101e 	bne	r2,zero,2ba9c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2ba5c:	e0bffe17 	ldw	r2,-8(fp)
   2ba60:	10c00817 	ldw	r3,32(r2)
   2ba64:	00bfff84 	movi	r2,-2
   2ba68:	1886703a 	and	r3,r3,r2
   2ba6c:	e0bffe17 	ldw	r2,-8(fp)
   2ba70:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2ba74:	e0bffd17 	ldw	r2,-12(fp)
   2ba78:	11000104 	addi	r4,r2,4
   2ba7c:	e0bffe17 	ldw	r2,-8(fp)
   2ba80:	10800817 	ldw	r2,32(r2)
   2ba84:	1007883a 	mov	r3,r2
   2ba88:	2005883a 	mov	r2,r4
   2ba8c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2ba90:	e0bffd17 	ldw	r2,-12(fp)
   2ba94:	10800104 	addi	r2,r2,4
   2ba98:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2ba9c:	e0bffc17 	ldw	r2,-16(fp)
   2baa0:	1080800c 	andi	r2,r2,512
   2baa4:	1005003a 	cmpeq	r2,r2,zero
   2baa8:	103fbb1e 	bne	r2,zero,2b998 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2baac:	e0bffc17 	ldw	r2,-16(fp)
   2bab0:	10bfffec 	andhi	r2,r2,65535
   2bab4:	1004d43a 	srli	r2,r2,16
   2bab8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2babc:	00001506 	br	2bb14 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2bac0:	e13ffd17 	ldw	r4,-12(fp)
   2bac4:	e0bffe17 	ldw	r2,-8(fp)
   2bac8:	10c00d17 	ldw	r3,52(r2)
   2bacc:	e0bffe17 	ldw	r2,-8(fp)
   2bad0:	1885883a 	add	r2,r3,r2
   2bad4:	10820e04 	addi	r2,r2,2104
   2bad8:	10800003 	ldbu	r2,0(r2)
   2badc:	10c03fcc 	andi	r3,r2,255
   2bae0:	18c0201c 	xori	r3,r3,128
   2bae4:	18ffe004 	addi	r3,r3,-128
   2bae8:	2005883a 	mov	r2,r4
   2baec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2baf0:	e0bffe17 	ldw	r2,-8(fp)
   2baf4:	10800d17 	ldw	r2,52(r2)
   2baf8:	10800044 	addi	r2,r2,1
   2bafc:	10c1ffcc 	andi	r3,r2,2047
   2bb00:	e0bffe17 	ldw	r2,-8(fp)
   2bb04:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2bb08:	e0bff917 	ldw	r2,-28(fp)
   2bb0c:	10bfffc4 	addi	r2,r2,-1
   2bb10:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2bb14:	e0bff917 	ldw	r2,-28(fp)
   2bb18:	1005003a 	cmpeq	r2,r2,zero
   2bb1c:	1000051e 	bne	r2,zero,2bb34 <altera_avalon_jtag_uart_irq+0x1c4>
   2bb20:	e0bffe17 	ldw	r2,-8(fp)
   2bb24:	10c00d17 	ldw	r3,52(r2)
   2bb28:	e0bffe17 	ldw	r2,-8(fp)
   2bb2c:	10800c17 	ldw	r2,48(r2)
   2bb30:	18bfe31e 	bne	r3,r2,2bac0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2bb34:	e0bff917 	ldw	r2,-28(fp)
   2bb38:	1005003a 	cmpeq	r2,r2,zero
   2bb3c:	103f961e 	bne	r2,zero,2b998 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2bb40:	e0bffe17 	ldw	r2,-8(fp)
   2bb44:	10c00817 	ldw	r3,32(r2)
   2bb48:	00bfff44 	movi	r2,-3
   2bb4c:	1886703a 	and	r3,r3,r2
   2bb50:	e0bffe17 	ldw	r2,-8(fp)
   2bb54:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2bb58:	e0bffe17 	ldw	r2,-8(fp)
   2bb5c:	10800017 	ldw	r2,0(r2)
   2bb60:	11000104 	addi	r4,r2,4
   2bb64:	e0bffe17 	ldw	r2,-8(fp)
   2bb68:	10800817 	ldw	r2,32(r2)
   2bb6c:	1007883a 	mov	r3,r2
   2bb70:	2005883a 	mov	r2,r4
   2bb74:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2bb78:	e0bffd17 	ldw	r2,-12(fp)
   2bb7c:	10800104 	addi	r2,r2,4
   2bb80:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2bb84:	003f8406 	br	2b998 <altera_avalon_jtag_uart_irq+0x28>
}
   2bb88:	e037883a 	mov	sp,fp
   2bb8c:	df000017 	ldw	fp,0(sp)
   2bb90:	dec00104 	addi	sp,sp,4
   2bb94:	f800283a 	ret

0002bb98 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2bb98:	defffc04 	addi	sp,sp,-16
   2bb9c:	df000315 	stw	fp,12(sp)
   2bba0:	df000304 	addi	fp,sp,12
   2bba4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2bba8:	e0bfff17 	ldw	r2,-4(fp)
   2bbac:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2bbb0:	e0bffe17 	ldw	r2,-8(fp)
   2bbb4:	10800017 	ldw	r2,0(r2)
   2bbb8:	10800104 	addi	r2,r2,4
   2bbbc:	10800037 	ldwio	r2,0(r2)
   2bbc0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2bbc4:	e0bffd17 	ldw	r2,-12(fp)
   2bbc8:	1081000c 	andi	r2,r2,1024
   2bbcc:	1005003a 	cmpeq	r2,r2,zero
   2bbd0:	10000c1e 	bne	r2,zero,2bc04 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2bbd4:	e0bffe17 	ldw	r2,-8(fp)
   2bbd8:	10800017 	ldw	r2,0(r2)
   2bbdc:	11000104 	addi	r4,r2,4
   2bbe0:	e0bffe17 	ldw	r2,-8(fp)
   2bbe4:	10800817 	ldw	r2,32(r2)
   2bbe8:	10810014 	ori	r2,r2,1024
   2bbec:	1007883a 	mov	r3,r2
   2bbf0:	2005883a 	mov	r2,r4
   2bbf4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   2bbf8:	e0bffe17 	ldw	r2,-8(fp)
   2bbfc:	10000915 	stw	zero,36(r2)
   2bc00:	00000a06 	br	2bc2c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2bc04:	e0bffe17 	ldw	r2,-8(fp)
   2bc08:	10c00917 	ldw	r3,36(r2)
   2bc0c:	00a00034 	movhi	r2,32768
   2bc10:	10bfff04 	addi	r2,r2,-4
   2bc14:	10c00536 	bltu	r2,r3,2bc2c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   2bc18:	e0bffe17 	ldw	r2,-8(fp)
   2bc1c:	10800917 	ldw	r2,36(r2)
   2bc20:	10c00044 	addi	r3,r2,1
   2bc24:	e0bffe17 	ldw	r2,-8(fp)
   2bc28:	10c00915 	stw	r3,36(r2)
   2bc2c:	008000f4 	movhi	r2,3
   2bc30:	1083d204 	addi	r2,r2,3912
   2bc34:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2bc38:	e037883a 	mov	sp,fp
   2bc3c:	df000017 	ldw	fp,0(sp)
   2bc40:	dec00104 	addi	sp,sp,4
   2bc44:	f800283a 	ret

0002bc48 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2bc48:	defffc04 	addi	sp,sp,-16
   2bc4c:	df000315 	stw	fp,12(sp)
   2bc50:	df000304 	addi	fp,sp,12
   2bc54:	e13ffd15 	stw	r4,-12(fp)
   2bc58:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2bc5c:	00000706 	br	2bc7c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   2bc60:	e0bffe17 	ldw	r2,-8(fp)
   2bc64:	1090000c 	andi	r2,r2,16384
   2bc68:	1005003a 	cmpeq	r2,r2,zero
   2bc6c:	1000031e 	bne	r2,zero,2bc7c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   2bc70:	00bffd44 	movi	r2,-11
   2bc74:	e0bfff15 	stw	r2,-4(fp)
   2bc78:	00000b06 	br	2bca8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2bc7c:	e0bffd17 	ldw	r2,-12(fp)
   2bc80:	10c00d17 	ldw	r3,52(r2)
   2bc84:	e0bffd17 	ldw	r2,-12(fp)
   2bc88:	10800c17 	ldw	r2,48(r2)
   2bc8c:	18800526 	beq	r3,r2,2bca4 <altera_avalon_jtag_uart_close+0x5c>
   2bc90:	e0bffd17 	ldw	r2,-12(fp)
   2bc94:	10c00917 	ldw	r3,36(r2)
   2bc98:	e0bffd17 	ldw	r2,-12(fp)
   2bc9c:	10800117 	ldw	r2,4(r2)
   2bca0:	18bfef36 	bltu	r3,r2,2bc60 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2bca4:	e03fff15 	stw	zero,-4(fp)
   2bca8:	e0bfff17 	ldw	r2,-4(fp)
}
   2bcac:	e037883a 	mov	sp,fp
   2bcb0:	df000017 	ldw	fp,0(sp)
   2bcb4:	dec00104 	addi	sp,sp,4
   2bcb8:	f800283a 	ret

0002bcbc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2bcbc:	defff804 	addi	sp,sp,-32
   2bcc0:	df000715 	stw	fp,28(sp)
   2bcc4:	df000704 	addi	fp,sp,28
   2bcc8:	e13ffb15 	stw	r4,-20(fp)
   2bccc:	e17ffc15 	stw	r5,-16(fp)
   2bcd0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   2bcd4:	00bff9c4 	movi	r2,-25
   2bcd8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   2bcdc:	e0bffc17 	ldw	r2,-16(fp)
   2bce0:	e0bfff15 	stw	r2,-4(fp)
   2bce4:	e0ffff17 	ldw	r3,-4(fp)
   2bce8:	189a8060 	cmpeqi	r2,r3,27137
   2bcec:	1000041e 	bne	r2,zero,2bd00 <altera_avalon_jtag_uart_ioctl+0x44>
   2bcf0:	e0ffff17 	ldw	r3,-4(fp)
   2bcf4:	189a80a0 	cmpeqi	r2,r3,27138
   2bcf8:	10001b1e 	bne	r2,zero,2bd68 <altera_avalon_jtag_uart_ioctl+0xac>
   2bcfc:	00002706 	br	2bd9c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2bd00:	e0bffb17 	ldw	r2,-20(fp)
   2bd04:	10c00117 	ldw	r3,4(r2)
   2bd08:	00a00034 	movhi	r2,32768
   2bd0c:	10bfffc4 	addi	r2,r2,-1
   2bd10:	18802226 	beq	r3,r2,2bd9c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   2bd14:	e0bffd17 	ldw	r2,-12(fp)
   2bd18:	10800017 	ldw	r2,0(r2)
   2bd1c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2bd20:	e0bff917 	ldw	r2,-28(fp)
   2bd24:	10800090 	cmplti	r2,r2,2
   2bd28:	1000071e 	bne	r2,zero,2bd48 <altera_avalon_jtag_uart_ioctl+0x8c>
   2bd2c:	e0fff917 	ldw	r3,-28(fp)
   2bd30:	00a00034 	movhi	r2,32768
   2bd34:	10bfffc4 	addi	r2,r2,-1
   2bd38:	18800326 	beq	r3,r2,2bd48 <altera_avalon_jtag_uart_ioctl+0x8c>
   2bd3c:	e0bff917 	ldw	r2,-28(fp)
   2bd40:	e0bffe15 	stw	r2,-8(fp)
   2bd44:	00000306 	br	2bd54 <altera_avalon_jtag_uart_ioctl+0x98>
   2bd48:	00e00034 	movhi	r3,32768
   2bd4c:	18ffff84 	addi	r3,r3,-2
   2bd50:	e0fffe15 	stw	r3,-8(fp)
   2bd54:	e0bffb17 	ldw	r2,-20(fp)
   2bd58:	e0fffe17 	ldw	r3,-8(fp)
   2bd5c:	10c00115 	stw	r3,4(r2)
      rc = 0;
   2bd60:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   2bd64:	00000d06 	br	2bd9c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2bd68:	e0bffb17 	ldw	r2,-20(fp)
   2bd6c:	10c00117 	ldw	r3,4(r2)
   2bd70:	00a00034 	movhi	r2,32768
   2bd74:	10bfffc4 	addi	r2,r2,-1
   2bd78:	18800826 	beq	r3,r2,2bd9c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2bd7c:	e13ffd17 	ldw	r4,-12(fp)
   2bd80:	e0bffb17 	ldw	r2,-20(fp)
   2bd84:	10c00917 	ldw	r3,36(r2)
   2bd88:	e0bffb17 	ldw	r2,-20(fp)
   2bd8c:	10800117 	ldw	r2,4(r2)
   2bd90:	1885803a 	cmpltu	r2,r3,r2
   2bd94:	20800015 	stw	r2,0(r4)
      rc = 0;
   2bd98:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   2bd9c:	e0bffa17 	ldw	r2,-24(fp)
}
   2bda0:	e037883a 	mov	sp,fp
   2bda4:	df000017 	ldw	fp,0(sp)
   2bda8:	dec00104 	addi	sp,sp,4
   2bdac:	f800283a 	ret

0002bdb0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2bdb0:	defff204 	addi	sp,sp,-56
   2bdb4:	dfc00d15 	stw	ra,52(sp)
   2bdb8:	df000c15 	stw	fp,48(sp)
   2bdbc:	df000c04 	addi	fp,sp,48
   2bdc0:	e13ffb15 	stw	r4,-20(fp)
   2bdc4:	e17ffc15 	stw	r5,-16(fp)
   2bdc8:	e1bffd15 	stw	r6,-12(fp)
   2bdcc:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   2bdd0:	e0bffc17 	ldw	r2,-16(fp)
   2bdd4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2bdd8:	00004806 	br	2befc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2bddc:	e0bffb17 	ldw	r2,-20(fp)
   2bde0:	10800a17 	ldw	r2,40(r2)
   2bde4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2bde8:	e0bffb17 	ldw	r2,-20(fp)
   2bdec:	10800b17 	ldw	r2,44(r2)
   2bdf0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   2bdf4:	e0fff717 	ldw	r3,-36(fp)
   2bdf8:	e0bff617 	ldw	r2,-40(fp)
   2bdfc:	18800536 	bltu	r3,r2,2be14 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2be00:	e0bff717 	ldw	r2,-36(fp)
   2be04:	e0fff617 	ldw	r3,-40(fp)
   2be08:	10c5c83a 	sub	r2,r2,r3
   2be0c:	e0bff815 	stw	r2,-32(fp)
   2be10:	00000406 	br	2be24 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2be14:	00820004 	movi	r2,2048
   2be18:	e0fff617 	ldw	r3,-40(fp)
   2be1c:	10c5c83a 	sub	r2,r2,r3
   2be20:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   2be24:	e0bff817 	ldw	r2,-32(fp)
   2be28:	1005003a 	cmpeq	r2,r2,zero
   2be2c:	10001f1e 	bne	r2,zero,2beac <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   2be30:	e0fffd17 	ldw	r3,-12(fp)
   2be34:	e0bff817 	ldw	r2,-32(fp)
   2be38:	1880022e 	bgeu	r3,r2,2be44 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   2be3c:	e0bffd17 	ldw	r2,-12(fp)
   2be40:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2be44:	e0bffb17 	ldw	r2,-20(fp)
   2be48:	10c00e04 	addi	r3,r2,56
   2be4c:	e0bff617 	ldw	r2,-40(fp)
   2be50:	1887883a 	add	r3,r3,r2
   2be54:	e0bffa17 	ldw	r2,-24(fp)
   2be58:	1009883a 	mov	r4,r2
   2be5c:	180b883a 	mov	r5,r3
   2be60:	e1bff817 	ldw	r6,-32(fp)
   2be64:	00261f40 	call	261f4 <memcpy>
      ptr   += n;
   2be68:	e0fff817 	ldw	r3,-32(fp)
   2be6c:	e0bffa17 	ldw	r2,-24(fp)
   2be70:	10c5883a 	add	r2,r2,r3
   2be74:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   2be78:	e0fffd17 	ldw	r3,-12(fp)
   2be7c:	e0bff817 	ldw	r2,-32(fp)
   2be80:	1885c83a 	sub	r2,r3,r2
   2be84:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2be88:	e0fff617 	ldw	r3,-40(fp)
   2be8c:	e0bff817 	ldw	r2,-32(fp)
   2be90:	1885883a 	add	r2,r3,r2
   2be94:	10c1ffcc 	andi	r3,r2,2047
   2be98:	e0bffb17 	ldw	r2,-20(fp)
   2be9c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2bea0:	e0bffd17 	ldw	r2,-12(fp)
   2bea4:	10800048 	cmpgei	r2,r2,1
   2bea8:	103fcc1e 	bne	r2,zero,2bddc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   2beac:	e0fffa17 	ldw	r3,-24(fp)
   2beb0:	e0bffc17 	ldw	r2,-16(fp)
   2beb4:	1880141e 	bne	r3,r2,2bf08 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2beb8:	e0bffe17 	ldw	r2,-8(fp)
   2bebc:	1090000c 	andi	r2,r2,16384
   2bec0:	1004c03a 	cmpne	r2,r2,zero
   2bec4:	1000101e 	bne	r2,zero,2bf08 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2bec8:	e0bffb17 	ldw	r2,-20(fp)
   2becc:	10c00a17 	ldw	r3,40(r2)
   2bed0:	e0bff717 	ldw	r2,-36(fp)
   2bed4:	1880051e 	bne	r3,r2,2beec <altera_avalon_jtag_uart_read+0x13c>
   2bed8:	e0bffb17 	ldw	r2,-20(fp)
   2bedc:	10c00917 	ldw	r3,36(r2)
   2bee0:	e0bffb17 	ldw	r2,-20(fp)
   2bee4:	10800117 	ldw	r2,4(r2)
   2bee8:	18bff736 	bltu	r3,r2,2bec8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2beec:	e0bffb17 	ldw	r2,-20(fp)
   2bef0:	10c00a17 	ldw	r3,40(r2)
   2bef4:	e0bff717 	ldw	r2,-36(fp)
   2bef8:	18800326 	beq	r3,r2,2bf08 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2befc:	e0bffd17 	ldw	r2,-12(fp)
   2bf00:	10800048 	cmpgei	r2,r2,1
   2bf04:	103fb51e 	bne	r2,zero,2bddc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2bf08:	e0fffa17 	ldw	r3,-24(fp)
   2bf0c:	e0bffc17 	ldw	r2,-16(fp)
   2bf10:	18801926 	beq	r3,r2,2bf78 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2bf14:	0005303a 	rdctl	r2,status
   2bf18:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2bf1c:	e0fff517 	ldw	r3,-44(fp)
   2bf20:	00bfff84 	movi	r2,-2
   2bf24:	1884703a 	and	r2,r3,r2
   2bf28:	1001703a 	wrctl	status,r2
  
  return context;
   2bf2c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2bf30:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2bf34:	e0bffb17 	ldw	r2,-20(fp)
   2bf38:	10800817 	ldw	r2,32(r2)
   2bf3c:	10c00054 	ori	r3,r2,1
   2bf40:	e0bffb17 	ldw	r2,-20(fp)
   2bf44:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2bf48:	e0bffb17 	ldw	r2,-20(fp)
   2bf4c:	10800017 	ldw	r2,0(r2)
   2bf50:	11000104 	addi	r4,r2,4
   2bf54:	e0bffb17 	ldw	r2,-20(fp)
   2bf58:	10800817 	ldw	r2,32(r2)
   2bf5c:	1007883a 	mov	r3,r2
   2bf60:	2005883a 	mov	r2,r4
   2bf64:	10c00035 	stwio	r3,0(r2)
   2bf68:	e0bff917 	ldw	r2,-28(fp)
   2bf6c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2bf70:	e0bff417 	ldw	r2,-48(fp)
   2bf74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2bf78:	e0fffa17 	ldw	r3,-24(fp)
   2bf7c:	e0bffc17 	ldw	r2,-16(fp)
   2bf80:	18800526 	beq	r3,r2,2bf98 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   2bf84:	e0fffa17 	ldw	r3,-24(fp)
   2bf88:	e0bffc17 	ldw	r2,-16(fp)
   2bf8c:	1887c83a 	sub	r3,r3,r2
   2bf90:	e0ffff15 	stw	r3,-4(fp)
   2bf94:	00000906 	br	2bfbc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   2bf98:	e0bffe17 	ldw	r2,-8(fp)
   2bf9c:	1090000c 	andi	r2,r2,16384
   2bfa0:	1005003a 	cmpeq	r2,r2,zero
   2bfa4:	1000031e 	bne	r2,zero,2bfb4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   2bfa8:	00bffd44 	movi	r2,-11
   2bfac:	e0bfff15 	stw	r2,-4(fp)
   2bfb0:	00000206 	br	2bfbc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   2bfb4:	00bffec4 	movi	r2,-5
   2bfb8:	e0bfff15 	stw	r2,-4(fp)
   2bfbc:	e0bfff17 	ldw	r2,-4(fp)
}
   2bfc0:	e037883a 	mov	sp,fp
   2bfc4:	dfc00117 	ldw	ra,4(sp)
   2bfc8:	df000017 	ldw	fp,0(sp)
   2bfcc:	dec00204 	addi	sp,sp,8
   2bfd0:	f800283a 	ret

0002bfd4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2bfd4:	defff204 	addi	sp,sp,-56
   2bfd8:	dfc00d15 	stw	ra,52(sp)
   2bfdc:	df000c15 	stw	fp,48(sp)
   2bfe0:	df000c04 	addi	fp,sp,48
   2bfe4:	e13ffb15 	stw	r4,-20(fp)
   2bfe8:	e17ffc15 	stw	r5,-16(fp)
   2bfec:	e1bffd15 	stw	r6,-12(fp)
   2bff0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2bff4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2bff8:	e0bffc17 	ldw	r2,-16(fp)
   2bffc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2c000:	00003a06 	br	2c0ec <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2c004:	e0bffb17 	ldw	r2,-20(fp)
   2c008:	10800c17 	ldw	r2,48(r2)
   2c00c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   2c010:	e0bffb17 	ldw	r2,-20(fp)
   2c014:	10800d17 	ldw	r2,52(r2)
   2c018:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   2c01c:	e0fffa17 	ldw	r3,-24(fp)
   2c020:	e0bff917 	ldw	r2,-28(fp)
   2c024:	1880062e 	bgeu	r3,r2,2c040 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2c028:	e0fff917 	ldw	r3,-28(fp)
   2c02c:	e0bffa17 	ldw	r2,-24(fp)
   2c030:	1885c83a 	sub	r2,r3,r2
   2c034:	10bfffc4 	addi	r2,r2,-1
   2c038:	e0bff815 	stw	r2,-32(fp)
   2c03c:	00000c06 	br	2c070 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   2c040:	e0bff917 	ldw	r2,-28(fp)
   2c044:	1005003a 	cmpeq	r2,r2,zero
   2c048:	1000051e 	bne	r2,zero,2c060 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2c04c:	00820004 	movi	r2,2048
   2c050:	e0fffa17 	ldw	r3,-24(fp)
   2c054:	10c5c83a 	sub	r2,r2,r3
   2c058:	e0bff815 	stw	r2,-32(fp)
   2c05c:	00000406 	br	2c070 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2c060:	0081ffc4 	movi	r2,2047
   2c064:	e0fffa17 	ldw	r3,-24(fp)
   2c068:	10c5c83a 	sub	r2,r2,r3
   2c06c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   2c070:	e0bff817 	ldw	r2,-32(fp)
   2c074:	1005003a 	cmpeq	r2,r2,zero
   2c078:	10001f1e 	bne	r2,zero,2c0f8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   2c07c:	e0fffd17 	ldw	r3,-12(fp)
   2c080:	e0bff817 	ldw	r2,-32(fp)
   2c084:	1880022e 	bgeu	r3,r2,2c090 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   2c088:	e0bffd17 	ldw	r2,-12(fp)
   2c08c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2c090:	e0bffb17 	ldw	r2,-20(fp)
   2c094:	10c20e04 	addi	r3,r2,2104
   2c098:	e0bffa17 	ldw	r2,-24(fp)
   2c09c:	1885883a 	add	r2,r3,r2
   2c0a0:	e0fffc17 	ldw	r3,-16(fp)
   2c0a4:	1009883a 	mov	r4,r2
   2c0a8:	180b883a 	mov	r5,r3
   2c0ac:	e1bff817 	ldw	r6,-32(fp)
   2c0b0:	00261f40 	call	261f4 <memcpy>
      ptr   += n;
   2c0b4:	e0fff817 	ldw	r3,-32(fp)
   2c0b8:	e0bffc17 	ldw	r2,-16(fp)
   2c0bc:	10c5883a 	add	r2,r2,r3
   2c0c0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   2c0c4:	e0fffd17 	ldw	r3,-12(fp)
   2c0c8:	e0bff817 	ldw	r2,-32(fp)
   2c0cc:	1885c83a 	sub	r2,r3,r2
   2c0d0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2c0d4:	e0fffa17 	ldw	r3,-24(fp)
   2c0d8:	e0bff817 	ldw	r2,-32(fp)
   2c0dc:	1885883a 	add	r2,r3,r2
   2c0e0:	10c1ffcc 	andi	r3,r2,2047
   2c0e4:	e0bffb17 	ldw	r2,-20(fp)
   2c0e8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2c0ec:	e0bffd17 	ldw	r2,-12(fp)
   2c0f0:	10800048 	cmpgei	r2,r2,1
   2c0f4:	103fc31e 	bne	r2,zero,2c004 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2c0f8:	0005303a 	rdctl	r2,status
   2c0fc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2c100:	e0fff517 	ldw	r3,-44(fp)
   2c104:	00bfff84 	movi	r2,-2
   2c108:	1884703a 	and	r2,r3,r2
   2c10c:	1001703a 	wrctl	status,r2
  
  return context;
   2c110:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2c114:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2c118:	e0bffb17 	ldw	r2,-20(fp)
   2c11c:	10800817 	ldw	r2,32(r2)
   2c120:	10c00094 	ori	r3,r2,2
   2c124:	e0bffb17 	ldw	r2,-20(fp)
   2c128:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2c12c:	e0bffb17 	ldw	r2,-20(fp)
   2c130:	10800017 	ldw	r2,0(r2)
   2c134:	11000104 	addi	r4,r2,4
   2c138:	e0bffb17 	ldw	r2,-20(fp)
   2c13c:	10800817 	ldw	r2,32(r2)
   2c140:	1007883a 	mov	r3,r2
   2c144:	2005883a 	mov	r2,r4
   2c148:	10c00035 	stwio	r3,0(r2)
   2c14c:	e0bff717 	ldw	r2,-36(fp)
   2c150:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2c154:	e0bff417 	ldw	r2,-48(fp)
   2c158:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2c15c:	e0bffd17 	ldw	r2,-12(fp)
   2c160:	10800050 	cmplti	r2,r2,1
   2c164:	1000111e 	bne	r2,zero,2c1ac <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   2c168:	e0bffe17 	ldw	r2,-8(fp)
   2c16c:	1090000c 	andi	r2,r2,16384
   2c170:	1004c03a 	cmpne	r2,r2,zero
   2c174:	1000101e 	bne	r2,zero,2c1b8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2c178:	e0bffb17 	ldw	r2,-20(fp)
   2c17c:	10c00d17 	ldw	r3,52(r2)
   2c180:	e0bff917 	ldw	r2,-28(fp)
   2c184:	1880051e 	bne	r3,r2,2c19c <altera_avalon_jtag_uart_write+0x1c8>
   2c188:	e0bffb17 	ldw	r2,-20(fp)
   2c18c:	10c00917 	ldw	r3,36(r2)
   2c190:	e0bffb17 	ldw	r2,-20(fp)
   2c194:	10800117 	ldw	r2,4(r2)
   2c198:	18bff736 	bltu	r3,r2,2c178 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   2c19c:	e0bffb17 	ldw	r2,-20(fp)
   2c1a0:	10c00d17 	ldw	r3,52(r2)
   2c1a4:	e0bff917 	ldw	r2,-28(fp)
   2c1a8:	18800326 	beq	r3,r2,2c1b8 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   2c1ac:	e0bffd17 	ldw	r2,-12(fp)
   2c1b0:	10800048 	cmpgei	r2,r2,1
   2c1b4:	103fcd1e 	bne	r2,zero,2c0ec <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2c1b8:	e0fffc17 	ldw	r3,-16(fp)
   2c1bc:	e0bff617 	ldw	r2,-40(fp)
   2c1c0:	18800526 	beq	r3,r2,2c1d8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   2c1c4:	e0fffc17 	ldw	r3,-16(fp)
   2c1c8:	e0bff617 	ldw	r2,-40(fp)
   2c1cc:	1887c83a 	sub	r3,r3,r2
   2c1d0:	e0ffff15 	stw	r3,-4(fp)
   2c1d4:	00000906 	br	2c1fc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   2c1d8:	e0bffe17 	ldw	r2,-8(fp)
   2c1dc:	1090000c 	andi	r2,r2,16384
   2c1e0:	1005003a 	cmpeq	r2,r2,zero
   2c1e4:	1000031e 	bne	r2,zero,2c1f4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   2c1e8:	00bffd44 	movi	r2,-11
   2c1ec:	e0bfff15 	stw	r2,-4(fp)
   2c1f0:	00000206 	br	2c1fc <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   2c1f4:	00bffec4 	movi	r2,-5
   2c1f8:	e0bfff15 	stw	r2,-4(fp)
   2c1fc:	e0bfff17 	ldw	r2,-4(fp)
}
   2c200:	e037883a 	mov	sp,fp
   2c204:	dfc00117 	ldw	ra,4(sp)
   2c208:	df000017 	ldw	fp,0(sp)
   2c20c:	dec00204 	addi	sp,sp,8
   2c210:	f800283a 	ret

0002c214 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2c214:	defffa04 	addi	sp,sp,-24
   2c218:	dfc00515 	stw	ra,20(sp)
   2c21c:	df000415 	stw	fp,16(sp)
   2c220:	df000404 	addi	fp,sp,16
   2c224:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   2c228:	e0bfff17 	ldw	r2,-4(fp)
   2c22c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   2c230:	e0bfff17 	ldw	r2,-4(fp)
   2c234:	10800104 	addi	r2,r2,4
   2c238:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2c23c:	0005303a 	rdctl	r2,status
   2c240:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2c244:	e0fffd17 	ldw	r3,-12(fp)
   2c248:	00bfff84 	movi	r2,-2
   2c24c:	1884703a 	and	r2,r3,r2
   2c250:	1001703a 	wrctl	status,r2
  
  return context;
   2c254:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   2c258:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   2c25c:	002cb480 	call	2cb48 <alt_tick>
   2c260:	e0bffe17 	ldw	r2,-8(fp)
   2c264:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2c268:	e0bffc17 	ldw	r2,-16(fp)
   2c26c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   2c270:	e037883a 	mov	sp,fp
   2c274:	dfc00117 	ldw	ra,4(sp)
   2c278:	df000017 	ldw	fp,0(sp)
   2c27c:	dec00204 	addi	sp,sp,8
   2c280:	f800283a 	ret

0002c284 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   2c284:	defff804 	addi	sp,sp,-32
   2c288:	dfc00715 	stw	ra,28(sp)
   2c28c:	df000615 	stw	fp,24(sp)
   2c290:	df000604 	addi	fp,sp,24
   2c294:	e13ffc15 	stw	r4,-16(fp)
   2c298:	e17ffd15 	stw	r5,-12(fp)
   2c29c:	e1bffe15 	stw	r6,-8(fp)
   2c2a0:	e1ffff15 	stw	r7,-4(fp)
   2c2a4:	e0bfff17 	ldw	r2,-4(fp)
   2c2a8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2c2ac:	008000f4 	movhi	r2,3
   2c2b0:	1083d204 	addi	r2,r2,3912
   2c2b4:	10800017 	ldw	r2,0(r2)
   2c2b8:	1004c03a 	cmpne	r2,r2,zero
   2c2bc:	1000041e 	bne	r2,zero,2c2d0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   2c2c0:	00c000f4 	movhi	r3,3
   2c2c4:	18c3d204 	addi	r3,r3,3912
   2c2c8:	e0bffb17 	ldw	r2,-20(fp)
   2c2cc:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   2c2d0:	e0bffc17 	ldw	r2,-16(fp)
   2c2d4:	10800104 	addi	r2,r2,4
   2c2d8:	1007883a 	mov	r3,r2
   2c2dc:	008001c4 	movi	r2,7
   2c2e0:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2c2e4:	d8000015 	stw	zero,0(sp)
   2c2e8:	e13ffd17 	ldw	r4,-12(fp)
   2c2ec:	e17ffe17 	ldw	r5,-8(fp)
   2c2f0:	018000f4 	movhi	r6,3
   2c2f4:	31b08504 	addi	r6,r6,-15852
   2c2f8:	e1fffc17 	ldw	r7,-16(fp)
   2c2fc:	002ab880 	call	2ab88 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2c300:	e037883a 	mov	sp,fp
   2c304:	dfc00117 	ldw	ra,4(sp)
   2c308:	df000017 	ldw	fp,0(sp)
   2c30c:	dec00204 	addi	sp,sp,8
   2c310:	f800283a 	ret

0002c314 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2c314:	defff404 	addi	sp,sp,-48
   2c318:	df000b15 	stw	fp,44(sp)
   2c31c:	df000b04 	addi	fp,sp,44
   2c320:	e13ffb15 	stw	r4,-20(fp)
   2c324:	e17ffc15 	stw	r5,-16(fp)
   2c328:	e1bffd15 	stw	r6,-12(fp)
   2c32c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2c330:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2c334:	008000f4 	movhi	r2,3
   2c338:	1083d204 	addi	r2,r2,3912
   2c33c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   2c340:	1005003a 	cmpeq	r2,r2,zero
   2c344:	1000411e 	bne	r2,zero,2c44c <alt_alarm_start+0x138>
  {
    if (alarm)
   2c348:	e0bffb17 	ldw	r2,-20(fp)
   2c34c:	1005003a 	cmpeq	r2,r2,zero
   2c350:	10003b1e 	bne	r2,zero,2c440 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   2c354:	e0fffb17 	ldw	r3,-20(fp)
   2c358:	e0bffd17 	ldw	r2,-12(fp)
   2c35c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   2c360:	e0fffb17 	ldw	r3,-20(fp)
   2c364:	e0bffe17 	ldw	r2,-8(fp)
   2c368:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2c36c:	0005303a 	rdctl	r2,status
   2c370:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2c374:	e0fff817 	ldw	r3,-32(fp)
   2c378:	00bfff84 	movi	r2,-2
   2c37c:	1884703a 	and	r2,r3,r2
   2c380:	1001703a 	wrctl	status,r2
  
  return context;
   2c384:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   2c388:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2c38c:	008000f4 	movhi	r2,3
   2c390:	1083d304 	addi	r2,r2,3916
   2c394:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   2c398:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2c39c:	e0fffc17 	ldw	r3,-16(fp)
   2c3a0:	e0bff917 	ldw	r2,-28(fp)
   2c3a4:	1885883a 	add	r2,r3,r2
   2c3a8:	10c00044 	addi	r3,r2,1
   2c3ac:	e0bffb17 	ldw	r2,-20(fp)
   2c3b0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2c3b4:	e0bffb17 	ldw	r2,-20(fp)
   2c3b8:	10c00217 	ldw	r3,8(r2)
   2c3bc:	e0bff917 	ldw	r2,-28(fp)
   2c3c0:	1880042e 	bgeu	r3,r2,2c3d4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   2c3c4:	e0fffb17 	ldw	r3,-20(fp)
   2c3c8:	00800044 	movi	r2,1
   2c3cc:	18800405 	stb	r2,16(r3)
   2c3d0:	00000206 	br	2c3dc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   2c3d4:	e0bffb17 	ldw	r2,-20(fp)
   2c3d8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2c3dc:	e0fffb17 	ldw	r3,-20(fp)
   2c3e0:	008000f4 	movhi	r2,3
   2c3e4:	10bd2b04 	addi	r2,r2,-2900
   2c3e8:	e0bff615 	stw	r2,-40(fp)
   2c3ec:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2c3f0:	e0fff717 	ldw	r3,-36(fp)
   2c3f4:	e0bff617 	ldw	r2,-40(fp)
   2c3f8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   2c3fc:	e0bff617 	ldw	r2,-40(fp)
   2c400:	10c00017 	ldw	r3,0(r2)
   2c404:	e0bff717 	ldw	r2,-36(fp)
   2c408:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2c40c:	e0bff617 	ldw	r2,-40(fp)
   2c410:	10c00017 	ldw	r3,0(r2)
   2c414:	e0bff717 	ldw	r2,-36(fp)
   2c418:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   2c41c:	e0fff617 	ldw	r3,-40(fp)
   2c420:	e0bff717 	ldw	r2,-36(fp)
   2c424:	18800015 	stw	r2,0(r3)
   2c428:	e0bffa17 	ldw	r2,-24(fp)
   2c42c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2c430:	e0bff517 	ldw	r2,-44(fp)
   2c434:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2c438:	e03fff15 	stw	zero,-4(fp)
   2c43c:	00000506 	br	2c454 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   2c440:	00bffa84 	movi	r2,-22
   2c444:	e0bfff15 	stw	r2,-4(fp)
   2c448:	00000206 	br	2c454 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   2c44c:	00bfde84 	movi	r2,-134
   2c450:	e0bfff15 	stw	r2,-4(fp)
   2c454:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   2c458:	e037883a 	mov	sp,fp
   2c45c:	df000017 	ldw	fp,0(sp)
   2c460:	dec00104 	addi	sp,sp,4
   2c464:	f800283a 	ret

0002c468 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2c468:	deffff04 	addi	sp,sp,-4
   2c46c:	df000015 	stw	fp,0(sp)
   2c470:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2c474:	e037883a 	mov	sp,fp
   2c478:	df000017 	ldw	fp,0(sp)
   2c47c:	dec00104 	addi	sp,sp,4
   2c480:	f800283a 	ret

0002c484 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2c484:	defff904 	addi	sp,sp,-28
   2c488:	dfc00615 	stw	ra,24(sp)
   2c48c:	df000515 	stw	fp,20(sp)
   2c490:	df000504 	addi	fp,sp,20
   2c494:	e13ffd15 	stw	r4,-12(fp)
   2c498:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2c49c:	e0bffd17 	ldw	r2,-12(fp)
   2c4a0:	1005003a 	cmpeq	r2,r2,zero
   2c4a4:	1000041e 	bne	r2,zero,2c4b8 <alt_dev_llist_insert+0x34>
   2c4a8:	e0bffd17 	ldw	r2,-12(fp)
   2c4ac:	10800217 	ldw	r2,8(r2)
   2c4b0:	1004c03a 	cmpne	r2,r2,zero
   2c4b4:	1000071e 	bne	r2,zero,2c4d4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   2c4b8:	002c5380 	call	2c538 <alt_get_errno>
   2c4bc:	1007883a 	mov	r3,r2
   2c4c0:	00800584 	movi	r2,22
   2c4c4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2c4c8:	00bffa84 	movi	r2,-22
   2c4cc:	e0bfff15 	stw	r2,-4(fp)
   2c4d0:	00001306 	br	2c520 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2c4d4:	e0fffd17 	ldw	r3,-12(fp)
   2c4d8:	e0bffe17 	ldw	r2,-8(fp)
   2c4dc:	e0bffb15 	stw	r2,-20(fp)
   2c4e0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2c4e4:	e0fffc17 	ldw	r3,-16(fp)
   2c4e8:	e0bffb17 	ldw	r2,-20(fp)
   2c4ec:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   2c4f0:	e0bffb17 	ldw	r2,-20(fp)
   2c4f4:	10c00017 	ldw	r3,0(r2)
   2c4f8:	e0bffc17 	ldw	r2,-16(fp)
   2c4fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2c500:	e0bffb17 	ldw	r2,-20(fp)
   2c504:	10c00017 	ldw	r3,0(r2)
   2c508:	e0bffc17 	ldw	r2,-16(fp)
   2c50c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   2c510:	e0fffb17 	ldw	r3,-20(fp)
   2c514:	e0bffc17 	ldw	r2,-16(fp)
   2c518:	18800015 	stw	r2,0(r3)

  return 0;  
   2c51c:	e03fff15 	stw	zero,-4(fp)
   2c520:	e0bfff17 	ldw	r2,-4(fp)
}
   2c524:	e037883a 	mov	sp,fp
   2c528:	dfc00117 	ldw	ra,4(sp)
   2c52c:	df000017 	ldw	fp,0(sp)
   2c530:	dec00204 	addi	sp,sp,8
   2c534:	f800283a 	ret

0002c538 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2c538:	defffd04 	addi	sp,sp,-12
   2c53c:	dfc00215 	stw	ra,8(sp)
   2c540:	df000115 	stw	fp,4(sp)
   2c544:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2c548:	008000f4 	movhi	r2,3
   2c54c:	10bd2804 	addi	r2,r2,-2912
   2c550:	10800017 	ldw	r2,0(r2)
   2c554:	1005003a 	cmpeq	r2,r2,zero
   2c558:	1000061e 	bne	r2,zero,2c574 <alt_get_errno+0x3c>
   2c55c:	008000f4 	movhi	r2,3
   2c560:	10bd2804 	addi	r2,r2,-2912
   2c564:	10800017 	ldw	r2,0(r2)
   2c568:	103ee83a 	callr	r2
   2c56c:	e0bfff15 	stw	r2,-4(fp)
   2c570:	00000306 	br	2c580 <alt_get_errno+0x48>
   2c574:	008000f4 	movhi	r2,3
   2c578:	1083cd04 	addi	r2,r2,3892
   2c57c:	e0bfff15 	stw	r2,-4(fp)
   2c580:	e0bfff17 	ldw	r2,-4(fp)
}
   2c584:	e037883a 	mov	sp,fp
   2c588:	dfc00117 	ldw	ra,4(sp)
   2c58c:	df000017 	ldw	fp,0(sp)
   2c590:	dec00204 	addi	sp,sp,8
   2c594:	f800283a 	ret

0002c598 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2c598:	defffd04 	addi	sp,sp,-12
   2c59c:	dfc00215 	stw	ra,8(sp)
   2c5a0:	df000115 	stw	fp,4(sp)
   2c5a4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2c5a8:	00bfff04 	movi	r2,-4
   2c5ac:	00c000f4 	movhi	r3,3
   2c5b0:	18f4dc04 	addi	r3,r3,-11408
   2c5b4:	1885883a 	add	r2,r3,r2
   2c5b8:	e0bfff15 	stw	r2,-4(fp)
   2c5bc:	00000606 	br	2c5d8 <_do_ctors+0x40>
        (*ctor) (); 
   2c5c0:	e0bfff17 	ldw	r2,-4(fp)
   2c5c4:	10800017 	ldw	r2,0(r2)
   2c5c8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2c5cc:	e0bfff17 	ldw	r2,-4(fp)
   2c5d0:	10bfff04 	addi	r2,r2,-4
   2c5d4:	e0bfff15 	stw	r2,-4(fp)
   2c5d8:	e0ffff17 	ldw	r3,-4(fp)
   2c5dc:	008000f4 	movhi	r2,3
   2c5e0:	10b4db04 	addi	r2,r2,-11412
   2c5e4:	18bff62e 	bgeu	r3,r2,2c5c0 <_do_ctors+0x28>
        (*ctor) (); 
}
   2c5e8:	e037883a 	mov	sp,fp
   2c5ec:	dfc00117 	ldw	ra,4(sp)
   2c5f0:	df000017 	ldw	fp,0(sp)
   2c5f4:	dec00204 	addi	sp,sp,8
   2c5f8:	f800283a 	ret

0002c5fc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2c5fc:	defffd04 	addi	sp,sp,-12
   2c600:	dfc00215 	stw	ra,8(sp)
   2c604:	df000115 	stw	fp,4(sp)
   2c608:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2c60c:	00bfff04 	movi	r2,-4
   2c610:	00c000f4 	movhi	r3,3
   2c614:	18f4dc04 	addi	r3,r3,-11408
   2c618:	1885883a 	add	r2,r3,r2
   2c61c:	e0bfff15 	stw	r2,-4(fp)
   2c620:	00000606 	br	2c63c <_do_dtors+0x40>
        (*dtor) (); 
   2c624:	e0bfff17 	ldw	r2,-4(fp)
   2c628:	10800017 	ldw	r2,0(r2)
   2c62c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2c630:	e0bfff17 	ldw	r2,-4(fp)
   2c634:	10bfff04 	addi	r2,r2,-4
   2c638:	e0bfff15 	stw	r2,-4(fp)
   2c63c:	e0ffff17 	ldw	r3,-4(fp)
   2c640:	008000f4 	movhi	r2,3
   2c644:	10b4dc04 	addi	r2,r2,-11408
   2c648:	18bff62e 	bgeu	r3,r2,2c624 <_do_dtors+0x28>
        (*dtor) (); 
}
   2c64c:	e037883a 	mov	sp,fp
   2c650:	dfc00117 	ldw	ra,4(sp)
   2c654:	df000017 	ldw	fp,0(sp)
   2c658:	dec00204 	addi	sp,sp,8
   2c65c:	f800283a 	ret

0002c660 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2c660:	deffff04 	addi	sp,sp,-4
   2c664:	df000015 	stw	fp,0(sp)
   2c668:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   2c66c:	e037883a 	mov	sp,fp
   2c670:	df000017 	ldw	fp,0(sp)
   2c674:	dec00104 	addi	sp,sp,4
   2c678:	f800283a 	ret

0002c67c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2c67c:	defff804 	addi	sp,sp,-32
   2c680:	dfc00715 	stw	ra,28(sp)
   2c684:	df000615 	stw	fp,24(sp)
   2c688:	dc000515 	stw	r16,20(sp)
   2c68c:	df000504 	addi	fp,sp,20
   2c690:	e13ffc15 	stw	r4,-16(fp)
   2c694:	e17ffd15 	stw	r5,-12(fp)
   2c698:	e1bffe15 	stw	r6,-8(fp)
   2c69c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2c6a0:	e13ffd17 	ldw	r4,-12(fp)
   2c6a4:	e17ffe17 	ldw	r5,-8(fp)
   2c6a8:	e1bfff17 	ldw	r6,-4(fp)
   2c6ac:	002c8c40 	call	2c8c4 <open>
   2c6b0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   2c6b4:	e0bffb17 	ldw	r2,-20(fp)
   2c6b8:	1004803a 	cmplt	r2,r2,zero
   2c6bc:	10001f1e 	bne	r2,zero,2c73c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   2c6c0:	e13ffb17 	ldw	r4,-20(fp)
   2c6c4:	040000f4 	movhi	r16,3
   2c6c8:	8438a304 	addi	r16,r16,-7540
   2c6cc:	01400304 	movi	r5,12
   2c6d0:	002a1d40 	call	2a1d4 <__mulsi3>
   2c6d4:	1405883a 	add	r2,r2,r16
   2c6d8:	10c00017 	ldw	r3,0(r2)
   2c6dc:	e0bffc17 	ldw	r2,-16(fp)
   2c6e0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2c6e4:	e13ffb17 	ldw	r4,-20(fp)
   2c6e8:	040000f4 	movhi	r16,3
   2c6ec:	8438a304 	addi	r16,r16,-7540
   2c6f0:	01400304 	movi	r5,12
   2c6f4:	002a1d40 	call	2a1d4 <__mulsi3>
   2c6f8:	1405883a 	add	r2,r2,r16
   2c6fc:	10800104 	addi	r2,r2,4
   2c700:	10c00017 	ldw	r3,0(r2)
   2c704:	e0bffc17 	ldw	r2,-16(fp)
   2c708:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2c70c:	e13ffb17 	ldw	r4,-20(fp)
   2c710:	040000f4 	movhi	r16,3
   2c714:	8438a304 	addi	r16,r16,-7540
   2c718:	01400304 	movi	r5,12
   2c71c:	002a1d40 	call	2a1d4 <__mulsi3>
   2c720:	1405883a 	add	r2,r2,r16
   2c724:	10800204 	addi	r2,r2,8
   2c728:	10c00017 	ldw	r3,0(r2)
   2c72c:	e0bffc17 	ldw	r2,-16(fp)
   2c730:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2c734:	e13ffb17 	ldw	r4,-20(fp)
   2c738:	002b3e80 	call	2b3e8 <alt_release_fd>
  }
} 
   2c73c:	e037883a 	mov	sp,fp
   2c740:	dfc00217 	ldw	ra,8(sp)
   2c744:	df000117 	ldw	fp,4(sp)
   2c748:	dc000017 	ldw	r16,0(sp)
   2c74c:	dec00304 	addi	sp,sp,12
   2c750:	f800283a 	ret

0002c754 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2c754:	defffb04 	addi	sp,sp,-20
   2c758:	dfc00415 	stw	ra,16(sp)
   2c75c:	df000315 	stw	fp,12(sp)
   2c760:	df000304 	addi	fp,sp,12
   2c764:	e13ffd15 	stw	r4,-12(fp)
   2c768:	e17ffe15 	stw	r5,-8(fp)
   2c76c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2c770:	010000f4 	movhi	r4,3
   2c774:	2138a604 	addi	r4,r4,-7528
   2c778:	e17ffd17 	ldw	r5,-12(fp)
   2c77c:	01800044 	movi	r6,1
   2c780:	01c07fc4 	movi	r7,511
   2c784:	002c67c0 	call	2c67c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2c788:	010000f4 	movhi	r4,3
   2c78c:	2138a304 	addi	r4,r4,-7540
   2c790:	e17ffe17 	ldw	r5,-8(fp)
   2c794:	000d883a 	mov	r6,zero
   2c798:	01c07fc4 	movi	r7,511
   2c79c:	002c67c0 	call	2c67c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2c7a0:	010000f4 	movhi	r4,3
   2c7a4:	2138a904 	addi	r4,r4,-7516
   2c7a8:	e17fff17 	ldw	r5,-4(fp)
   2c7ac:	01800044 	movi	r6,1
   2c7b0:	01c07fc4 	movi	r7,511
   2c7b4:	002c67c0 	call	2c67c <alt_open_fd>
}  
   2c7b8:	e037883a 	mov	sp,fp
   2c7bc:	dfc00117 	ldw	ra,4(sp)
   2c7c0:	df000017 	ldw	fp,0(sp)
   2c7c4:	dec00204 	addi	sp,sp,8
   2c7c8:	f800283a 	ret

0002c7cc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2c7cc:	defffa04 	addi	sp,sp,-24
   2c7d0:	dfc00515 	stw	ra,20(sp)
   2c7d4:	df000415 	stw	fp,16(sp)
   2c7d8:	dc000315 	stw	r16,12(sp)
   2c7dc:	df000304 	addi	fp,sp,12
   2c7e0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2c7e4:	e0bffe17 	ldw	r2,-8(fp)
   2c7e8:	10800217 	ldw	r2,8(r2)
   2c7ec:	10d00034 	orhi	r3,r2,16384
   2c7f0:	e0bffe17 	ldw	r2,-8(fp)
   2c7f4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2c7f8:	e03ffd15 	stw	zero,-12(fp)
   2c7fc:	00002306 	br	2c88c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2c800:	e13ffd17 	ldw	r4,-12(fp)
   2c804:	040000f4 	movhi	r16,3
   2c808:	8438a304 	addi	r16,r16,-7540
   2c80c:	01400304 	movi	r5,12
   2c810:	002a1d40 	call	2a1d4 <__mulsi3>
   2c814:	1405883a 	add	r2,r2,r16
   2c818:	10c00017 	ldw	r3,0(r2)
   2c81c:	e0bffe17 	ldw	r2,-8(fp)
   2c820:	10800017 	ldw	r2,0(r2)
   2c824:	1880161e 	bne	r3,r2,2c880 <alt_file_locked+0xb4>
   2c828:	e13ffd17 	ldw	r4,-12(fp)
   2c82c:	040000f4 	movhi	r16,3
   2c830:	8438a304 	addi	r16,r16,-7540
   2c834:	01400304 	movi	r5,12
   2c838:	002a1d40 	call	2a1d4 <__mulsi3>
   2c83c:	1405883a 	add	r2,r2,r16
   2c840:	10800204 	addi	r2,r2,8
   2c844:	10800017 	ldw	r2,0(r2)
   2c848:	1004403a 	cmpge	r2,r2,zero
   2c84c:	10000c1e 	bne	r2,zero,2c880 <alt_file_locked+0xb4>
   2c850:	e13ffd17 	ldw	r4,-12(fp)
   2c854:	01400304 	movi	r5,12
   2c858:	002a1d40 	call	2a1d4 <__mulsi3>
   2c85c:	1007883a 	mov	r3,r2
   2c860:	008000f4 	movhi	r2,3
   2c864:	10b8a304 	addi	r2,r2,-7540
   2c868:	1887883a 	add	r3,r3,r2
   2c86c:	e0bffe17 	ldw	r2,-8(fp)
   2c870:	18800326 	beq	r3,r2,2c880 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2c874:	00bffcc4 	movi	r2,-13
   2c878:	e0bfff15 	stw	r2,-4(fp)
   2c87c:	00000a06 	br	2c8a8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2c880:	e0bffd17 	ldw	r2,-12(fp)
   2c884:	10800044 	addi	r2,r2,1
   2c888:	e0bffd15 	stw	r2,-12(fp)
   2c88c:	008000f4 	movhi	r2,3
   2c890:	10bd2704 	addi	r2,r2,-2916
   2c894:	10800017 	ldw	r2,0(r2)
   2c898:	1007883a 	mov	r3,r2
   2c89c:	e0bffd17 	ldw	r2,-12(fp)
   2c8a0:	18bfd72e 	bgeu	r3,r2,2c800 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2c8a4:	e03fff15 	stw	zero,-4(fp)
   2c8a8:	e0bfff17 	ldw	r2,-4(fp)
}
   2c8ac:	e037883a 	mov	sp,fp
   2c8b0:	dfc00217 	ldw	ra,8(sp)
   2c8b4:	df000117 	ldw	fp,4(sp)
   2c8b8:	dc000017 	ldw	r16,0(sp)
   2c8bc:	dec00304 	addi	sp,sp,12
   2c8c0:	f800283a 	ret

0002c8c4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2c8c4:	defff404 	addi	sp,sp,-48
   2c8c8:	dfc00b15 	stw	ra,44(sp)
   2c8cc:	df000a15 	stw	fp,40(sp)
   2c8d0:	df000a04 	addi	fp,sp,40
   2c8d4:	e13ffb15 	stw	r4,-20(fp)
   2c8d8:	e17ffc15 	stw	r5,-16(fp)
   2c8dc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2c8e0:	00bfffc4 	movi	r2,-1
   2c8e4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   2c8e8:	00bffb44 	movi	r2,-19
   2c8ec:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   2c8f0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2c8f4:	e13ffb17 	ldw	r4,-20(fp)
   2c8f8:	014000f4 	movhi	r5,3
   2c8fc:	297d2504 	addi	r5,r5,-2924
   2c900:	002cc740 	call	2cc74 <alt_find_dev>
   2c904:	e0bffa15 	stw	r2,-24(fp)
   2c908:	e0bffa17 	ldw	r2,-24(fp)
   2c90c:	1004c03a 	cmpne	r2,r2,zero
   2c910:	1000051e 	bne	r2,zero,2c928 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2c914:	e13ffb17 	ldw	r4,-20(fp)
   2c918:	002cd080 	call	2cd08 <alt_find_file>
   2c91c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   2c920:	00800044 	movi	r2,1
   2c924:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2c928:	e0bffa17 	ldw	r2,-24(fp)
   2c92c:	1005003a 	cmpeq	r2,r2,zero
   2c930:	1000311e 	bne	r2,zero,2c9f8 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2c934:	e13ffa17 	ldw	r4,-24(fp)
   2c938:	002ce280 	call	2ce28 <alt_get_fd>
   2c93c:	e0bff815 	stw	r2,-32(fp)
   2c940:	e0bff817 	ldw	r2,-32(fp)
   2c944:	1004403a 	cmpge	r2,r2,zero
   2c948:	1000031e 	bne	r2,zero,2c958 <open+0x94>
    {
      status = index;
   2c94c:	e0bff817 	ldw	r2,-32(fp)
   2c950:	e0bff715 	stw	r2,-36(fp)
   2c954:	00002a06 	br	2ca00 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   2c958:	e13ff817 	ldw	r4,-32(fp)
   2c95c:	01400304 	movi	r5,12
   2c960:	002a1d40 	call	2a1d4 <__mulsi3>
   2c964:	1007883a 	mov	r3,r2
   2c968:	008000f4 	movhi	r2,3
   2c96c:	10b8a304 	addi	r2,r2,-7540
   2c970:	1885883a 	add	r2,r3,r2
   2c974:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2c978:	e0fffc17 	ldw	r3,-16(fp)
   2c97c:	00900034 	movhi	r2,16384
   2c980:	10bfffc4 	addi	r2,r2,-1
   2c984:	1886703a 	and	r3,r3,r2
   2c988:	e0bff917 	ldw	r2,-28(fp)
   2c98c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2c990:	e0bff617 	ldw	r2,-40(fp)
   2c994:	1004c03a 	cmpne	r2,r2,zero
   2c998:	1000061e 	bne	r2,zero,2c9b4 <open+0xf0>
   2c99c:	e13ff917 	ldw	r4,-28(fp)
   2c9a0:	002c7cc0 	call	2c7cc <alt_file_locked>
   2c9a4:	e0bff715 	stw	r2,-36(fp)
   2c9a8:	e0bff717 	ldw	r2,-36(fp)
   2c9ac:	1004803a 	cmplt	r2,r2,zero
   2c9b0:	1000131e 	bne	r2,zero,2ca00 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2c9b4:	e0bffa17 	ldw	r2,-24(fp)
   2c9b8:	10800317 	ldw	r2,12(r2)
   2c9bc:	1005003a 	cmpeq	r2,r2,zero
   2c9c0:	1000091e 	bne	r2,zero,2c9e8 <open+0x124>
   2c9c4:	e0bffa17 	ldw	r2,-24(fp)
   2c9c8:	10800317 	ldw	r2,12(r2)
   2c9cc:	e13ff917 	ldw	r4,-28(fp)
   2c9d0:	e17ffb17 	ldw	r5,-20(fp)
   2c9d4:	e1bffc17 	ldw	r6,-16(fp)
   2c9d8:	e1fffd17 	ldw	r7,-12(fp)
   2c9dc:	103ee83a 	callr	r2
   2c9e0:	e0bfff15 	stw	r2,-4(fp)
   2c9e4:	00000106 	br	2c9ec <open+0x128>
   2c9e8:	e03fff15 	stw	zero,-4(fp)
   2c9ec:	e0bfff17 	ldw	r2,-4(fp)
   2c9f0:	e0bff715 	stw	r2,-36(fp)
   2c9f4:	00000206 	br	2ca00 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2c9f8:	00bffb44 	movi	r2,-19
   2c9fc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2ca00:	e0bff717 	ldw	r2,-36(fp)
   2ca04:	1004403a 	cmpge	r2,r2,zero
   2ca08:	1000091e 	bne	r2,zero,2ca30 <open+0x16c>
  {
    alt_release_fd (index);  
   2ca0c:	e13ff817 	ldw	r4,-32(fp)
   2ca10:	002b3e80 	call	2b3e8 <alt_release_fd>
    ALT_ERRNO = -status;
   2ca14:	002ca500 	call	2ca50 <alt_get_errno>
   2ca18:	e0fff717 	ldw	r3,-36(fp)
   2ca1c:	00c7c83a 	sub	r3,zero,r3
   2ca20:	10c00015 	stw	r3,0(r2)
    return -1;
   2ca24:	00bfffc4 	movi	r2,-1
   2ca28:	e0bffe15 	stw	r2,-8(fp)
   2ca2c:	00000206 	br	2ca38 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   2ca30:	e0bff817 	ldw	r2,-32(fp)
   2ca34:	e0bffe15 	stw	r2,-8(fp)
   2ca38:	e0bffe17 	ldw	r2,-8(fp)
}
   2ca3c:	e037883a 	mov	sp,fp
   2ca40:	dfc00117 	ldw	ra,4(sp)
   2ca44:	df000017 	ldw	fp,0(sp)
   2ca48:	dec00204 	addi	sp,sp,8
   2ca4c:	f800283a 	ret

0002ca50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2ca50:	defffd04 	addi	sp,sp,-12
   2ca54:	dfc00215 	stw	ra,8(sp)
   2ca58:	df000115 	stw	fp,4(sp)
   2ca5c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2ca60:	008000f4 	movhi	r2,3
   2ca64:	10bd2804 	addi	r2,r2,-2912
   2ca68:	10800017 	ldw	r2,0(r2)
   2ca6c:	1005003a 	cmpeq	r2,r2,zero
   2ca70:	1000061e 	bne	r2,zero,2ca8c <alt_get_errno+0x3c>
   2ca74:	008000f4 	movhi	r2,3
   2ca78:	10bd2804 	addi	r2,r2,-2912
   2ca7c:	10800017 	ldw	r2,0(r2)
   2ca80:	103ee83a 	callr	r2
   2ca84:	e0bfff15 	stw	r2,-4(fp)
   2ca88:	00000306 	br	2ca98 <alt_get_errno+0x48>
   2ca8c:	008000f4 	movhi	r2,3
   2ca90:	1083cd04 	addi	r2,r2,3892
   2ca94:	e0bfff15 	stw	r2,-4(fp)
   2ca98:	e0bfff17 	ldw	r2,-4(fp)
}
   2ca9c:	e037883a 	mov	sp,fp
   2caa0:	dfc00117 	ldw	ra,4(sp)
   2caa4:	df000017 	ldw	fp,0(sp)
   2caa8:	dec00204 	addi	sp,sp,8
   2caac:	f800283a 	ret

0002cab0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2cab0:	defffa04 	addi	sp,sp,-24
   2cab4:	df000515 	stw	fp,20(sp)
   2cab8:	df000504 	addi	fp,sp,20
   2cabc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2cac0:	0005303a 	rdctl	r2,status
   2cac4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2cac8:	e0fffd17 	ldw	r3,-12(fp)
   2cacc:	00bfff84 	movi	r2,-2
   2cad0:	1884703a 	and	r2,r3,r2
   2cad4:	1001703a 	wrctl	status,r2
  
  return context;
   2cad8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2cadc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   2cae0:	e0bfff17 	ldw	r2,-4(fp)
   2cae4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2cae8:	e0bffc17 	ldw	r2,-16(fp)
   2caec:	10c00017 	ldw	r3,0(r2)
   2caf0:	e0bffc17 	ldw	r2,-16(fp)
   2caf4:	10800117 	ldw	r2,4(r2)
   2caf8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   2cafc:	e0bffc17 	ldw	r2,-16(fp)
   2cb00:	10c00117 	ldw	r3,4(r2)
   2cb04:	e0bffc17 	ldw	r2,-16(fp)
   2cb08:	10800017 	ldw	r2,0(r2)
   2cb0c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2cb10:	e0fffc17 	ldw	r3,-16(fp)
   2cb14:	e0bffc17 	ldw	r2,-16(fp)
   2cb18:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   2cb1c:	e0fffc17 	ldw	r3,-16(fp)
   2cb20:	e0bffc17 	ldw	r2,-16(fp)
   2cb24:	18800015 	stw	r2,0(r3)
   2cb28:	e0bffe17 	ldw	r2,-8(fp)
   2cb2c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2cb30:	e0bffb17 	ldw	r2,-20(fp)
   2cb34:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2cb38:	e037883a 	mov	sp,fp
   2cb3c:	df000017 	ldw	fp,0(sp)
   2cb40:	dec00104 	addi	sp,sp,4
   2cb44:	f800283a 	ret

0002cb48 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2cb48:	defffb04 	addi	sp,sp,-20
   2cb4c:	dfc00415 	stw	ra,16(sp)
   2cb50:	df000315 	stw	fp,12(sp)
   2cb54:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2cb58:	d0a01017 	ldw	r2,-32704(gp)
   2cb5c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2cb60:	d0a6b817 	ldw	r2,-25888(gp)
   2cb64:	10800044 	addi	r2,r2,1
   2cb68:	d0a6b815 	stw	r2,-25888(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2cb6c:	00003106 	br	2cc34 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   2cb70:	e0bffe17 	ldw	r2,-8(fp)
   2cb74:	10800017 	ldw	r2,0(r2)
   2cb78:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2cb7c:	e0bffe17 	ldw	r2,-8(fp)
   2cb80:	10800403 	ldbu	r2,16(r2)
   2cb84:	10803fcc 	andi	r2,r2,255
   2cb88:	1005003a 	cmpeq	r2,r2,zero
   2cb8c:	1000051e 	bne	r2,zero,2cba4 <alt_tick+0x5c>
   2cb90:	d0a6b817 	ldw	r2,-25888(gp)
   2cb94:	1004c03a 	cmpne	r2,r2,zero
   2cb98:	1000021e 	bne	r2,zero,2cba4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   2cb9c:	e0bffe17 	ldw	r2,-8(fp)
   2cba0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2cba4:	e0bffe17 	ldw	r2,-8(fp)
   2cba8:	10c00217 	ldw	r3,8(r2)
   2cbac:	d0a6b817 	ldw	r2,-25888(gp)
   2cbb0:	10c01e36 	bltu	r2,r3,2cc2c <alt_tick+0xe4>
   2cbb4:	e0bffe17 	ldw	r2,-8(fp)
   2cbb8:	10800403 	ldbu	r2,16(r2)
   2cbbc:	10803fcc 	andi	r2,r2,255
   2cbc0:	1004c03a 	cmpne	r2,r2,zero
   2cbc4:	1000191e 	bne	r2,zero,2cc2c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   2cbc8:	e0bffe17 	ldw	r2,-8(fp)
   2cbcc:	10c00317 	ldw	r3,12(r2)
   2cbd0:	e0bffe17 	ldw	r2,-8(fp)
   2cbd4:	11000517 	ldw	r4,20(r2)
   2cbd8:	183ee83a 	callr	r3
   2cbdc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2cbe0:	e0bffd17 	ldw	r2,-12(fp)
   2cbe4:	1004c03a 	cmpne	r2,r2,zero
   2cbe8:	1000031e 	bne	r2,zero,2cbf8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   2cbec:	e13ffe17 	ldw	r4,-8(fp)
   2cbf0:	002cab00 	call	2cab0 <alt_alarm_stop>
   2cbf4:	00000d06 	br	2cc2c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   2cbf8:	e0bffe17 	ldw	r2,-8(fp)
   2cbfc:	10c00217 	ldw	r3,8(r2)
   2cc00:	e0bffd17 	ldw	r2,-12(fp)
   2cc04:	1887883a 	add	r3,r3,r2
   2cc08:	e0bffe17 	ldw	r2,-8(fp)
   2cc0c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2cc10:	e0bffe17 	ldw	r2,-8(fp)
   2cc14:	10c00217 	ldw	r3,8(r2)
   2cc18:	d0a6b817 	ldw	r2,-25888(gp)
   2cc1c:	1880032e 	bgeu	r3,r2,2cc2c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   2cc20:	e0fffe17 	ldw	r3,-8(fp)
   2cc24:	00800044 	movi	r2,1
   2cc28:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   2cc2c:	e0bfff17 	ldw	r2,-4(fp)
   2cc30:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2cc34:	d0e01004 	addi	r3,gp,-32704
   2cc38:	e0bffe17 	ldw	r2,-8(fp)
   2cc3c:	10ffcc1e 	bne	r2,r3,2cb70 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   2cc40:	e037883a 	mov	sp,fp
   2cc44:	dfc00117 	ldw	ra,4(sp)
   2cc48:	df000017 	ldw	fp,0(sp)
   2cc4c:	dec00204 	addi	sp,sp,8
   2cc50:	f800283a 	ret

0002cc54 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   2cc54:	deffff04 	addi	sp,sp,-4
   2cc58:	df000015 	stw	fp,0(sp)
   2cc5c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2cc60:	000170fa 	wrctl	ienable,zero
}
   2cc64:	e037883a 	mov	sp,fp
   2cc68:	df000017 	ldw	fp,0(sp)
   2cc6c:	dec00104 	addi	sp,sp,4
   2cc70:	f800283a 	ret

0002cc74 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2cc74:	defff904 	addi	sp,sp,-28
   2cc78:	dfc00615 	stw	ra,24(sp)
   2cc7c:	df000515 	stw	fp,20(sp)
   2cc80:	df000504 	addi	fp,sp,20
   2cc84:	e13ffd15 	stw	r4,-12(fp)
   2cc88:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2cc8c:	e0bffe17 	ldw	r2,-8(fp)
   2cc90:	10800017 	ldw	r2,0(r2)
   2cc94:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2cc98:	e13ffd17 	ldw	r4,-12(fp)
   2cc9c:	0027d740 	call	27d74 <strlen>
   2cca0:	10800044 	addi	r2,r2,1
   2cca4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2cca8:	00000d06 	br	2cce0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2ccac:	e0bffc17 	ldw	r2,-16(fp)
   2ccb0:	11000217 	ldw	r4,8(r2)
   2ccb4:	e1bffb17 	ldw	r6,-20(fp)
   2ccb8:	e17ffd17 	ldw	r5,-12(fp)
   2ccbc:	002cf440 	call	2cf44 <memcmp>
   2ccc0:	1004c03a 	cmpne	r2,r2,zero
   2ccc4:	1000031e 	bne	r2,zero,2ccd4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2ccc8:	e0bffc17 	ldw	r2,-16(fp)
   2cccc:	e0bfff15 	stw	r2,-4(fp)
   2ccd0:	00000706 	br	2ccf0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2ccd4:	e0bffc17 	ldw	r2,-16(fp)
   2ccd8:	10800017 	ldw	r2,0(r2)
   2ccdc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2cce0:	e0fffe17 	ldw	r3,-8(fp)
   2cce4:	e0bffc17 	ldw	r2,-16(fp)
   2cce8:	10fff01e 	bne	r2,r3,2ccac <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2ccec:	e03fff15 	stw	zero,-4(fp)
   2ccf0:	e0bfff17 	ldw	r2,-4(fp)
}
   2ccf4:	e037883a 	mov	sp,fp
   2ccf8:	dfc00117 	ldw	ra,4(sp)
   2ccfc:	df000017 	ldw	fp,0(sp)
   2cd00:	dec00204 	addi	sp,sp,8
   2cd04:	f800283a 	ret

0002cd08 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2cd08:	defffa04 	addi	sp,sp,-24
   2cd0c:	dfc00515 	stw	ra,20(sp)
   2cd10:	df000415 	stw	fp,16(sp)
   2cd14:	df000404 	addi	fp,sp,16
   2cd18:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2cd1c:	008000f4 	movhi	r2,3
   2cd20:	10bd2304 	addi	r2,r2,-2932
   2cd24:	10800017 	ldw	r2,0(r2)
   2cd28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2cd2c:	00003306 	br	2cdfc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   2cd30:	e0bffd17 	ldw	r2,-12(fp)
   2cd34:	11000217 	ldw	r4,8(r2)
   2cd38:	0027d740 	call	27d74 <strlen>
   2cd3c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   2cd40:	e0bffd17 	ldw	r2,-12(fp)
   2cd44:	10c00217 	ldw	r3,8(r2)
   2cd48:	e0bffc17 	ldw	r2,-16(fp)
   2cd4c:	1885883a 	add	r2,r3,r2
   2cd50:	10bfffc4 	addi	r2,r2,-1
   2cd54:	10800003 	ldbu	r2,0(r2)
   2cd58:	10803fcc 	andi	r2,r2,255
   2cd5c:	1080201c 	xori	r2,r2,128
   2cd60:	10bfe004 	addi	r2,r2,-128
   2cd64:	10800bd8 	cmpnei	r2,r2,47
   2cd68:	1000031e 	bne	r2,zero,2cd78 <alt_find_file+0x70>
    {
      len -= 1;
   2cd6c:	e0bffc17 	ldw	r2,-16(fp)
   2cd70:	10bfffc4 	addi	r2,r2,-1
   2cd74:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2cd78:	e0bffc17 	ldw	r2,-16(fp)
   2cd7c:	1007883a 	mov	r3,r2
   2cd80:	e0bffe17 	ldw	r2,-8(fp)
   2cd84:	1885883a 	add	r2,r3,r2
   2cd88:	10800003 	ldbu	r2,0(r2)
   2cd8c:	10803fcc 	andi	r2,r2,255
   2cd90:	1080201c 	xori	r2,r2,128
   2cd94:	10bfe004 	addi	r2,r2,-128
   2cd98:	10800be0 	cmpeqi	r2,r2,47
   2cd9c:	10000a1e 	bne	r2,zero,2cdc8 <alt_find_file+0xc0>
   2cda0:	e0bffc17 	ldw	r2,-16(fp)
   2cda4:	1007883a 	mov	r3,r2
   2cda8:	e0bffe17 	ldw	r2,-8(fp)
   2cdac:	1885883a 	add	r2,r3,r2
   2cdb0:	10800003 	ldbu	r2,0(r2)
   2cdb4:	10803fcc 	andi	r2,r2,255
   2cdb8:	1080201c 	xori	r2,r2,128
   2cdbc:	10bfe004 	addi	r2,r2,-128
   2cdc0:	1004c03a 	cmpne	r2,r2,zero
   2cdc4:	10000a1e 	bne	r2,zero,2cdf0 <alt_find_file+0xe8>
   2cdc8:	e0bffd17 	ldw	r2,-12(fp)
   2cdcc:	11000217 	ldw	r4,8(r2)
   2cdd0:	e1bffc17 	ldw	r6,-16(fp)
   2cdd4:	e17ffe17 	ldw	r5,-8(fp)
   2cdd8:	002cf440 	call	2cf44 <memcmp>
   2cddc:	1004c03a 	cmpne	r2,r2,zero
   2cde0:	1000031e 	bne	r2,zero,2cdf0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2cde4:	e0bffd17 	ldw	r2,-12(fp)
   2cde8:	e0bfff15 	stw	r2,-4(fp)
   2cdec:	00000806 	br	2ce10 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   2cdf0:	e0bffd17 	ldw	r2,-12(fp)
   2cdf4:	10800017 	ldw	r2,0(r2)
   2cdf8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2cdfc:	00c000f4 	movhi	r3,3
   2ce00:	18fd2304 	addi	r3,r3,-2932
   2ce04:	e0bffd17 	ldw	r2,-12(fp)
   2ce08:	10ffc91e 	bne	r2,r3,2cd30 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2ce0c:	e03fff15 	stw	zero,-4(fp)
   2ce10:	e0bfff17 	ldw	r2,-4(fp)
}
   2ce14:	e037883a 	mov	sp,fp
   2ce18:	dfc00117 	ldw	ra,4(sp)
   2ce1c:	df000017 	ldw	fp,0(sp)
   2ce20:	dec00204 	addi	sp,sp,8
   2ce24:	f800283a 	ret

0002ce28 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2ce28:	defffa04 	addi	sp,sp,-24
   2ce2c:	dfc00515 	stw	ra,20(sp)
   2ce30:	df000415 	stw	fp,16(sp)
   2ce34:	dc000315 	stw	r16,12(sp)
   2ce38:	df000304 	addi	fp,sp,12
   2ce3c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   2ce40:	00bffa04 	movi	r2,-24
   2ce44:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2ce48:	e03ffe15 	stw	zero,-8(fp)
   2ce4c:	00002006 	br	2ced0 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   2ce50:	e13ffe17 	ldw	r4,-8(fp)
   2ce54:	040000f4 	movhi	r16,3
   2ce58:	8438a304 	addi	r16,r16,-7540
   2ce5c:	01400304 	movi	r5,12
   2ce60:	002a1d40 	call	2a1d4 <__mulsi3>
   2ce64:	1405883a 	add	r2,r2,r16
   2ce68:	10800017 	ldw	r2,0(r2)
   2ce6c:	1004c03a 	cmpne	r2,r2,zero
   2ce70:	1000141e 	bne	r2,zero,2cec4 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   2ce74:	e13ffe17 	ldw	r4,-8(fp)
   2ce78:	040000f4 	movhi	r16,3
   2ce7c:	8438a304 	addi	r16,r16,-7540
   2ce80:	01400304 	movi	r5,12
   2ce84:	002a1d40 	call	2a1d4 <__mulsi3>
   2ce88:	1407883a 	add	r3,r2,r16
   2ce8c:	e0bfff17 	ldw	r2,-4(fp)
   2ce90:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   2ce94:	008000f4 	movhi	r2,3
   2ce98:	10bd2704 	addi	r2,r2,-2916
   2ce9c:	10c00017 	ldw	r3,0(r2)
   2cea0:	e0bffe17 	ldw	r2,-8(fp)
   2cea4:	1880040e 	bge	r3,r2,2ceb8 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   2cea8:	00c000f4 	movhi	r3,3
   2ceac:	18fd2704 	addi	r3,r3,-2916
   2ceb0:	e0bffe17 	ldw	r2,-8(fp)
   2ceb4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   2ceb8:	e0bffe17 	ldw	r2,-8(fp)
   2cebc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   2cec0:	00000606 	br	2cedc <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2cec4:	e0bffe17 	ldw	r2,-8(fp)
   2cec8:	10800044 	addi	r2,r2,1
   2cecc:	e0bffe15 	stw	r2,-8(fp)
   2ced0:	e0bffe17 	ldw	r2,-8(fp)
   2ced4:	10800810 	cmplti	r2,r2,32
   2ced8:	103fdd1e 	bne	r2,zero,2ce50 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2cedc:	e0bffd17 	ldw	r2,-12(fp)
}
   2cee0:	e037883a 	mov	sp,fp
   2cee4:	dfc00217 	ldw	ra,8(sp)
   2cee8:	df000117 	ldw	fp,4(sp)
   2ceec:	dc000017 	ldw	r16,0(sp)
   2cef0:	dec00304 	addi	sp,sp,12
   2cef4:	f800283a 	ret

0002cef8 <atexit>:
   2cef8:	200b883a 	mov	r5,r4
   2cefc:	000d883a 	mov	r6,zero
   2cf00:	0009883a 	mov	r4,zero
   2cf04:	000f883a 	mov	r7,zero
   2cf08:	002cfb81 	jmpi	2cfb8 <__register_exitproc>

0002cf0c <exit>:
   2cf0c:	defffe04 	addi	sp,sp,-8
   2cf10:	000b883a 	mov	r5,zero
   2cf14:	dc000015 	stw	r16,0(sp)
   2cf18:	dfc00115 	stw	ra,4(sp)
   2cf1c:	2021883a 	mov	r16,r4
   2cf20:	002d0f00 	call	2d0f0 <__call_exitprocs>
   2cf24:	008000f4 	movhi	r2,3
   2cf28:	10bd1e04 	addi	r2,r2,-2952
   2cf2c:	11000017 	ldw	r4,0(r2)
   2cf30:	20800f17 	ldw	r2,60(r4)
   2cf34:	10000126 	beq	r2,zero,2cf3c <exit+0x30>
   2cf38:	103ee83a 	callr	r2
   2cf3c:	8009883a 	mov	r4,r16
   2cf40:	002d2e00 	call	2d2e0 <_exit>

0002cf44 <memcmp>:
   2cf44:	00c000c4 	movi	r3,3
   2cf48:	1980032e 	bgeu	r3,r6,2cf58 <memcmp+0x14>
   2cf4c:	2144b03a 	or	r2,r4,r5
   2cf50:	10c4703a 	and	r2,r2,r3
   2cf54:	10000f26 	beq	r2,zero,2cf94 <memcmp+0x50>
   2cf58:	31ffffc4 	addi	r7,r6,-1
   2cf5c:	3000061e 	bne	r6,zero,2cf78 <memcmp+0x34>
   2cf60:	00000a06 	br	2cf8c <memcmp+0x48>
   2cf64:	39ffffc4 	addi	r7,r7,-1
   2cf68:	00bfffc4 	movi	r2,-1
   2cf6c:	21000044 	addi	r4,r4,1
   2cf70:	29400044 	addi	r5,r5,1
   2cf74:	38800526 	beq	r7,r2,2cf8c <memcmp+0x48>
   2cf78:	20c00003 	ldbu	r3,0(r4)
   2cf7c:	28800003 	ldbu	r2,0(r5)
   2cf80:	18bff826 	beq	r3,r2,2cf64 <memcmp+0x20>
   2cf84:	1885c83a 	sub	r2,r3,r2
   2cf88:	f800283a 	ret
   2cf8c:	0005883a 	mov	r2,zero
   2cf90:	f800283a 	ret
   2cf94:	180f883a 	mov	r7,r3
   2cf98:	20c00017 	ldw	r3,0(r4)
   2cf9c:	28800017 	ldw	r2,0(r5)
   2cfa0:	18bfed1e 	bne	r3,r2,2cf58 <memcmp+0x14>
   2cfa4:	31bfff04 	addi	r6,r6,-4
   2cfa8:	21000104 	addi	r4,r4,4
   2cfac:	29400104 	addi	r5,r5,4
   2cfb0:	39bff936 	bltu	r7,r6,2cf98 <memcmp+0x54>
   2cfb4:	003fe806 	br	2cf58 <memcmp+0x14>

0002cfb8 <__register_exitproc>:
   2cfb8:	defffa04 	addi	sp,sp,-24
   2cfbc:	008000f4 	movhi	r2,3
   2cfc0:	10bd1e04 	addi	r2,r2,-2952
   2cfc4:	dc000015 	stw	r16,0(sp)
   2cfc8:	14000017 	ldw	r16,0(r2)
   2cfcc:	dd000415 	stw	r20,16(sp)
   2cfd0:	2829883a 	mov	r20,r5
   2cfd4:	81405217 	ldw	r5,328(r16)
   2cfd8:	dcc00315 	stw	r19,12(sp)
   2cfdc:	dc800215 	stw	r18,8(sp)
   2cfe0:	dc400115 	stw	r17,4(sp)
   2cfe4:	dfc00515 	stw	ra,20(sp)
   2cfe8:	2023883a 	mov	r17,r4
   2cfec:	3027883a 	mov	r19,r6
   2cff0:	3825883a 	mov	r18,r7
   2cff4:	28002526 	beq	r5,zero,2d08c <__register_exitproc+0xd4>
   2cff8:	29000117 	ldw	r4,4(r5)
   2cffc:	008007c4 	movi	r2,31
   2d000:	11002716 	blt	r2,r4,2d0a0 <__register_exitproc+0xe8>
   2d004:	8800101e 	bne	r17,zero,2d048 <__register_exitproc+0x90>
   2d008:	2105883a 	add	r2,r4,r4
   2d00c:	1085883a 	add	r2,r2,r2
   2d010:	20c00044 	addi	r3,r4,1
   2d014:	1145883a 	add	r2,r2,r5
   2d018:	0009883a 	mov	r4,zero
   2d01c:	15000215 	stw	r20,8(r2)
   2d020:	28c00115 	stw	r3,4(r5)
   2d024:	2005883a 	mov	r2,r4
   2d028:	dfc00517 	ldw	ra,20(sp)
   2d02c:	dd000417 	ldw	r20,16(sp)
   2d030:	dcc00317 	ldw	r19,12(sp)
   2d034:	dc800217 	ldw	r18,8(sp)
   2d038:	dc400117 	ldw	r17,4(sp)
   2d03c:	dc000017 	ldw	r16,0(sp)
   2d040:	dec00604 	addi	sp,sp,24
   2d044:	f800283a 	ret
   2d048:	29802204 	addi	r6,r5,136
   2d04c:	00800044 	movi	r2,1
   2d050:	110e983a 	sll	r7,r2,r4
   2d054:	30c04017 	ldw	r3,256(r6)
   2d058:	2105883a 	add	r2,r4,r4
   2d05c:	1085883a 	add	r2,r2,r2
   2d060:	1185883a 	add	r2,r2,r6
   2d064:	19c6b03a 	or	r3,r3,r7
   2d068:	14802015 	stw	r18,128(r2)
   2d06c:	14c00015 	stw	r19,0(r2)
   2d070:	00800084 	movi	r2,2
   2d074:	30c04015 	stw	r3,256(r6)
   2d078:	88bfe31e 	bne	r17,r2,2d008 <__register_exitproc+0x50>
   2d07c:	30804117 	ldw	r2,260(r6)
   2d080:	11c4b03a 	or	r2,r2,r7
   2d084:	30804115 	stw	r2,260(r6)
   2d088:	003fdf06 	br	2d008 <__register_exitproc+0x50>
   2d08c:	008000f4 	movhi	r2,3
   2d090:	10841e04 	addi	r2,r2,4216
   2d094:	100b883a 	mov	r5,r2
   2d098:	80805215 	stw	r2,328(r16)
   2d09c:	003fd606 	br	2cff8 <__register_exitproc+0x40>
   2d0a0:	00800034 	movhi	r2,0
   2d0a4:	10800004 	addi	r2,r2,0
   2d0a8:	1000021e 	bne	r2,zero,2d0b4 <__register_exitproc+0xfc>
   2d0ac:	013fffc4 	movi	r4,-1
   2d0b0:	003fdc06 	br	2d024 <__register_exitproc+0x6c>
   2d0b4:	01006404 	movi	r4,400
   2d0b8:	103ee83a 	callr	r2
   2d0bc:	1007883a 	mov	r3,r2
   2d0c0:	103ffa26 	beq	r2,zero,2d0ac <__register_exitproc+0xf4>
   2d0c4:	80805217 	ldw	r2,328(r16)
   2d0c8:	180b883a 	mov	r5,r3
   2d0cc:	18000115 	stw	zero,4(r3)
   2d0d0:	18800015 	stw	r2,0(r3)
   2d0d4:	80c05215 	stw	r3,328(r16)
   2d0d8:	18006215 	stw	zero,392(r3)
   2d0dc:	18006315 	stw	zero,396(r3)
   2d0e0:	0009883a 	mov	r4,zero
   2d0e4:	883fc826 	beq	r17,zero,2d008 <__register_exitproc+0x50>
   2d0e8:	003fd706 	br	2d048 <__register_exitproc+0x90>

0002d0ec <register_fini>:
   2d0ec:	f800283a 	ret

0002d0f0 <__call_exitprocs>:
   2d0f0:	008000f4 	movhi	r2,3
   2d0f4:	10bd1e04 	addi	r2,r2,-2952
   2d0f8:	10800017 	ldw	r2,0(r2)
   2d0fc:	defff304 	addi	sp,sp,-52
   2d100:	df000b15 	stw	fp,44(sp)
   2d104:	d8800115 	stw	r2,4(sp)
   2d108:	00800034 	movhi	r2,0
   2d10c:	10800004 	addi	r2,r2,0
   2d110:	1005003a 	cmpeq	r2,r2,zero
   2d114:	d8800215 	stw	r2,8(sp)
   2d118:	d8800117 	ldw	r2,4(sp)
   2d11c:	dd400815 	stw	r21,32(sp)
   2d120:	dd000715 	stw	r20,28(sp)
   2d124:	10805204 	addi	r2,r2,328
   2d128:	dfc00c15 	stw	ra,48(sp)
   2d12c:	ddc00a15 	stw	r23,40(sp)
   2d130:	dd800915 	stw	r22,36(sp)
   2d134:	dcc00615 	stw	r19,24(sp)
   2d138:	dc800515 	stw	r18,20(sp)
   2d13c:	dc400415 	stw	r17,16(sp)
   2d140:	dc000315 	stw	r16,12(sp)
   2d144:	282b883a 	mov	r21,r5
   2d148:	2039883a 	mov	fp,r4
   2d14c:	d8800015 	stw	r2,0(sp)
   2d150:	2829003a 	cmpeq	r20,r5,zero
   2d154:	d8800117 	ldw	r2,4(sp)
   2d158:	14405217 	ldw	r17,328(r2)
   2d15c:	88001026 	beq	r17,zero,2d1a0 <__call_exitprocs+0xb0>
   2d160:	ddc00017 	ldw	r23,0(sp)
   2d164:	88800117 	ldw	r2,4(r17)
   2d168:	8c802204 	addi	r18,r17,136
   2d16c:	143fffc4 	addi	r16,r2,-1
   2d170:	80000916 	blt	r16,zero,2d198 <__call_exitprocs+0xa8>
   2d174:	05bfffc4 	movi	r22,-1
   2d178:	a000151e 	bne	r20,zero,2d1d0 <__call_exitprocs+0xe0>
   2d17c:	8409883a 	add	r4,r16,r16
   2d180:	2105883a 	add	r2,r4,r4
   2d184:	1485883a 	add	r2,r2,r18
   2d188:	10c02017 	ldw	r3,128(r2)
   2d18c:	a8c01126 	beq	r21,r3,2d1d4 <__call_exitprocs+0xe4>
   2d190:	843fffc4 	addi	r16,r16,-1
   2d194:	85bff81e 	bne	r16,r22,2d178 <__call_exitprocs+0x88>
   2d198:	d8800217 	ldw	r2,8(sp)
   2d19c:	10003126 	beq	r2,zero,2d264 <__call_exitprocs+0x174>
   2d1a0:	dfc00c17 	ldw	ra,48(sp)
   2d1a4:	df000b17 	ldw	fp,44(sp)
   2d1a8:	ddc00a17 	ldw	r23,40(sp)
   2d1ac:	dd800917 	ldw	r22,36(sp)
   2d1b0:	dd400817 	ldw	r21,32(sp)
   2d1b4:	dd000717 	ldw	r20,28(sp)
   2d1b8:	dcc00617 	ldw	r19,24(sp)
   2d1bc:	dc800517 	ldw	r18,20(sp)
   2d1c0:	dc400417 	ldw	r17,16(sp)
   2d1c4:	dc000317 	ldw	r16,12(sp)
   2d1c8:	dec00d04 	addi	sp,sp,52
   2d1cc:	f800283a 	ret
   2d1d0:	8409883a 	add	r4,r16,r16
   2d1d4:	88c00117 	ldw	r3,4(r17)
   2d1d8:	2105883a 	add	r2,r4,r4
   2d1dc:	1445883a 	add	r2,r2,r17
   2d1e0:	18ffffc4 	addi	r3,r3,-1
   2d1e4:	11800217 	ldw	r6,8(r2)
   2d1e8:	1c001526 	beq	r3,r16,2d240 <__call_exitprocs+0x150>
   2d1ec:	10000215 	stw	zero,8(r2)
   2d1f0:	303fe726 	beq	r6,zero,2d190 <__call_exitprocs+0xa0>
   2d1f4:	00c00044 	movi	r3,1
   2d1f8:	1c06983a 	sll	r3,r3,r16
   2d1fc:	90804017 	ldw	r2,256(r18)
   2d200:	8cc00117 	ldw	r19,4(r17)
   2d204:	1884703a 	and	r2,r3,r2
   2d208:	10001426 	beq	r2,zero,2d25c <__call_exitprocs+0x16c>
   2d20c:	90804117 	ldw	r2,260(r18)
   2d210:	1884703a 	and	r2,r3,r2
   2d214:	10000c1e 	bne	r2,zero,2d248 <__call_exitprocs+0x158>
   2d218:	2105883a 	add	r2,r4,r4
   2d21c:	1485883a 	add	r2,r2,r18
   2d220:	11400017 	ldw	r5,0(r2)
   2d224:	e009883a 	mov	r4,fp
   2d228:	303ee83a 	callr	r6
   2d22c:	88800117 	ldw	r2,4(r17)
   2d230:	98bfc81e 	bne	r19,r2,2d154 <__call_exitprocs+0x64>
   2d234:	b8800017 	ldw	r2,0(r23)
   2d238:	147fd526 	beq	r2,r17,2d190 <__call_exitprocs+0xa0>
   2d23c:	003fc506 	br	2d154 <__call_exitprocs+0x64>
   2d240:	8c000115 	stw	r16,4(r17)
   2d244:	003fea06 	br	2d1f0 <__call_exitprocs+0x100>
   2d248:	2105883a 	add	r2,r4,r4
   2d24c:	1485883a 	add	r2,r2,r18
   2d250:	11000017 	ldw	r4,0(r2)
   2d254:	303ee83a 	callr	r6
   2d258:	003ff406 	br	2d22c <__call_exitprocs+0x13c>
   2d25c:	303ee83a 	callr	r6
   2d260:	003ff206 	br	2d22c <__call_exitprocs+0x13c>
   2d264:	88800117 	ldw	r2,4(r17)
   2d268:	1000081e 	bne	r2,zero,2d28c <__call_exitprocs+0x19c>
   2d26c:	89000017 	ldw	r4,0(r17)
   2d270:	20000726 	beq	r4,zero,2d290 <__call_exitprocs+0x1a0>
   2d274:	b9000015 	stw	r4,0(r23)
   2d278:	8809883a 	mov	r4,r17
   2d27c:	00000000 	call	0 <__alt_mem_nios_base_onchip_ram-0x20000>
   2d280:	bc400017 	ldw	r17,0(r23)
   2d284:	883fb71e 	bne	r17,zero,2d164 <__call_exitprocs+0x74>
   2d288:	003fc506 	br	2d1a0 <__call_exitprocs+0xb0>
   2d28c:	89000017 	ldw	r4,0(r17)
   2d290:	882f883a 	mov	r23,r17
   2d294:	2023883a 	mov	r17,r4
   2d298:	883fb21e 	bne	r17,zero,2d164 <__call_exitprocs+0x74>
   2d29c:	003fc006 	br	2d1a0 <__call_exitprocs+0xb0>

0002d2a0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   2d2a0:	defffd04 	addi	sp,sp,-12
   2d2a4:	df000215 	stw	fp,8(sp)
   2d2a8:	df000204 	addi	fp,sp,8
   2d2ac:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   2d2b0:	e0bfff17 	ldw	r2,-4(fp)
   2d2b4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2d2b8:	e0bffe17 	ldw	r2,-8(fp)
   2d2bc:	1005003a 	cmpeq	r2,r2,zero
   2d2c0:	1000021e 	bne	r2,zero,2d2cc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   2d2c4:	002af070 	cmpltui	zero,zero,43969
   2d2c8:	00000106 	br	2d2d0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   2d2cc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   2d2d0:	e037883a 	mov	sp,fp
   2d2d4:	df000017 	ldw	fp,0(sp)
   2d2d8:	dec00104 	addi	sp,sp,4
   2d2dc:	f800283a 	ret

0002d2e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2d2e0:	defffd04 	addi	sp,sp,-12
   2d2e4:	dfc00215 	stw	ra,8(sp)
   2d2e8:	df000115 	stw	fp,4(sp)
   2d2ec:	df000104 	addi	fp,sp,4
   2d2f0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   2d2f4:	e13fff17 	ldw	r4,-4(fp)
   2d2f8:	002d2a00 	call	2d2a0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2d2fc:	003fff06 	br	2d2fc <_exit+0x1c>
   2d300:	00000010 	cmplti	zero,zero,0
   2d304:	00000000 	call	0 <__alt_mem_nios_base_onchip_ram-0x20000>
   2d308:	00527a01 	jmpi	527a0 <__alt_data_end+0x127a0>
   2d30c:	011f7c01 	jmpi	11f7c0 <__alt_data_end+0xdf7c0>
   2d310:	001b0c0b 	ldhu	zero,27696(zero)
   2d314:	00000028 	cmpgeui	zero,zero,0
   2d318:	00000018 	cmpnei	zero,zero,0
   2d31c:	00028290 	cmplti	zero,zero,2570
   2d320:	0000066c 	andhi	zero,zero,25
   2d324:	3c0e4400 	call	3c0e440 <__alt_data_end+0x3bce440>
   2d328:	910a9074 	orhi	r4,r18,10817
   2d32c:	94089209 	0x94089209
   2d330:	97049606 	br	2e58c <nios_base_jtag_uart+0x180>
   2d334:	93019f03 	ldbu	r12,1660(r18)
   2d338:	9c059507 	ldb	r16,5716(r19)
   2d33c:	00000002 	0x2
   2d340:	00000028 	cmpgeui	zero,zero,0
   2d344:	00000044 	movi	zero,1
   2d348:	000288fc 	xorhi	zero,zero,2595
   2d34c:	00000660 	cmpeqi	zero,zero,25
   2d350:	400e4400 	call	400e440 <__alt_data_end+0x3fce440>
   2d354:	92099170 	cmpltui	r8,r18,9797
   2d358:	96069408 	cmpgei	et,r18,6736
   2d35c:	9c039704 	addi	r16,r19,3676
   2d360:	90019f02 	0x90019f02
   2d364:	9507930a 	0x9507930a
   2d368:	00000005 	stb	zero,0(zero)
   2d36c:	0002d0ec 	andhi	zero,zero,2883
