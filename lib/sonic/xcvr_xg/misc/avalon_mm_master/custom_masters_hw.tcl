# TCL File Generated by Component Editor 11.0
# Wed Aug 17 12:31:17 EDT 2011
# DO NOT MODIFY


# +-----------------------------------
# | 
# | avalon_master "avalon_master" v1.0
# | Han Wang 2011.08.17.12:31:17
# | Custom Avalon-MM Masters
# | 
# | /home/hwang/sonic/projects/sonic_fpga/src/top_examples/misc/avalon_mm_master/custom_master.v
# | 
# |    ./custom_master.v syn, sim
# |    ./burst_write_master.v syn, sim
# |    ./burst_read_master.v syn, sim
# |    ./write_master.v syn, sim
# |    ./latency_aware_read_master.v syn, sim
# | 
# +-----------------------------------

# +-----------------------------------
# | request TCL package from ACDS 11.0
# | 
package require -exact sopc 11.0
# | 
# +-----------------------------------

# +-----------------------------------
# | module avalon_master
# | 
set_module_property DESCRIPTION "Custom Avalon-MM Masters"
set_module_property NAME avalon_master
set_module_property VERSION 1.0
set_module_property INTERNAL false
set_module_property OPAQUE_ADDRESS_MAP true
set_module_property GROUP Templates
set_module_property AUTHOR "Han Wang"
set_module_property ICON_PATH ALTERA_LOGO_ANIM.gif
set_module_property DISPLAY_NAME avalon_master
set_module_property TOP_LEVEL_HDL_FILE custom_master.v
set_module_property TOP_LEVEL_HDL_MODULE custom_master
set_module_property INSTANTIATE_IN_SYSTEM_MODULE true
set_module_property EDITABLE false
set_module_property ANALYZE_HDL TRUE
set_module_property STATIC_TOP_LEVEL_MODULE_NAME ""
set_module_property FIX_110_VIP_PATH false
# | 
# +-----------------------------------

set_module_property ELABORATION_CALLBACK    elaborate_me
set_module_property VALIDATION_CALLBACK     validate_me

# +-----------------------------------
# | files
# | 
add_file custom_master.v {SYNTHESIS SIMULATION}
add_file burst_write_master.v {SYNTHESIS SIMULATION}
add_file burst_read_master.v {SYNTHESIS SIMULATION}
add_file write_master.v {SYNTHESIS SIMULATION}
add_file latency_aware_read_master.v {SYNTHESIS SIMULATION}
# | 
# +-----------------------------------

# +-----------------------------------
# | parameters
# | 
add_parameter MASTER_DIRECTION INTEGER 0 "Sets the master direction between read (0) and write (1) transfers"
set_parameter_property MASTER_DIRECTION DEFAULT_VALUE 0
set_parameter_property MASTER_DIRECTION DISPLAY_NAME "Master Direction"
set_parameter_property MASTER_DIRECTION TYPE INTEGER
set_parameter_property MASTER_DIRECTION UNITS None
set_parameter_property MASTER_DIRECTION ALLOWED_RANGES {0:Read 1:Write}
set_parameter_property MASTER_DIRECTION DESCRIPTION "Sets the master direction between read (0) and write (1) transfers"
set_parameter_property MASTER_DIRECTION AFFECTS_GENERATION false
set_parameter_property MASTER_DIRECTION HDL_PARAMETER true


add_parameter DATA_WIDTH INTEGER 32 "Width of the data path"
set_parameter_property DATA_WIDTH DEFAULT_VALUE 32
set_parameter_property DATA_WIDTH DISPLAY_NAME "Data Width"
set_parameter_property DATA_WIDTH TYPE INTEGER
set_parameter_property DATA_WIDTH UNITS None
set_parameter_property DATA_WIDTH ALLOWED_RANGES {8 16 32 64 128 256 512 1024}
set_parameter_property DATA_WIDTH DESCRIPTION "Width of the data path"
set_parameter_property DATA_WIDTH AFFECTS_GENERATION false
set_parameter_property DATA_WIDTH HDL_PARAMETER true


add_parameter ADDRESS_WIDTH INTEGER 32 "Address Width"
set_parameter_property ADDRESS_WIDTH DEFAULT_VALUE 32
set_parameter_property ADDRESS_WIDTH DISPLAY_NAME "Address Width"
set_parameter_property ADDRESS_WIDTH TYPE INTEGER
set_parameter_property ADDRESS_WIDTH UNITS None
set_parameter_property ADDRESS_WIDTH ALLOWED_RANGES {32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 14 13 12 11 10 9 8 7 6 5 4}
set_parameter_property ADDRESS_WIDTH DESCRIPTION "Address Width"
set_parameter_property ADDRESS_WIDTH AFFECTS_GENERATION false
set_parameter_property ADDRESS_WIDTH HDL_PARAMETER true

add_parameter BURST_CAPABLE INTEGER 0 "Enable bursting"
set_parameter_property BURST_CAPABLE DEFAULT_VALUE 0
set_parameter_property BURST_CAPABLE DISPLAY_NAME "Burst Capable"
set_parameter_property BURST_CAPABLE TYPE INTEGER
set_parameter_property BURST_CAPABLE UNITS None
set_parameter_property BURST_CAPABLE ALLOWED_RANGES {0:Disabled 1:Enabled}
set_parameter_property BURST_CAPABLE DESCRIPTION "Enable bursting"
set_parameter_property BURST_CAPABLE AFFECTS_GENERATION false
set_parameter_property BURST_CAPABLE HDL_PARAMETER true

add_parameter MAXIMUM_BURST_COUNT INTEGER 2 "Maximum Burst Count"
set_parameter_property MAXIMUM_BURST_COUNT DEFAULT_VALUE 2
set_parameter_property MAXIMUM_BURST_COUNT DISPLAY_NAME "Maximum Burst Count"
set_parameter_property MAXIMUM_BURST_COUNT TYPE INTEGER
set_parameter_property MAXIMUM_BURST_COUNT UNITS None
set_parameter_property MAXIMUM_BURST_COUNT ALLOWED_RANGES {1 2 4 8 16 32 64 128}
set_parameter_property MAXIMUM_BURST_COUNT DESCRIPTION "Maximum Burst Count"
set_parameter_property MAXIMUM_BURST_COUNT AFFECTS_GENERATION false
set_parameter_property MAXIMUM_BURST_COUNT HDL_PARAMETER true

add_parameter BURST_COUNT_WIDTH INTEGER 2 "Enable bursting"
set_parameter_property BURST_COUNT_WIDTH DEFAULT_VALUE 2
set_parameter_property BURST_COUNT_WIDTH DISPLAY_NAME "Burst Count Width"
set_parameter_property BURST_COUNT_WIDTH TYPE INTEGER
set_parameter_property BURST_COUNT_WIDTH VISIBLE false
set_parameter_property BURST_COUNT_WIDTH UNITS None
set_parameter_property BURST_COUNT_WIDTH ALLOWED_RANGES 1:8
set_parameter_property BURST_COUNT_WIDTH DESCRIPTION "Enable bursting"
set_parameter_property BURST_COUNT_WIDTH AFFECTS_GENERATION false
set_parameter_property BURST_COUNT_WIDTH HDL_PARAMETER true

add_parameter FIFO_DEPTH INTEGER 32 "FIFO depth"
set_parameter_property FIFO_DEPTH DEFAULT_VALUE 32
set_parameter_property FIFO_DEPTH DISPLAY_NAME "FIFO Depth"
set_parameter_property FIFO_DEPTH TYPE INTEGER
set_parameter_property FIFO_DEPTH UNITS None
set_parameter_property FIFO_DEPTH ALLOWED_RANGES {4 8 16 32 64 128 256}
set_parameter_property FIFO_DEPTH DESCRIPTION "FIFO depth"
set_parameter_property FIFO_DEPTH AFFECTS_GENERATION false
set_parameter_property FIFO_DEPTH HDL_PARAMETER true

add_parameter FIFO_DEPTH_LOG2 INTEGER 5 "log2(FIFO Depth)"
set_parameter_property FIFO_DEPTH_LOG2 DEFAULT_VALUE 5
set_parameter_property FIFO_DEPTH_LOG2 DISPLAY_NAME "log2(FIFO Depth)"
set_parameter_property FIFO_DEPTH_LOG2 TYPE INTEGER
set_parameter_property FIFO_DEPTH_LOG2 VISIBLE false
set_parameter_property FIFO_DEPTH_LOG2 UNITS None
set_parameter_property FIFO_DEPTH_LOG2 ALLOWED_RANGES 2:8
set_parameter_property FIFO_DEPTH_LOG2 DESCRIPTION "log2(FIFO Depth)"
set_parameter_property FIFO_DEPTH_LOG2 AFFECTS_GENERATION false
set_parameter_property FIFO_DEPTH_LOG2 HDL_PARAMETER true

add_parameter MEMORY_BASED_FIFO INTEGER 1 "Select false if you want register based (0) FIFO instead of memory (1)"
set_parameter_property MEMORY_BASED_FIFO DEFAULT_VALUE 1
set_parameter_property MEMORY_BASED_FIFO DISPLAY_NAME "Memory based FIFO"
set_parameter_property MEMORY_BASED_FIFO TYPE INTEGER
set_parameter_property MEMORY_BASED_FIFO UNITS None
set_parameter_property MEMORY_BASED_FIFO ALLOWED_RANGES {1:Memory 0:Logic}
set_parameter_property MEMORY_BASED_FIFO DESCRIPTION "Select false if you want register based (0) FIFO instead of memory (1)"
set_parameter_property MEMORY_BASED_FIFO AFFECTS_GENERATION false
set_parameter_property MEMORY_BASED_FIFO HDL_PARAMETER true
# | 
# +-----------------------------------

# +-----------------------------------
# | display items
# | 
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point clock_reset
# | 
add_interface clock_reset clock end
set_interface_property clock_reset clockRate 0

set_interface_property clock_reset ENABLED true

add_interface_port clock_reset clk clk Input 1
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point clock_reset_reset
# | 
add_interface clock_reset_reset reset end
set_interface_property clock_reset_reset associatedClock clock_reset
set_interface_property clock_reset_reset synchronousEdges DEASSERT

set_interface_property clock_reset_reset ENABLED true

add_interface_port clock_reset_reset reset reset Input 1
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point avalon_master
# | 
add_interface avalon_master avalon start
set_interface_property avalon_master addressUnits SYMBOLS
set_interface_property avalon_master associatedClock clock_reset
set_interface_property avalon_master associatedReset clock_reset_reset
set_interface_property avalon_master bitsPerSymbol 8
set_interface_property avalon_master burstOnBurstBoundariesOnly false
set_interface_property avalon_master burstcountUnits WORDS
set_interface_property avalon_master doStreamReads false
set_interface_property avalon_master doStreamWrites false
set_interface_property avalon_master holdTime 0
set_interface_property avalon_master linewrapBursts false

#set_interface_property avalon_master maximumPendingReadTransactions 1

set_interface_property avalon_master readLatency 0
set_interface_property avalon_master readWaitTime 1
set_interface_property avalon_master setupTime 0
set_interface_property avalon_master timingUnits Cycles
set_interface_property avalon_master writeWaitTime 0

set_interface_property avalon_master ENABLED true

add_interface_port avalon_master master_address address Output ADDRESS_WIDTH
add_interface_port avalon_master master_read read Output 1
add_interface_port avalon_master master_write write Output 1
add_interface_port avalon_master master_byteenable byteenable Output DATA_WIDTH/8
add_interface_port avalon_master master_readdata readdata Input DATA_WIDTH
add_interface_port avalon_master master_readdatavalid readdatavalid Input 1
add_interface_port avalon_master master_writedata writedata Output DATA_WIDTH
add_interface_port avalon_master master_burstcount burstcount Output BURST_COUNT_WIDTH
add_interface_port avalon_master master_waitrequest waitrequest Input 1
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point control_fixed_location
# | 
add_interface control_fixed_location conduit end

set_interface_property control_fixed_location ENABLED true

add_interface_port control_fixed_location control_fixed_location export Input 1
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point control_read_base
# | 
add_interface control_read_base conduit end

set_interface_property control_read_base ENABLED true

add_interface_port control_read_base control_read_base export Input ADDRESS_WIDTH
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point control_write_base
# | 
add_interface control_write_base conduit end

set_interface_property control_write_base ENABLED true

add_interface_port control_write_base control_write_base export Input ADDRESS_WIDTH
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point control_read_length
# | 
add_interface control_read_length conduit end

set_interface_property control_read_length ENABLED true

add_interface_port control_read_length control_read_length export Input ADDRESS_WIDTH
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point control_write_length
# | 
add_interface control_write_length conduit end

set_interface_property control_write_length ENABLED true

add_interface_port control_write_length control_write_length export Input ADDRESS_WIDTH
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point control_go
# | 
add_interface control_go conduit end

set_interface_property control_go ENABLED true

add_interface_port control_go control_go export Input 1
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point control_done
# | 
add_interface control_done conduit end

set_interface_property control_done ENABLED true

add_interface_port control_done control_done export Output 1
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point control_early_done
# | 
add_interface control_early_done conduit end

set_interface_property control_early_done ENABLED true

add_interface_port control_early_done control_early_done export Output 1
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point user_read_buffer
# | 
add_interface user_read_buffer conduit end

set_interface_property user_read_buffer ENABLED true

add_interface_port user_read_buffer user_read_buffer export Input 1
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point user_buffer_output_data
# | 
add_interface user_buffer_output_data conduit end

set_interface_property user_buffer_output_data ENABLED true

add_interface_port user_buffer_output_data user_buffer_output_data export Output DATA_WIDTH
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point user_data_available
# | 
add_interface user_data_available conduit end

set_interface_property user_data_available ENABLED true

add_interface_port user_data_available user_data_available export Output 1
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point user_write_buffer
# | 
add_interface user_write_buffer conduit end

set_interface_property user_write_buffer ENABLED true

add_interface_port user_write_buffer user_write_buffer export Input 1
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point user_buffer_input_data
# | 
add_interface user_buffer_input_data conduit end

set_interface_property user_buffer_input_data ENABLED true

add_interface_port user_buffer_input_data user_buffer_input_data export Input DATA_WIDTH
# | 
# +-----------------------------------

# +-----------------------------------
# | connection point user_buffer_full
# | 
add_interface user_buffer_full conduit end

set_interface_property user_buffer_full ENABLED true

add_interface_port user_buffer_full user_buffer_full export Output 1
# | 
# +-----------------------------------


proc elaborate_me {}  {

  # set all the new port widths
  set the_data_width [get_parameter_value DATA_WIDTH]
  set the_byteenable_width [expr {$the_data_width / 8} ]
  set the_address_width [get_parameter_value ADDRESS_WIDTH]
  set the_burst_count_width [get_parameter_value BURST_COUNT_WIDTH]

 
  set_port_property control_read_base WIDTH $the_address_width
  set_port_property control_read_length WIDTH $the_address_width
  set_port_property control_write_base WIDTH $the_address_width
  set_port_property control_write_length WIDTH $the_address_width
  set_port_property user_buffer_input_data WIDTH $the_data_width
  set_port_property user_buffer_output_data WIDTH $the_data_width
  set_port_property master_address WIDTH $the_address_width
  set_port_property master_byteenable WIDTH $the_byteenable_width
  set_port_property master_readdata WIDTH $the_data_width
  set_port_property master_writedata WIDTH $the_data_width
  set_port_property master_burstcount WIDTH $the_burst_count_width
  
  
  # determine the master direction and burst capabilities
  set the_master_direction [get_parameter_value MASTER_DIRECTION]
  set the_burst_capable [get_parameter_value BURST_CAPABLE]


  # switch between read and write master signals (excluding burstcount)
  if { $the_master_direction == 0 } { 
	set_interface_property avalon_master maximumPendingReadTransactions 1
	set_port_property control_read_base TERMINATION false
	set_port_property control_read_length TERMINATION false
	set_port_property control_write_base TERMINATION true
	set_port_property control_write_length TERMINATION true
	set_port_property control_early_done TERMINATION false
	set_port_property user_read_buffer TERMINATION false
	set_port_property user_write_buffer TERMINATION true
	set_port_property user_buffer_input_data TERMINATION true
	set_port_property user_buffer_output_data TERMINATION false
	set_port_property user_data_available TERMINATION false
	set_port_property user_buffer_full TERMINATION true
	set_port_property master_read TERMINATION false
	set_port_property master_write TERMINATION true
	set_port_property master_readdata TERMINATION false
	set_port_property master_readdatavalid TERMINATION false
	set_port_property master_writedata TERMINATION true
  } else { 
	set_interface_property avalon_master maximumPendingReadTransactions 0
	set_port_property control_read_base TERMINATION true
	set_port_property control_read_length TERMINATION true
	set_port_property control_write_base TERMINATION false
	set_port_property control_write_length TERMINATION false
	set_port_property control_early_done TERMINATION true
	set_port_property user_read_buffer TERMINATION true
	set_port_property user_write_buffer TERMINATION false
	set_port_property user_buffer_input_data TERMINATION false
	set_port_property user_buffer_output_data TERMINATION true
	set_port_property user_data_available TERMINATION true
	set_port_property user_buffer_full TERMINATION false
	set_port_property master_read TERMINATION true
	set_port_property master_write TERMINATION false
	set_port_property master_readdata TERMINATION true
	set_port_property master_readdatavalid TERMINATION true
	set_port_property master_writedata TERMINATION false
  }
  
  # enable/disable the burstcount signal
  if { $the_burst_capable == 0 } { 
	set_port_property master_burstcount TERMINATION true
  } else { 
	set_port_property master_burstcount TERMINATION false
  } 
}


proc validate_me {}  {

  # read in all the parameter that matter for validation
  set the_burst_capable [get_parameter_value BURST_CAPABLE]
  set the_maximum_burst_count [get_parameter_value MAXIMUM_BURST_COUNT]
  set the_fifo_depth [get_parameter_value FIFO_DEPTH]

  # when burst is enabled check to make sure FIFO depth is at least twice as large (also enable/disable burst count)
  if { $the_burst_capable == 1 } { 
	set_parameter_property MAXIMUM_BURST_COUNT ENABLED true
    if { $the_fifo_depth < [expr {$the_maximum_burst_count * 2}] } { 
	  send_message Error "The FIFO Depth must be at least twice as large as Maximum Burst Count."
	}
  } else { 
	set_parameter_property MAXIMUM_BURST_COUNT ENABLED false
  }
 
#  set the_fifo_depth [get_parameter_value FIFO_DEPTH]
#  set the_fifo_depth_log2 [expr {log($the_fifo_depth) / log(2)}] 
 
#  set the_burst_count [get_parameter_value MAXIMUM_BURST_COUNT]
#  set the_burst_count_width [expr {(log($the_burst_count) / log(2)) + 1}]

#  set_parameter_value BURST_COUNT_WIDTH $the_burst_count_width
#  set_parameter_value FIFO_DEPTH_LOG2 $the_fifo_depth_log2

#  set_parameter_value BURST_COUNT_WIDTH 1
#  set_parameter_value FIFO_DEPTH_LOG2 5
}

