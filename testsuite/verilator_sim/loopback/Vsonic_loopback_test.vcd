$version Generated by VerilatedVcd $end
$date Tue Nov 29 21:43:29 2011
 $end
$timescale 1ns $end

 $scope module TOP $end
  $var wire 40 #l data_in_xcvr [39:0] $end
  $var wire 40 #n data_out_xcvr [39:0] $end
  $var wire  1 #s enable_sfp $end
  $var wire  1 #k loopback_en $end
  $var wire  1 #p rd_clock $end
  $var wire  1 #r reset $end
  $var wire 128 #d rx_data_out [127:0] $end
  $var wire  1 #i rx_dma_rdreq $end
  $var wire 13 #h rx_rd_address [12:0] $end
  $var wire 14 #j rx_ring_wptr [13:0] $end
  $var wire 128 #\ tx_data_in [127:0] $end
  $var wire 14 #c tx_ring_rptr [13:0] $end
  $var wire  1 #b tx_tag_cpl $end
  $var wire 13 #` tx_wr_address [12:0] $end
  $var wire  1 #a tx_wrreq $end
  $var wire  1 #q wr_clock $end
  $var wire  1 #u xcvr_rx_ready $end
  $var wire  1 #t xcvr_tx_ready $end
  $scope module v $end
   $var wire 40 #l data_in_xcvr [39:0] $end
   $var wire 40 #n data_out_xcvr [39:0] $end
   $var wire  1 #s enable_sfp $end
   $var wire  1 #k loopback_en $end
   $var wire  1 #p rd_clock $end
   $var wire  1 #r reset $end
   $var wire 40 + rx_data_in [39:0] $end
   $var wire 128 #d rx_data_out [127:0] $end
   $var wire  1 #i rx_dma_rdreq $end
   $var wire 13 #h rx_rd_address [12:0] $end
   $var wire 14 #j rx_ring_wptr [13:0] $end
   $var wire 128 #\ tx_data_in [127:0] $end
   $var wire 40 > tx_data_out [39:0] $end
   $var wire 14 #c tx_ring_rptr [13:0] $end
   $var wire  1 #b tx_tag_cpl $end
   $var wire 13 #` tx_wr_address [12:0] $end
   $var wire  1 #a tx_wrreq $end
   $var wire  1 #q wr_clock $end
   $var wire  1 #u xcvr_rx_ready $end
   $var wire  1 #t xcvr_tx_ready $end
   $scope module loopback $end
    $var wire  1 #p clk_in $end
    $var wire 40 > data_in_chan [39:0] $end
    $var wire 40 #l data_in_xcvr [39:0] $end
    $var wire 40 + data_out_chan [39:0] $end
    $var wire 40 #n data_out_xcvr [39:0] $end
    $var wire  1 #k loopback_en $end
    $var wire  1 #, loopback_reg $end
    $var wire  1 #r reset $end
   $upscope $end
   $scope module rx_chan $end
    $var wire 66 #- blocksync_data_out [65:0] $end
    $var wire  1 - blocksync_lock $end
    $var wire 40 + data_in [39:0] $end
    $var wire 128 #d data_out [127:0] $end
    $var wire  1 #i dma_rdreq $end
    $var wire  1 #s enable_sfp $end
    $var wire 66 #H gearbox_data_out [65:0] $end
    $var wire  1 #K gearbox_valid $end
    $var wire 13 #h rd_address [12:0] $end
    $var wire  1 #p rd_clock $end
    $var wire  1 #r reset $end
    $var wire  1 #v rx_cbuf_rdena $end
    $var wire  1 #i rx_cbuf_rdreq $end
    $var wire  1 #v rx_cbuf_wrena $end
    $var wire  1 . rx_cbuf_wrreq $end
    $var wire 14 #j rx_ring_wptr [13:0] $end
    $var wire  1 #q wr_clock $end
    $var wire  1 #u xcvr_rx_ready $end
    $scope module blocksync $end
     $var wire  1 - block_lock $end
     $var wire  1 #q clk $end
     $var wire 66 #H data_in [65:0] $end
     $var wire 66 #- data_out [65:0] $end
     $var wire  8 2 offset [7:0] $end
     $var wire  1 #r reset $end
     $var wire 66 #1 rx_b1 [65:0] $end
     $var wire 66 #4 rx_b2 [65:0] $end
     $var wire 66 #- rx_coded [65:0] $end
     $var wire 32 / sh_cnt [31:0] $end
     $var wire 32 0 sh_invalid_cnt [31:0] $end
     $var wire  1 #0 sh_valid $end
     $var wire  1 1 slip_done $end
     $var wire  3 "- state [2:0] $end
     $var wire  1 = test_sh $end
     $var wire  1 #K valid $end
    $upscope $end
    $scope module gearbox $end
     $var wire  1 #q clk_in $end
     $var wire 40 + data_in [39:0] $end
     $var wire 66 #H data_out [65:0] $end
     $var wire  1 #K data_valid $end
     $var wire  1 #r reset $end
     $var wire 66 #M sr0 [65:0] $end
     $var wire 66 #P sr1 [65:0] $end
     $var wire  7 #L state [6:0] $end
     $var wire  1 #S valid $end
    $upscope $end
    $scope module rx_cbuf $end
     $var wire 66 #- data_in [65:0] $end
     $var wire 128 #d data_out [127:0] $end
     $var wire 13 #h rd_address [12:0] $end
     $var wire  1 #p rd_clock $end
     $var wire  1 #v rdena $end
     $var wire  1 #i rdreq $end
     $var wire  1 #r reset $end
     $var wire  1 "J rx_almost_empty $end
     $var wire  1 "/ rx_almost_full $end
     $var wire  1 4 rx_cbuf_rdena $end
     $var wire  1 3 rx_cbuf_wrena $end
     $var wire  1 "I rx_empty $end
     $var wire  1 ". rx_full $end
     $var wire 14 #j rx_ring_wptr [13:0] $end
     $var wire  1 #q wr_clock $end
     $var wire  1 #v wrena $end
     $var wire  1 . wrreq $end
     $scope module rx_cbuf $end
      $var wire 66 #- data_in [65:0] $end
      $var wire 66 U data_in_r [65:0] $end
      $var wire 66 X data_in_rr [65:0] $end
      $var wire 66 [ data_in_rrr [65:0] $end
      $var wire 128 #d data_out [127:0] $end
      $var wire  1 "K data_out_sel $end
      $var wire  1 ` data_out_sel_r $end
      $var wire  1 a data_out_sel_rr $end
      $var wire 128 D data_ring_data_out [127:0] $end
      $var wire 13 #h rd_address [12:0] $end
      $var wire  1 #p rd_clk $end
      $var wire  1 #r reset $end
      $var wire 128 @ sync_ring_data_out [127:0] $end
      $var wire  8 5 sync_ring_rd_address [7:0] $end
      $var wire 14 T wr_address [13:0] $end
      $var wire  1 #q wr_clk $end
      $var wire  1 3 wrena $end
      $var wire  1 . wrreq $end
      $var wire  1 ^ wrreq_r $end
      $var wire  1 _ wrreq_rr $end
      $scope module data_ring $end
       $var wire 64 o data [63:0] $end
       $var wire 128 D q [127:0] $end
       $var wire 13 #h rdaddress [12:0] $end
       $var wire  1 #p rdclock $end
       $var wire  1 #| rden $end
       $var wire 128 D sub_wire0 [127:0] $end
       $var wire 14 T wraddress [13:0] $end
       $var wire  1 #q wrclock $end
       $var wire  1 ' wren $end
       $scope module altsyncram_component $end
        $var wire 14 T address_a [13:0] $end
        $var wire 13 #h address_b [12:0] $end
        $var wire  1 #q clock0 $end
        $var wire  1 #p clock1 $end
        $var wire  1 #| cs_a $end
        $var wire  1 #| cs_b $end
        $var wire 64 o data_a [63:0] $end
        $var wire 64 $$ data_a_out [63:0] $end
        $var wire 128 P data_b_out [127:0] $end
        $var wire 32 x i5 [31:0] $end
        $var wire  1 #| oe_a $end
        $var wire  1 #| oe_b $end
        $var wire 32 w port_a_bit_count_low [31:0] $end
        $var wire 128 P q_b [127:0] $end
        $var wire 64 q temp_wa [63:0] $end
        $var wire 128 s temp_wb [127:0] $end
        $var wire  1 ' wren_a $end
        $var wire  1 $# wren_b $end
       $upscope $end
      $upscope $end
      $scope module gen_wr_addr $end
       $var wire 14 T addr_out [13:0] $end
       $var wire  1 #q clk_in $end
       $var wire  1 3 ena $end
       $var wire  1 . incr $end
       $var wire 14 "0 next_address [13:0] $end
       $var wire  1 #r reset $end
       $scope module sta $end
        $var wire  1 #q clk $end
        $var wire 14 "0 ext_read_addr [13:0] $end
        $var wire 14 c ext_read_addr_r [13:0] $end
        $var wire 14 T int_read_addr [13:0] $end
        $var wire  6 b pgn [5:0] $end
        $var wire  1 #r reset $end
       $upscope $end
      $upscope $end
      $scope module sync_ring $end
       $var wire  2 d data_in [1:0] $end
       $var wire 128 @ data_out [127:0] $end
       $var wire 64 J data_out_bot [63:0] $end
       $var wire 64 H data_out_top [63:0] $end
       $var wire  8 5 rd_address [7:0] $end
       $var wire  1 #p rd_clock $end
       $var wire 14 T wr_address [13:0] $end
       $var wire  1 #q wr_clock $end
       $var wire  1 6 wren $end
       $scope module bot_half $end
        $var wire  2 d data [1:0] $end
        $var wire  1 #q inclock $end
        $var wire  1 #p outclock $end
        $var wire 64 J q [63:0] $end
        $var wire  8 5 rdaddress [7:0] $end
        $var wire 64 J sub_wire0 [63:0] $end
        $var wire 13 $ wraddress [12:0] $end
        $var wire  1 & wren $end
        $scope module altsyncram_component $end
         $var wire 13 $ address_a [12:0] $end
         $var wire  8 5 address_b [7:0] $end
         $var wire  1 #q clock0 $end
         $var wire  1 #p clock1 $end
         $var wire  1 #| cs_a $end
         $var wire  1 #| cs_b $end
         $var wire  2 d data_a [1:0] $end
         $var wire  2 $" data_a_out [1:0] $end
         $var wire 64 N data_b_out [63:0] $end
         $var wire 32 n i5 [31:0] $end
         $var wire  1 #| oe_a $end
         $var wire  1 #| oe_b $end
         $var wire 32 m port_a_bit_count_low [31:0] $end
         $var wire 64 N q_b [63:0] $end
         $var wire  2 j temp_wa [1:0] $end
         $var wire 64 k temp_wb [63:0] $end
         $var wire  1 & wren_a $end
         $var wire  1 $! wren_b $end
        $upscope $end
       $upscope $end
       $scope module top_half $end
        $var wire  2 d data [1:0] $end
        $var wire  1 #q inclock $end
        $var wire  1 #p outclock $end
        $var wire 64 H q [63:0] $end
        $var wire  8 5 rdaddress [7:0] $end
        $var wire 64 H sub_wire0 [63:0] $end
        $var wire 13 # wraddress [12:0] $end
        $var wire  1 % wren $end
        $scope module altsyncram_component $end
         $var wire 13 # address_a [12:0] $end
         $var wire  8 5 address_b [7:0] $end
         $var wire  1 #q clock0 $end
         $var wire  1 #p clock1 $end
         $var wire  1 #| cs_a $end
         $var wire  1 #| cs_b $end
         $var wire  2 d data_a [1:0] $end
         $var wire  2 #~ data_a_out [1:0] $end
         $var wire 64 L data_b_out [63:0] $end
         $var wire 32 i i5 [31:0] $end
         $var wire  1 #| oe_a $end
         $var wire  1 #| oe_b $end
         $var wire 32 h port_a_bit_count_low [31:0] $end
         $var wire 64 L q_b [63:0] $end
         $var wire  2 e temp_wa [1:0] $end
         $var wire 64 f temp_wb [63:0] $end
         $var wire  1 % wren_a $end
         $var wire  1 #} wren_b $end
        $upscope $end
       $upscope $end
      $upscope $end
     $upscope $end
     $scope module usedw_calc $end
      $var wire  1 "J almost_empty $end
      $var wire  1 "J almost_empty_reg $end
      $var wire  1 "/ almost_full $end
      $var wire  1 "/ almost_full_reg $end
      $var wire 14 "2 clock_crossed_rdcounter [13:0] $end
      $var wire 14 "3 clock_crossed_rdcounter_prev [13:0] $end
      $var wire 14 "2 clock_crossed_rptr [13:0] $end
      $var wire 14 #j clock_crossed_wptr [13:0] $end
      $var wire 14 "N clock_crossed_wrcounter [13:0] $end
      $var wire 14 "O clock_crossed_wrcounter_prev [13:0] $end
      $var wire  1 "I empty $end
      $var wire  1 "I empty_reg $end
      $var wire  1 ". full $end
      $var wire  1 ". full_reg $end
      $var wire  1 #p rdclock $end
      $var wire 14 "M rdcounter [13:0] $end
      $var wire  1 4 rdena $end
      $var wire  1 #i rdreq $end
      $var wire 14 "L rdusedqwords [13:0] $end
      $var wire 14 "L rdusedqwords_reg [13:0] $end
      $var wire 14 "4 reads_this_write_cycle [13:0] $end
      $var wire 14 "4 reads_this_write_cycle_delay [13:0] $end
      $var wire  1 #r reset $end
      $var wire  1 #q wrclock $end
      $var wire 14 #T wrcounter [13:0] $end
      $var wire  1 3 wrena $end
      $var wire 14 "P writes_this_read_cycle [13:0] $end
      $var wire 14 "P writes_this_read_cycle_delay [13:0] $end
      $var wire  1 . wrreq $end
      $var wire 14 "1 wrusedqwords [13:0] $end
      $var wire 14 "1 wrusedqwords_reg [13:0] $end
      $scope module rdcounter_to_wrclock $end
       $var wire 14 "M data [13:0] $end
       $var wire 14 "X gray_data [13:0] $end
       $var wire 32 "; i_out [31:0] $end
       $var wire 32 "8 i_shift [31:0] $end
       $var wire  1 #p inclock $end
       $var wire  1 4 inena $end
       $var wire  1 #q outclock $end
       $var wire  1 #| outena $end
       $var wire 14 ": partial_xor [13:0] $end
       $var wire 14 "2 q [13:0] $end
       $var wire 14 "2 q_reg [13:0] $end
       $var wire  1 #r reset $end
       $var wire 14 "5 shift_register(0) [13:0] $end
       $var wire 14 "6 shift_register(1) [13:0] $end
       $var wire 14 "7 shift_register(2) [13:0] $end
       $var wire  1 $& zeros $end
       $scope module unnamedblk1 $end
        $var wire 32 "9 i [31:0] $end
       $upscope $end
      $upscope $end
      $scope module reads_this_write_cycle_delayer $end
       $var wire  1 #q clock $end
       $var wire 14 "4 data [13:0] $end
       $var wire  1 #| ena $end
       $var wire 32 $( i [31:0] $end
       $var wire 14 "4 q [13:0] $end
       $var wire  1 #r reset $end
      $upscope $end
      $scope module wrcounter_to_rdclock $end
       $var wire 14 #T data [13:0] $end
       $var wire 14 #U gray_data [13:0] $end
       $var wire 32 "W i_out [31:0] $end
       $var wire 32 "T i_shift [31:0] $end
       $var wire  1 #q inclock $end
       $var wire  1 3 inena $end
       $var wire  1 #p outclock $end
       $var wire  1 #| outena $end
       $var wire 14 "V partial_xor [13:0] $end
       $var wire 14 "N q [13:0] $end
       $var wire 14 "N q_reg [13:0] $end
       $var wire  1 #r reset $end
       $var wire 14 "Q shift_register(0) [13:0] $end
       $var wire 14 "R shift_register(1) [13:0] $end
       $var wire 14 "S shift_register(2) [13:0] $end
       $var wire  1 $& zeros $end
       $scope module unnamedblk1 $end
        $var wire 32 "U i [31:0] $end
       $upscope $end
      $upscope $end
      $scope module writes_this_read_cycle_delayer $end
       $var wire  1 #p clock $end
       $var wire 14 "P data [13:0] $end
       $var wire  1 #| ena $end
       $var wire 32 $' i [31:0] $end
       $var wire 14 "P q [13:0] $end
       $var wire  1 #r reset $end
      $upscope $end
     $upscope $end
    $upscope $end
   $upscope $end
   $scope module tx_chan $end
    $var wire 128 #\ data_in [127:0] $end
    $var wire 40 > data_out [39:0] $end
    $var wire  1 #s enable_sfp $end
    $var wire  1 ( gearbox_ena $end
    $var wire  1 "Y gearbox_rdreq $end
    $var wire  1 #p rd_clock $end
    $var wire  1 #r reset $end
    $var wire  1 #b tag_cpl $end
    $var wire 66 #8 tx_cbuf_data_out [65:0] $end
    $var wire  1 #w tx_cbuf_rdena $end
    $var wire  1 "Y tx_cbuf_rdreq $end
    $var wire  1 #w tx_cbuf_wrena $end
    $var wire  1 #a tx_cbuf_wrreq $end
    $var wire 14 #c tx_ring_rptr [13:0] $end
    $var wire 13 #` wr_address [12:0] $end
    $var wire  1 #q wr_clock $end
    $var wire  1 #a wrreq $end
    $var wire  1 #t xcvr_tx_ready $end
    $scope module gearbox $end
     $var wire  1 #p clk_in $end
     $var wire 66 #8 data_in [65:0] $end
     $var wire 40 > data_out [39:0] $end
     $var wire  1 ( ena $end
     $var wire  1 "Y rd_req $end
     $var wire  1 "Y rd_req_out $end
     $var wire  1 #) rd_req_r $end
     $var wire  1 #* rd_req_rr $end
     $var wire  1 #+ rd_req_rrr $end
     $var wire  1 #r reset $end
     $var wire 66 #! sr0 [65:0] $end
     $var wire 66 #$ sr1 [65:0] $end
     $var wire  7 #Z state [6:0] $end
     $var wire  7 #' state_r [6:0] $end
     $var wire  7 #( state_rr [6:0] $end
    $upscope $end
    $scope module tx_cbuf $end
     $var wire  5 #V curr_page [4:0] $end
     $var wire 128 #\ data_in [127:0] $end
     $var wire 66 #8 data_out [65:0] $end
     $var wire  1 ( gearbox_ena $end
     $var wire  1 #7 page_ready $end
     $var wire  5 #W prev_page [4:0] $end
     $var wire  1 #p rd_clock $end
     $var wire 14 "] rd_cpld_qword_count [13:0] $end
     $var wire  1 ( rd_page_ready $end
     $var wire  1 "Z rd_ready $end
     $var wire  1 ) rd_tag_cpl $end
     $var wire  1 #w rdena $end
     $var wire  1 "Y rdreq $end
     $var wire 14 "^ rdusedqwords [13:0] $end
     $var wire  1 #r reset $end
     $var wire  1 "\ rx_almost_empty $end
     $var wire  1 "= rx_almost_full $end
     $var wire  1 7 rx_cbuf_rdena $end
     $var wire  1 * rx_cbuf_rdreq $end
     $var wire  1 8 rx_cbuf_wrena $end
     $var wire  1 "[ rx_empty $end
     $var wire  1 "< rx_full $end
     $var wire  1 #b tag_cpl $end
     $var wire 14 #c tx_ring_rptr [13:0] $end
     $var wire 13 #` wr_address [12:0] $end
     $var wire  1 #q wr_clock $end
     $var wire  1 #w wrena $end
     $var wire  1 #a wrreq $end
     $var wire 14 "> wrusedqwords [13:0] $end
     $scope module cpl_crosser $end
      $var wire  1 #b data $end
      $var wire 32 "q i_shift [31:0] $end
      $var wire  1 #q inclock $end
      $var wire  1 #| inena $end
      $var wire  1 #p outclock $end
      $var wire  1 #| outena $end
      $var wire  1 ) q $end
      $var wire  1 #r reset $end
      $var wire  1 "i shift_register(0) $end
      $var wire  1 "j shift_register(1) $end
      $var wire  1 "k shift_register(2) $end
      $var wire  1 "l shift_register(3) $end
      $var wire  1 "m shift_register(4) $end
      $var wire  1 "n shift_register(5) $end
      $var wire  1 "o shift_register(6) $end
      $var wire  1 "p shift_register(7) $end
      $scope module unnamedblk1 $end
       $var wire 32 "r i [31:0] $end
      $upscope $end
     $upscope $end
     $scope module page_ready_crosser $end
      $var wire  1 #7 data $end
      $var wire 32 "g i_shift [31:0] $end
      $var wire  1 #q inclock $end
      $var wire  1 #| inena $end
      $var wire  1 #p outclock $end
      $var wire  1 #| outena $end
      $var wire  1 ( q $end
      $var wire  1 #r reset $end
      $var wire  1 "_ shift_register(0) $end
      $var wire  1 "` shift_register(1) $end
      $var wire  1 "a shift_register(2) $end
      $var wire  1 "b shift_register(3) $end
      $var wire  1 "c shift_register(4) $end
      $var wire  1 "d shift_register(5) $end
      $var wire  1 "e shift_register(6) $end
      $var wire  1 "f shift_register(7) $end
      $scope module unnamedblk1 $end
       $var wire 32 "h i [31:0] $end
      $upscope $end
     $upscope $end
     $scope module tx_cbuf $end
      $var wire 128 #\ data_in [127:0] $end
      $var wire 66 #8 data_out [65:0] $end
      $var wire 64 #< dout_data [63:0] $end
      $var wire  2 #; dout_sync [1:0] $end
      $var wire 14 #> rd_address [13:0] $end
      $var wire  1 #p rd_clk $end
      $var wire  1 7 rdena $end
      $var wire  1 * rdreq $end
      $var wire  1 #r reset $end
      $var wire 13 #` wr_address [12:0] $end
      $var wire 13 #` wr_address_data [12:0] $end
      $var wire  8 9 wr_address_sync [7:0] $end
      $var wire  1 #q wr_clk $end
      $var wire  1 : wren_data $end
      $var wire  1 ; wren_sync $end
      $var wire  1 #a wrreq $end
      $scope module data_ring $end
       $var wire 128 #\ data [127:0] $end
       $var wire 64 #< q [63:0] $end
       $var wire 14 #> rdaddress [13:0] $end
       $var wire  1 #p rdclock $end
       $var wire  1 #| rden $end
       $var wire 64 #< sub_wire0 [63:0] $end
       $var wire 13 #` wraddress [12:0] $end
       $var wire  1 #q wrclock $end
       $var wire  1 : wren $end
       $scope module altsyncram_component $end
        $var wire 13 #` address_a [12:0] $end
        $var wire 14 #> address_b [13:0] $end
        $var wire  1 #q clock0 $end
        $var wire  1 #p clock1 $end
        $var wire  1 #| cs_a $end
        $var wire  1 #| cs_b $end
        $var wire 128 #\ data_a [127:0] $end
        $var wire 128 $* data_a_out [127:0] $end
        $var wire 64 #A data_b_out [63:0] $end
        $var wire 32 "" i5 [31:0] $end
        $var wire  1 #| oe_a $end
        $var wire  1 #| oe_b $end
        $var wire 32 "! port_a_bit_count_low [31:0] $end
        $var wire 64 #A q_b [63:0] $end
        $var wire 128 y temp_wa [127:0] $end
        $var wire 64 } temp_wb [63:0] $end
        $var wire  1 : wren_a $end
        $var wire  1 $) wren_b $end
       $upscope $end
      $upscope $end
      $scope module gen_rd_addr $end
       $var wire 14 #> addr_out [13:0] $end
       $var wire  1 #p clk_in $end
       $var wire  1 7 ena $end
       $var wire  1 * incr $end
       $var wire 14 #[ next_address [13:0] $end
       $var wire  1 #r reset $end
       $scope module sta $end
        $var wire  1 #p clk $end
        $var wire 14 #[ ext_read_addr [13:0] $end
        $var wire 14 #@ ext_read_addr_r [13:0] $end
        $var wire 14 #> int_read_addr [13:0] $end
        $var wire  6 #? pgn [5:0] $end
        $var wire  1 #r reset $end
       $upscope $end
      $upscope $end
      $scope module sync_ring $end
       $var wire 128 #\ data_in [127:0] $end
       $var wire  2 #; data_out [1:0] $end
       $var wire  2 #D data_out_ls [1:0] $end
       $var wire  2 #C data_out_ms [1:0] $end
       $var wire  1 #E data_sel $end
       $var wire 13 < mapped_read_address [12:0] $end
       $var wire 14 #> rd_address [13:0] $end
       $var wire  1 #p rd_clock $end
       $var wire  8 9 wr_address [7:0] $end
       $var wire  1 #q wr_clock $end
       $var wire  1 ; wren $end
       $scope module bot_half $end
        $var wire 64 #z data [63:0] $end
        $var wire  1 #q inclock $end
        $var wire  1 #p outclock $end
        $var wire  2 #D q [1:0] $end
        $var wire 13 < rdaddress [12:0] $end
        $var wire  2 #D sub_wire0 [1:0] $end
        $var wire  8 9 wraddress [7:0] $end
        $var wire  1 ; wren $end
        $scope module altsyncram_component $end
         $var wire  8 9 address_a [7:0] $end
         $var wire 13 < address_b [12:0] $end
         $var wire  1 #q clock0 $end
         $var wire  1 #p clock1 $end
         $var wire  1 #| cs_a $end
         $var wire  1 #| cs_b $end
         $var wire 64 #z data_a [63:0] $end
         $var wire 64 $2 data_a_out [63:0] $end
         $var wire  2 #G data_b_out [1:0] $end
         $var wire 32 ", i5 [31:0] $end
         $var wire  1 #| oe_a $end
         $var wire  1 #| oe_b $end
         $var wire 32 "+ port_a_bit_count_low [31:0] $end
         $var wire  2 #D q_b [1:0] $end
         $var wire 64 "( temp_wa [63:0] $end
         $var wire  2 "* temp_wb [1:0] $end
         $var wire  1 ; wren_a $end
         $var wire  1 $1 wren_b $end
        $upscope $end
       $upscope $end
       $scope module top_half $end
        $var wire 64 #x data [63:0] $end
        $var wire  1 #q inclock $end
        $var wire  1 #p outclock $end
        $var wire  2 #C q [1:0] $end
        $var wire 13 < rdaddress [12:0] $end
        $var wire  2 #C sub_wire0 [1:0] $end
        $var wire  8 9 wraddress [7:0] $end
        $var wire  1 ; wren $end
        $scope module altsyncram_component $end
         $var wire  8 9 address_a [7:0] $end
         $var wire 13 < address_b [12:0] $end
         $var wire  1 #q clock0 $end
         $var wire  1 #p clock1 $end
         $var wire  1 #| cs_a $end
         $var wire  1 #| cs_b $end
         $var wire 64 #x data_a [63:0] $end
         $var wire 64 $/ data_a_out [63:0] $end
         $var wire  2 #F data_b_out [1:0] $end
         $var wire 32 "' i5 [31:0] $end
         $var wire  1 #| oe_a $end
         $var wire  1 #| oe_b $end
         $var wire 32 "& port_a_bit_count_low [31:0] $end
         $var wire  2 #C q_b [1:0] $end
         $var wire 64 "# temp_wa [63:0] $end
         $var wire  2 "% temp_wb [1:0] $end
         $var wire  1 ; wren_a $end
         $var wire  1 $. wren_b $end
        $upscope $end
       $upscope $end
      $upscope $end
     $upscope $end
     $scope module usedw_calculator $end
      $var wire  1 "\ almost_empty $end
      $var wire  1 "\ almost_empty_reg $end
      $var wire  1 "= almost_full $end
      $var wire  1 "= almost_full_reg $end
      $var wire 14 "? clock_crossed_rdcounter [13:0] $end
      $var wire 14 "@ clock_crossed_rdcounter_prev [13:0] $end
      $var wire 14 #c clock_crossed_rptr [13:0] $end
      $var wire 14 "s clock_crossed_wptr [13:0] $end
      $var wire 14 "s clock_crossed_wrcounter [13:0] $end
      $var wire 14 "u clock_crossed_wrcounter_prev [13:0] $end
      $var wire  1 "[ empty $end
      $var wire  1 "[ empty_reg $end
      $var wire  1 "< full $end
      $var wire  1 "< full_reg $end
      $var wire  1 #p rdclock $end
      $var wire 14 "t rdcounter [13:0] $end
      $var wire  1 7 rdena $end
      $var wire  1 * rdreq $end
      $var wire 14 "^ rdusedqwords [13:0] $end
      $var wire 14 "^ rdusedqwords_reg [13:0] $end
      $var wire 14 "A reads_this_write_cycle [13:0] $end
      $var wire 14 "A reads_this_write_cycle_delay [13:0] $end
      $var wire  1 #r reset $end
      $var wire  1 #q wrclock $end
      $var wire 14 #X wrcounter [13:0] $end
      $var wire  1 8 wrena $end
      $var wire 14 "v writes_this_read_cycle [13:0] $end
      $var wire 14 "v writes_this_read_cycle_delay [13:0] $end
      $var wire  1 #a wrreq $end
      $var wire 14 "> wrusedqwords [13:0] $end
      $var wire 14 "> wrusedqwords_reg [13:0] $end
      $scope module rdcounter_to_wrclock $end
       $var wire 14 "t data [13:0] $end
       $var wire 14 "~ gray_data [13:0] $end
       $var wire 32 "H i_out [31:0] $end
       $var wire 32 "E i_shift [31:0] $end
       $var wire  1 #p inclock $end
       $var wire  1 7 inena $end
       $var wire  1 #q outclock $end
       $var wire  1 #| outena $end
       $var wire 14 "G partial_xor [13:0] $end
       $var wire 14 "? q [13:0] $end
       $var wire 14 "? q_reg [13:0] $end
       $var wire  1 #r reset $end
       $var wire 14 "B shift_register(0) [13:0] $end
       $var wire 14 "C shift_register(1) [13:0] $end
       $var wire 14 "D shift_register(2) [13:0] $end
       $var wire  1 $& zeros $end
       $scope module unnamedblk1 $end
        $var wire 32 "F i [31:0] $end
       $upscope $end
      $upscope $end
      $scope module reads_this_write_cycle_delayer $end
       $var wire  1 #q clock $end
       $var wire 14 "A data [13:0] $end
       $var wire  1 #| ena $end
       $var wire 32 $5 i [31:0] $end
       $var wire 14 "A q [13:0] $end
       $var wire  1 #r reset $end
      $upscope $end
      $scope module wrcounter_to_rdclock $end
       $var wire 14 #X data [13:0] $end
       $var wire 14 #Y gray_data [13:0] $end
       $var wire 32 "} i_out [31:0] $end
       $var wire 32 "z i_shift [31:0] $end
       $var wire  1 #q inclock $end
       $var wire  1 8 inena $end
       $var wire  1 #p outclock $end
       $var wire  1 #| outena $end
       $var wire 14 "| partial_xor [13:0] $end
       $var wire 14 "s q [13:0] $end
       $var wire 14 "s q_reg [13:0] $end
       $var wire  1 #r reset $end
       $var wire 14 "w shift_register(0) [13:0] $end
       $var wire 14 "x shift_register(1) [13:0] $end
       $var wire 14 "y shift_register(2) [13:0] $end
       $var wire  1 $& zeros $end
       $scope module unnamedblk1 $end
        $var wire 32 "{ i [31:0] $end
       $upscope $end
      $upscope $end
      $scope module writes_this_read_cycle_delayer $end
       $var wire  1 #p clock $end
       $var wire 14 "v data [13:0] $end
       $var wire  1 #| ena $end
       $var wire 32 $4 i [31:0] $end
       $var wire 14 "v q [13:0] $end
       $var wire  1 #r reset $end
      $upscope $end
     $upscope $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000000000000 #
b0000000000000 $
0%
0&
0'
0)
0*
0(
0-
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
01
b00000000 2
06
b00000000 5
0.
13
04
0:
b00000000 9
1;
18
07
b0000000000000000000000000000000000000000 +
b0000000000000 <
0=
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 @
b0000000000000000000000000000000000000000000000000000000000000000 H
b0000000000000000000000000000000000000000000000000000000000000000 L
b0000000000000000000000000000000000000000000000000000000000000000 J
b0000000000000000000000000000000000000000000000000000000000000000 N
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 D
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 P
b0000000000000000000000000000000000000000 >
b000000000000000000000000000000000000000000000000000000000000000000 U
b000000000000000000000000000000000000000000000000000000000000000000 X
b000000000000000000000000000000000000000000000000000000000000000000 [
0^
0_
0`
0a
b000000 b
b00000000000000 c
b00 e
b0000000000000000000000000000000000000000000000000000000000000000 f
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00 d
b00 j
b0000000000000000000000000000000000000000000000000000000000000000 k
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b0000000000000000000000000000000000000000000000000000000000000000 o
b00000000000000 T
b0000000000000000000000000000000000000000000000000000000000000000 q
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 s
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 y
b0000000000000000000000000000000000000000000000000000000000000000 }
b00000000000000000000000000000000 "!
b00000000000000000000000000000000 ""
b0000000000000000000000000000000000000000000000000000000000000000 "#
b00 "%
b00000000000000000000000000000000 "&
b00000000000000000000000000000000 "'
b0000000000000000000000000000000000000000000000000000000000000000 "(
b00 "*
b00000000000000000000000000000000 "+
b00000000000000000000000000000000 ",
b000 "-
b00000000000000 "0
b00000000000000 "1
0".
0"/
b00000000000000 "3
b00000000000000 "5
b00000000000000 "6
b00000000000000 "7
b00000000000000 "2
b00000000000000000000000000000000 "8
b00000000000000000000000000000011 "9
b00000000000000 ":
b00000000000000000000000000000000 ";
b00000000000000 "4
b00000000000000 ">
0"<
0"=
b00000000000000 "@
b00000000000000 "B
b00000000000000 "C
b00000000000000 "D
b00000000000000 "?
b00000000000000000000000000000000 "E
b00000000000000000000000000000011 "F
b00000000000000 "G
b00000000000000000000000000000000 "H
b00000000000000 "A
0"K
b00000000000000 "L
1"I
1"J
b00000000000000 "M
b00000000000000 "O
b00000000000000 "Q
b00000000000000 "R
b00000000000000 "S
b00000000000000 "N
b00000000000000000000000000000000 "T
b00000000000000000000000000000011 "U
b00000000000000 "V
b00000000000000000000000000000000 "W
b00000000000000 "X
b00000000000000 "P
0"Z
b00000000000000 "]
0"_
0"`
0"a
0"b
0"c
0"d
0"e
0"f
b00000000000000000000000000000000 "g
b00000000000000000000000000001000 "h
0"i
0"j
0"k
0"l
0"m
0"n
0"o
0"p
b00000000000000000000000000000000 "q
b00000000000000000000000000001000 "r
b00000000000000 "^
1"[
1"\
b00000000000000 "t
b00000000000000 "u
b00000000000000 "w
b00000000000000 "x
b00000000000000 "y
b00000000000000 "s
b00000000000000000000000000000000 "z
b00000000000000000000000000000011 "{
b00000000000000 "|
b00000000000000000000000000000000 "}
b00000000000000 "~
b00000000000000 "v
b000000000000000000000000000000000000000000000000000000000000000000 #!
b000000000000000000000000000000000000000000000000000000000000000000 #$
0"Y
b0000000 #'
b0000000 #(
0#)
0#*
0#+
0#,
0#0
b000000000000000000000000000000000000000000000000000000000000000000 #1
b000000000000000000000000000000000000000000000000000000000000000000 #4
b000000000000000000000000000000000000000000000000000000000000000000 #-
0#7
b00 #;
b000000 #?
b00000000000000 #@
b0000000000000000000000000000000000000000000000000000000000000000 #<
b0000000000000000000000000000000000000000000000000000000000000000 #A
b00000000000000 #>
0#E
b00 #C
b00 #F
b00 #D
b00 #G
b000000000000000000000000000000000000000000000000000000000000000000 #8
b0000000 #L
b000000000000000000000000000000000000000000000000000000000000000000 #M
b000000000000000000000000000000000000000000000000000000000000000000 #P
0#S
b000000000000000000000000000000000000000000000000000000000000000000 #H
0#K
b00000000000000 #T
b00000000000000 #U
b00000 #V
b00000 #W
b00000000000000 #X
b00000000000000 #Y
b0000000 #Z
b00000000000000 #[
1#u
1#v
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 #d
b0000000000000 #h
0#i
b00000000000000 #j
1#s
1#t
1#w
1#b
b0000000000000 #`
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 #\
b0000000000000000000000000000000000000000000000000000000000000000 #x
b0000000000000000000000000000000000000000000000000000000000000000 #z
1#a
b00000000000000 #c
0#q
0#p
1#r
1#k
b0000000000000000000000000000000000000000 #l
b0000000000000000000000000000000000000000 #n
0#}
b00 #~
0$!
b00 $"
0$#
b0000000000000000000000000000000000000000000000000000000000000000 $$
b00000000000000000000000000000000 $'
b00000000000000000000000000000000 $(
0$)
b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 $*
0$.
b0000000000000000000000000000000000000000000000000000000000000000 $/
0$1
b0000000000000000000000000000000000000000000000000000000000000000 $2
0$&
b00000000000000000000000000000000 $4
1#|
b00000000000000000000000000000000 $5
#1
b000001 b
b00000000000000000000000001000000 "&
b00000000000000000000000001000000 "'
b00000000000000000000000001000000 "+
b00000000000000000000000001000000 ",
b000001 #?
1#q
1#p
#2
0#q
0#p
#3
b0000000010000 #
b0000000010000 $
b0000000010000 <
b00000000010000 T
b00000000010000 #>
1#q
1#p
#4
0#q
0#p
#5
1#q
1#p
#6
0#q
0#p
#7
1#q
1#p
#8
0#q
0#p
#9
1#q
1#p
#10
0#q
0#p
#11
b001 "-
b00000000000000000000000000000010 "8
b00000000000000000000000000001110 ";
b00000000000010 ">
b00000000000000000000000000000010 "E
b00000000000000000000000000001110 "H
b00000000000000000000000000000010 "T
b00000000000000000000000000001110 "W
b00000000000000000000000000000111 "g
1"p
b00000000000000000000000000000111 "q
b00000000000000000000000000000010 "z
b00000000000000000000000000001110 "}
1"Y
1#,
b0000001 #L
b00000000000010 #X
1#q
1#p
0#r
#12
b10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100100000000000000000000000000000000 #\
b1010101010101010101010101010101010101010101010101010101010101010 #x
b1010101010101010101010101010100100000000000000000000000000000000 #z
0#q
0#p
#13
b1010101010101010101010101010101010101010101010101010101010101010 "#
b10 "%
b1010101010101010101010101010100100000000000000000000000000000000 "(
b10 "*
b00000000000100 ">
1"o
1#)
b01 #;
b10 #C
b10 #F
b01 #D
b01 #G
b000000000000000000000000000000000000000000000000000000000000000001 #8
b0000010 #L
1#S
b00000000000100 #X
b00000000000011 #Y
1#q
1#p
#14
b00000001 9
b0000000000001 #`
b10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010 #\
b1010101010101010101010101010101010101010101010101010101010101010 #z
0#q
0#p
#15
1=
b00000000000000000000000010000000 "&
b1010101010101010101010101010101010101010101010101010101010101010 "(
b00000000000000000000000010000000 "+
b00000000000110 ">
1"n
b00000000000011 "y
b000000000000000000000000000000000000000000000000000000000000000001 #!
1#*
b0000011 #L
0#S
1#K
b00000000000110 #X
b00000000000110 #Y
1#q
1#p
#16
b00000010 9
b0000000000010 #`
0#q
0#p
#17
0=
b00000000000000000000000011000000 "&
b00000000000000000000000011000000 "+
b010 "-
b00000000001000 ">
1"m
b00000000000011 "x
b00000000000110 "y
b000000000000000000000000000000000000000000000000000000000000000001 #$
1#+
b0000100 #L
1#S
0#K
b00000000001000 #X
b00000000000101 #Y
1#q
1#p
#18
b00000011 9
b0000000000011 #`
b10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100101011010101010101010101010101010 #\
b1010101010101010101010101010100101011010101010101010101010101010 #z
0#q
0#p
#19
b00000000000000000000000000000001 /
b00000000000000000000000000000001 0
1=
b00000000000000000000000100000000 "&
b1010101010101010101010101010100101011010101010101010101010101010 "(
b00000000000000000000000100000000 "+
b100 "-
b00000000001010 ">
1"l
b00000000000011 "w
b00000000000110 "x
b00000000000101 "y
b0000101 #L
1#K
b00000000001010 #X
b00000000001100 #Y
1#q
1#p
#20
b00000000000000000000000000000010 /
b00000000000000000000000000000010 0
b00000100 9
b0000000000100 #`
b10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010 #\
b1010101010101010101010101010101010101010101010101010101010101010 #z
0#q
0#p
#21
b00000000000000000000000000000011 /
b00000000000000000000000000000011 0
b00000000000000000000000101000000 "&
b1010101010101010101010101010101010101010101010101010101010101010 "(
b00000000000000000000000101000000 "+
b00000000001100 ">
1"k
b00000000000110 "w
b00000000000101 "x
b00000000001100 "y
b00000000000010 "s
b00000000000010 "|
b00000000000010 "v
b0000110 #L
0#S
b00000000001100 #X
b00000000001111 #Y
1#q
1#p
#22
b00000000000000000000000000000100 /
b00000000000000000000000000000100 0
b00000101 9
b0000000000101 #`
0#q
0#p
#23
b00000000000000000000000000000101 /
b00000000000000000000000000000101 0
b00000000000000000000000110000000 "&
b00000000000000000000000110000000 "+
b00000000001110 ">
1"j
b00000000000010 "^
b00000000000010 "u
b00000000000101 "w
b00000000001100 "x
b00000000001111 "y
b00000000000100 "s
b00000000000100 "|
b0000111 #L
1#S
0#K
b00000000001110 #X
b00000000001010 #Y
1#q
1#p
#24
b00000000000000000000000000000110 /
b00000000000000000000000000000110 0
b00000110 9
b0000000000110 #`
b10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100101011010101010101010101010101010 #\
b1010101010101010101010101010100101011010101010101010101010101010 #z
0#q
0#p
#25
1)
b00000000000000000000000000000111 /
b00000000000000000000000000000111 0
b00000000000000000000000111000000 "&
b1010101010101010101010101010100101011010101010101010101010101010 "(
b00000000000000000000000111000000 "+
b00000000010000 ">
1"i
b00000000000100 "^
0"[
b00000000000100 "u
b00000000001100 "w
b00000000001111 "x
b00000000001010 "y
b00000000000110 "s
b00000000000110 "|
b0001000 #L
0#S
1#K
b00000000010000 #X
b00000000001001 #Y
1#q
1#p
#26
b00000000000000000000000000001000 /
b00000000000000000000000000001000 0
b00000111 9
b0000000000111 #`
b10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010 #\
b1010101010101010101010101010101010101010101010101010101010101010 #z
0#q
0#p
#27
b00000000000000000000000000001001 /
b00000000000000000000000000001001 0
b00000000000000000000001000000000 "&
b1010101010101010101010101010101010101010101010101010101010101010 "(
b00000000000000000000001000000000 "+
b00000000010010 ">
b00000000000011 "]
b00000000000110 "^
b00000000000110 "u
b00000000001111 "w
b00000000001010 "x
b00000000001001 "y
b00000000001000 "s
b00000000001000 "|
b0001001 #L
1#S
0#K
b00000000010010 #X
b00000000011000 #Y
1#q
1#p
#28
b00000000000000000000000000001010 /
b00000000000000000000000000001010 0
1:
b00000000 9
0;
b0000000001000 #`
b10110111101110010000110100010011100010000011111000111111001010100001110000000000000101101101010101010101010101010101010101111000 #\
b1011011110111001000011010001001110001000001111100011111100101010 #x
b0001110000000000000101101101010101010101010101010101010101111000 #z
0#q
0#p
#29
1*
b00000000000000000000000000001011 /
b00000000000000000000000000001011 0
b10110111101110010000110100010011100010000011111000111111001010100001110000000000000101101101010101010101010101010101010101111000 y
b1011011110111001000011010001001110001000001111100011111100101010 }
b00000000000000000000010010000000 "!
b00000000000000000000000010000000 ""
b00000000010100 ">
1"Z
b00000000000101 "]
b00000000001000 "^
b00000000001000 "u
b00000000001010 "w
b00000000001001 "x
b00000000011000 "y
b00000000001010 "s
b00000000001010 "|
b0001110000000000000101101101010101010101010101010101010101111000 #<
b0001110000000000000101101101010101010101010101010101010101111000 #A
b000111000000000000010110110101010101010101010101010101010111100001 #8
b0001010 #L
1#K
b00000000010100 #X
b00000000011011 #Y
1#q
1#p
#30
b00000000000000000000000000001100 /
b00000000000000000000000000001100 0
b00000001 9
b0000000001001 #`
b11000100101100111111100100101001001001001010101111011011101101000101011110001000110000001011100000001010111000001010110001011000 #\
b1100010010110011111110010010100100100100101010111101101110110100 #x
b0101011110001000110000001011100000001010111000001010110001011000 #z
0#q
0#p
#31
b00000000000000000000000000001101 /
b00000000000000000000000000001101 0
b11000100101100111111100100101001001001001010101111011011101101000101011110001000110000001011100000001010111000001010110001011000 y
b1100010010110011111110010010100100100100101010111101101110110100 }
b00000000000000000000010100000000 "!
b00000000010110 ">
b00000000000111 "]
b00000000001010 "^
b00000000001010 "u
b00000000001001 "w
b00000000011000 "x
b00000000011011 "y
b00000000001100 "s
b00000000001100 "|
b000111000000000000010110110101010101010101010101010101010111100001 #!
b0001011 #L
0#S
b00000000010110 #X
b00000000011110 #Y
1#q
1#p
#32
b00000000000000000000000000001110 /
b00000000000000000000000000001110 0
b00000010 9
b0000000001010 #`
b01100111101001000001110010110001100011001010101100010001100011011100111111010100101110011010111000111101011100011000111011101101 #\
b0110011110100100000111001011000110001100101010110001000110001101 #x
b1100111111010100101110011010111000111101011100011000111011101101 #z
0#q
0#p
#33
b00000000000000000000000000001111 /
b00000000000000000000000000001111 0
b01100111101001000001110010110001100011001010101100010001100011011100111111010100101110011010111000111101011100011000111011101101 y
b0110011110100100000111001011000110001100101010110001000110001101 }
b00000000000000000000010110000000 "!
b00000000011000 ">
b00000000001001 "]
b00000000001100 "^
b00000000001100 "u
b00000000011000 "w
b00000000011011 "x
b00000000011110 "y
b00000000001110 "s
b00000000001110 "|
b000111000000000000010110110101010101010101010101010101010111100001 #$
b0001100 #L
1#S
0#K
b00000000011000 #X
b00000000011101 #Y
1#q
1#p
#34
b00000000000000000000000000010000 /
b00000000000000000000000000010000 0
b00000011 9
b0000000001011 #`
b11000010001101010011100010000011000000100111110011111010111100010001111111011101100011100111011000100010001111001111010001001100 #\
b1100001000110101001110001000001100000010011111001111101011110001 #x
b0001111111011101100011100111011000100010001111001111010001001100 #z
0#q
0#p
